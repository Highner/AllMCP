@model AllMCPSolution.Controllers.ManageTerroirController.WineSurferTerroirManagementViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@{
    Layout = null;
    var bodyClass = Model.CurrentUser is null ? "requires-auth" : "is-authenticated";
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = (ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel)
        ?? WineSurferTopBarModel.CreateFromSisterhoodData(
            currentLocation,
            Model.IncomingInvitations,
            Model.SentInvitationNotifications,
            displayName: Model.CurrentUser?.DisplayName,
            isAdmin: Model.CurrentUser?.IsAdmin == true,
            profilePhotoUrl: Model.CurrentUser?.ProfilePhotoUrl);
    var colors = Enum.GetValues(typeof(WineColor)).Cast<WineColor>().ToList();
    ViewData["WineSurferPageTitle"] = "Terroir manager";
    var hasStatus = !string.IsNullOrWhiteSpace(Model.StatusMessage);
    var hasError = !string.IsNullOrWhiteSpace(Model.ErrorMessage);
    var highlightSection = Model.HighlightSection;
    var highlightId = Model.HighlightId;
    highlightSection = string.IsNullOrWhiteSpace(highlightSection) ? null : highlightSection.Trim();
    highlightId = string.IsNullOrWhiteSpace(highlightId) ? null : highlightId.Trim();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer â€¢ Terroir manager</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
    <script defer src="/js/pwa.js"></script>
    <style>
        .terroir-manager {
            background: var(--wine-app-background);
        }

        .terroir-content {
            width: min(1180px, 100%);
            margin: 0 auto;
            padding: 48px 24px 96px;
            display: flex;
            flex-direction: column;
            gap: 40px;
        }

        .status-banner {
            padding: 18px 24px;
            border-radius: 16px;
            border: 1px solid hsla(var(--border) / 0.5);
            background: hsla(var(--accent) / 0.3);
            letter-spacing: 2px;
            text-transform: uppercase;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .status-banner--success {
            background: hsla(var(--primary) / 0.2);
            border-color: hsla(var(--primary) / 0.6);
            color: hsl(var(--primary-foreground));
        }

        .status-banner--error {
            background: hsla(var(--destructive) / 0.15);
            border-color: hsla(var(--destructive) / 0.6);
            color: hsl(var(--destructive-foreground));
        }

        .terroir-section {
            display: flex;
            flex-direction: column;
            gap: 20px;
            padding: 32px;
            border-radius: calc(var(--radius) * 1.1);
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--card) / 0.75);
            box-shadow: 0 24px 64px rgba(0, 0, 0, 0.35);
        }

        .terroir-section__header {
            display: flex;
            align-items: baseline;
            justify-content: space-between;
            gap: 16px;
            flex-wrap: wrap;
        }

        .terroir-section__title {
            margin: 0;
            font-size: clamp(26px, 4vw, 36px);
            text-transform: uppercase;
            letter-spacing: 8px;
        }

        .terroir-section__summary {
            margin: 0;
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .create-form {
            display: grid;
            gap: 16px;
            padding: 18px;
            border-radius: 16px;
            border: 1px dashed hsla(var(--border) / 0.55);
            background: hsla(var(--accent) / 0.18);
        }

        .create-form__fields {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 16px;
        }

        .create-form label {
            display: flex;
            flex-direction: column;
            gap: 8px;
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.9);
        }

        .create-form input,
        .create-form select {
            padding: 12px 14px;
            border-radius: 12px;
            border: 1px solid hsla(var(--border) / 0.6);
            background: hsla(var(--background) / 0.65);
            color: inherit;
        }

        .create-form input:focus,
        .create-form select:focus {
            outline: 2px solid hsla(var(--ring) / 0.9);
            outline-offset: 2px;
            border-color: hsla(var(--ring) / 0.9);
        }

        .terroir-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 10px 18px;
            border-radius: 12px;
            border: 1px solid hsla(var(--border) / 0.5);
            background: hsla(var(--accent) / 0.25);
            color: inherit;
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, border-color 0.2s ease, background 0.2s ease;
        }

        .terroir-button:hover,
        .terroir-button:focus-visible {
            transform: translateY(-1px);
            border-color: hsla(var(--accent) / 0.7);
            background: hsla(var(--accent) / 0.35);
        }

        .terroir-button--primary {
            background: linear-gradient(135deg, rgba(166, 25, 46, 0.95), rgba(219, 56, 56, 0.9));
            border-color: hsla(var(--primary) / 0.7);
            color: hsl(var(--primary-foreground));
        }

        .terroir-button--primary:hover,
        .terroir-button--primary:focus-visible {
            background: linear-gradient(135deg, rgba(219, 56, 56, 1), rgba(166, 25, 46, 1));
        }

        .terroir-button--danger {
            background: hsla(var(--destructive) / 0.18);
            border-color: hsla(var(--destructive) / 0.6);
            color: hsl(var(--destructive-foreground));
        }

        .terroir-table {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .terroir-table__header,
        .terroir-table__row {
            display: grid;
            grid-template-columns: minmax(0, 48px) minmax(0, 2fr) minmax(0, 1.4fr) minmax(0, 1.8fr) minmax(0, 1.2fr);
            gap: 12px;
            align-items: center;
        }

        .terroir-table--countries .terroir-table__header,
        .terroir-table--countries .terroir-table__row {
            grid-template-columns: minmax(0, 48px) minmax(0, 2fr) minmax(0, 2fr) minmax(0, 1fr);
        }

        .terroir-table--wines .terroir-table__header,
        .terroir-table--wines .terroir-table__row {
            grid-template-columns: minmax(0, 48px) minmax(0, 2fr) minmax(0, 1.6fr) minmax(0, 1fr) minmax(0, 1.4fr) minmax(0, 1.2fr);
        }

        .terroir-table__header {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.75);
            padding: 0 4px;
        }

        .terroir-table__row {
            padding: 14px;
            border-radius: 16px;
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--accent) / 0.22);
        }

        .terroir-table__select-header {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .terroir-table__cell--select {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .terroir-select {
            width: 18px;
            height: 18px;
            border-radius: 6px;
            border: 1px solid hsla(var(--border) / 0.6);
            background: hsla(var(--background) / 0.75);
            cursor: pointer;
        }

        .terroir-select:focus-visible {
            outline: 2px solid hsla(var(--ring) / 0.9);
            outline-offset: 2px;
            border-color: hsla(var(--ring) / 0.9);
        }

        .terroir-table__row--highlight {
            animation: terroir-row-highlight 1s ease;
        }

        @@keyframes terroir-row-highlight {
            0% {
                box-shadow: 0 0 0 3px hsla(var(--primary) / 0.45);
                background: hsla(var(--primary) / 0.35);
            }

            100% {
                box-shadow: none;
                background: hsla(var(--accent) / 0.22);
            }
        }

        .terroir-row-field {
            display: flex;
            flex-direction: column;
        }

        .terroir-row-field input,
        .terroir-row-field select {
            width: 100%;
            padding: 10px 12px;
            border-radius: 10px;
            border: 1px solid hsla(var(--border) / 0.5);
            background: hsla(var(--background) / 0.55);
            color: inherit;
        }

        .terroir-row-field input:focus,
        .terroir-row-field select:focus {
            outline: 2px solid hsla(var(--ring) / 0.9);
            outline-offset: 2px;
            border-color: hsla(var(--ring) / 0.9);
        }

        .terroir-row-stats {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .terroir-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 999px;
            background: hsla(var(--accent) / 0.3);
            border: 1px solid hsla(var(--border) / 0.4);
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
        }

        .terroir-badge strong {
            font-weight: 600;
            color: hsl(var(--foreground));
        }

        .terroir-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: flex-end;
        }

        .terroir-merge-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: 10px;
        }

        .terroir-merge-actions[hidden] {
            display: none;
        }

        .terroir-merge-form {
            display: none;
        }

        .terroir-merge-dialog[hidden] {
            display: none;
        }

        .terroir-merge-dialog {
            position: fixed;
            inset: 0;
            display: grid;
            place-items: center;
            z-index: 999;
        }

        .terroir-merge-dialog__backdrop {
            position: absolute;
            inset: 0;
            background: rgba(10, 10, 10, 0.55);
        }

        .terroir-merge-dialog__card {
            position: relative;
            width: min(420px, 92vw);
            background: hsla(var(--background) / 0.96);
            border-radius: 18px;
            padding: 24px;
            border: 1px solid hsla(var(--border) / 0.6);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.35);
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .terroir-merge-dialog__title {
            margin: 0;
            font-size: 20px;
            font-weight: 600;
            letter-spacing: 0.6px;
        }

        .terroir-merge-dialog__description {
            margin: 0;
            font-size: 14px;
            line-height: 1.5;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .terroir-merge-dialog__list {
            margin: 0;
            padding: 0;
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .terroir-merge-dialog__leader {
            width: 100%;
            padding: 12px 14px;
            border-radius: 12px;
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--accent) / 0.28);
            font-weight: 600;
            letter-spacing: 0.4px;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .terroir-merge-dialog__leader:hover,
        .terroir-merge-dialog__leader:focus-visible {
            outline: none;
            background: hsla(var(--accent) / 0.42);
            border-color: hsla(var(--accent) / 0.68);
        }

        .terroir-merge-dialog__footer {
            display: flex;
            justify-content: flex-end;
        }

        .terroir-empty {
            margin: 0;
            padding: 20px;
            border-radius: 14px;
            border: 1px dashed hsla(var(--border) / 0.4);
            text-align: center;
            letter-spacing: 2px;
            text-transform: uppercase;
            font-size: 11px;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        @@media (max-width: 900px) {
            .terroir-table__header,
            .terroir-table__row {
                grid-template-columns: 1fr;
            }

            .terroir-actions {
                justify-content: flex-start;
            }

            .terroir-table__cell--select {
                justify-content: flex-start;
            }
        }
    </style>
</head>
<body class="wine-app wine-app--with-bottom-nav terroir-manager @bodyClass" data-highlight-section="@highlightSection" data-highlight-id="@highlightId">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="terroir-content">
            <header class="wine-surfer-page-header" aria-label="Terroir management intro">
                <h1 class="wine-surfer-page-header__title">Terroir manager</h1>
                <p class="tagline">Curate the countries, regions, appellations, sub-appellations, and wines that power Wine Surfer.</p>
            </header>

            @if (hasStatus)
            {
                <div class="status-banner status-banner--success" role="status">@Model.StatusMessage</div>
            }
            @if (hasError)
            {
                <div class="status-banner status-banner--error" role="alert">@Model.ErrorMessage</div>
            }

            <section class="terroir-section" aria-labelledby="countries-title">
                <div class="terroir-section__header">
                    <h2 id="countries-title" class="terroir-section__title">Countries</h2>
                    <p class="terroir-section__summary">@Model.Countries.Count country@(Model.Countries.Count == 1 ? string.Empty : "s")</p>
                </div>
                <form class="create-form" method="post" action="@Url.Action("CreateCountry", "ManageTerroir")">
                    @Html.AntiForgeryToken()
                    <div class="create-form__fields">
                        <label for="create-country-name">
                            Country name
                            <input id="create-country-name" name="Name" type="text" placeholder="e.g. France" maxlength="256" required />
                        </label>
                    </div>
                    <button type="submit" class="terroir-button terroir-button--primary">Create country</button>
                </form>
                <div class="terroir-merge-actions" data-terroir-merge-actions="country" hidden>
                    <button type="button" class="terroir-button" data-terroir-merge-trigger="country">Merge selected countries</button>
                </div>
                <div class="terroir-table terroir-table--countries" role="table" aria-label="Existing countries">
                    <div class="terroir-table__header" role="row">
                        <span role="columnheader" class="terroir-table__select-header"><span class="sr-only">Select</span></span>
                        <span role="columnheader">Country</span>
                        <span role="columnheader">Stats</span>
                        <span role="columnheader">Actions</span>
                    </div>
                    @foreach (var country in Model.Countries)
                    {
                        var updateCountryUrl = Url.Action("UpdateCountry", "ManageTerroir", new { id = country.Id });
                        var deleteCountryUrl = Url.Action("DeleteCountry", "ManageTerroir", new { id = country.Id });
                        var countryNameId = $"country-name-{country.Id:N}";
                        var countrySelectId = $"country-select-{country.Id:N}";
                        var countryLabel = string.IsNullOrWhiteSpace(country.Name) ? "Unnamed country" : country.Name;
                        <form method="post"
                              action="@updateCountryUrl"
                              class="terroir-table__row"
                              role="row"
                              id="terroir-country-@country.Id"
                              data-terroir-item="country"
                              data-terroir-id="@country.Id">
                            @Html.AntiForgeryToken()
                            <div class="terroir-table__cell terroir-table__cell--select" role="cell">
                                <input id="@countrySelectId"
                                       type="checkbox"
                                       class="terroir-select"
                                       value="@country.Id"
                                       data-terroir-select="country"
                                       data-terroir-id="@country.Id"
                                       data-terroir-name="@countryLabel" />
                                <label class="sr-only" for="@countrySelectId">Select country @countryLabel</label>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@countryNameId">Country name</label>
                                <input id="@countryNameId" name="Name" type="text" value="@country.Name" maxlength="256" required />
                            </div>
                            <div class="terroir-row-stats" role="cell">
                                <span class="terroir-badge" title="Regions"><strong>@country.RegionCount</strong> Regions</span>
                                <span class="terroir-badge" title="Appellations"><strong>@country.AppellationCount</strong> Appellations</span>
                                <span class="terroir-badge" title="Sub-appellations"><strong>@country.SubAppellationCount</strong> Sub-appellations</span>
                                <span class="terroir-badge" title="Wines"><strong>@country.WineCount</strong> Wines</span>
                            </div>
                            <div class="terroir-actions" role="cell">
                                <button type="submit" class="terroir-button">Save</button>
                                <button type="submit"
                                        class="terroir-button terroir-button--danger"
                                        formaction="@deleteCountryUrl"
                                        formmethod="post"
                                        onclick="return confirm('Delete country @country.Name?');">
                                    Delete
                                </button>
                            </div>
                        </form>
                    }
                    @if (!Model.Countries.Any())
                    {
                        <div class="terroir-empty" role="row">No countries recorded yet.</div>
                    }
                </div>
                <form method="post"
                      action="@Url.Action("MergeCountries", "ManageTerroir")"
                      class="terroir-merge-form"
                      data-terroir-merge-form="country">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="LeaderId" value="" data-terroir-merge-leader="country" />
                    <div data-terroir-merge-ids="country"></div>
                </form>
            </section>

            <section class="terroir-section" aria-labelledby="regions-title">
                <div class="terroir-section__header">
                    <h2 id="regions-title" class="terroir-section__title">Regions</h2>
                    <p class="terroir-section__summary">@Model.Regions.Count region@(Model.Regions.Count == 1 ? string.Empty : "s")</p>
                </div>
                <form class="create-form" method="post" action="@Url.Action("CreateRegion", "ManageTerroir")">
                    @Html.AntiForgeryToken()
                    <div class="create-form__fields">
                        <label for="create-region-name">
                            Region name
                            <input id="create-region-name" name="Name" type="text" placeholder="e.g. Napa Valley" maxlength="256" required />
                        </label>
                        <label for="create-region-country">
                            Country
                            <select id="create-region-country" name="CountryId" required>
                                <option value="">Select country</option>
                                @foreach (var country in Model.Countries)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            </select>
                        </label>
                    </div>
                    <button type="submit" class="terroir-button terroir-button--primary">Create region</button>
                </form>
                <div class="terroir-merge-actions" data-terroir-merge-actions="region" hidden>
                    <button type="button" class="terroir-button" data-terroir-merge-trigger="region">Merge selected regions</button>
                </div>
                <div class="terroir-table terroir-table--regions" role="table" aria-label="Existing regions">
                    <div class="terroir-table__header" role="row">
                        <span role="columnheader" class="terroir-table__select-header"><span class="sr-only">Select</span></span>
                        <span role="columnheader">Region</span>
                        <span role="columnheader">Country</span>
                        <span role="columnheader">Stats</span>
                        <span role="columnheader">Actions</span>
                    </div>
                    @foreach (var region in Model.Regions)
                    {
                        var updateRegionUrl = Url.Action("UpdateRegion", "ManageTerroir", new { id = region.Id });
                        var deleteRegionUrl = Url.Action("DeleteRegion", "ManageTerroir", new { id = region.Id });
                        var regionNameId = $"region-name-{region.Id:N}";
                        var regionCountryId = $"region-country-{region.Id:N}";
                        var regionSelectId = $"region-select-{region.Id:N}";
                        var regionLabel = string.IsNullOrWhiteSpace(region.Name) ? "Unnamed region" : region.Name;
                        <form method="post"
                              action="@updateRegionUrl"
                              class="terroir-table__row"
                              role="row"
                              id="terroir-region-@region.Id"
                              data-terroir-item="region"
                              data-terroir-id="@region.Id">
                            @Html.AntiForgeryToken()
                            <div class="terroir-table__cell terroir-table__cell--select" role="cell">
                                <input id="@regionSelectId"
                                       type="checkbox"
                                       class="terroir-select"
                                       value="@region.Id"
                                       data-terroir-select="region"
                                       data-terroir-id="@region.Id"
                                       data-terroir-name="@regionLabel" />
                                <label class="sr-only" for="@regionSelectId">Select region @regionLabel</label>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@regionNameId">Region name</label>
                                <input id="@regionNameId" name="Name" type="text" value="@region.Name" maxlength="256" required />
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@regionCountryId">Country</label>
                                <select id="@regionCountryId" name="CountryId" required>
                                    @foreach (var country in Model.Countries)
                                    {
                                        <option value="@country.Id" @(country.Id == region.CountryId ? "selected" : null)>@country.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="terroir-row-stats" role="cell">
                                <span class="terroir-badge" title="Appellations"><strong>@region.AppellationCount</strong> Appellations</span>
                                <span class="terroir-badge" title="Sub-appellations"><strong>@region.SubAppellationCount</strong> Sub-appellations</span>
                                <span class="terroir-badge" title="Wines"><strong>@region.WineCount</strong> Wines</span>
                            </div>
                            <div class="terroir-actions" role="cell">
                                <button type="submit" class="terroir-button">Save</button>
                                <button type="submit"
                                        class="terroir-button terroir-button--danger"
                                        formaction="@deleteRegionUrl"
                                        formmethod="post"
                                        onclick="return confirm('Delete region @region.Name?');">
                                    Delete
                                </button>
                            </div>
                        </form>
                    }
                    @if (!Model.Regions.Any())
                    {
                        <div class="terroir-empty" role="row">No regions recorded yet.</div>
                    }
                </div>
                <form method="post"
                      action="@Url.Action("MergeRegions", "ManageTerroir")"
                      class="terroir-merge-form"
                      data-terroir-merge-form="region">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="LeaderId" value="" data-terroir-merge-leader="region" />
                    <div data-terroir-merge-ids="region"></div>
                </form>
            </section>

            <section class="terroir-section" aria-labelledby="appellations-title">
                <div class="terroir-section__header">
                    <h2 id="appellations-title" class="terroir-section__title">Appellations</h2>
                    <p class="terroir-section__summary">@Model.Appellations.Count appellation@(Model.Appellations.Count == 1 ? string.Empty : "s")</p>
                </div>
                <form class="create-form" method="post" action="@Url.Action("CreateAppellation", "ManageTerroir")">
                    @Html.AntiForgeryToken()
                    <div class="create-form__fields">
                        <label for="create-appellation-name">
                            Appellation name
                            <input id="create-appellation-name" name="Name" type="text" placeholder="e.g. Barossa" maxlength="256" required />
                        </label>
                        <label for="create-appellation-region">
                            Region
                            <select id="create-appellation-region" name="RegionId" required>
                                <option value="">Select region</option>
                                @foreach (var region in Model.Regions)
                                {
                                    <option value="@region.Id">@region.Name (@(region.CountryName ?? ""))</option>
                                }
                            </select>
                        </label>
                    </div>
                    <button type="submit" class="terroir-button terroir-button--primary">Create appellation</button>
                </form>
                <div class="terroir-merge-actions" data-terroir-merge-actions="appellation" hidden>
                    <button type="button" class="terroir-button" data-terroir-merge-trigger="appellation">Merge selected appellations</button>
                </div>
                <div class="terroir-table terroir-table--appellations" role="table" aria-label="Existing appellations">
                    <div class="terroir-table__header" role="row">
                        <span role="columnheader" class="terroir-table__select-header"><span class="sr-only">Select</span></span>
                        <span role="columnheader">Appellation</span>
                        <span role="columnheader">Region</span>
                        <span role="columnheader">Stats</span>
                        <span role="columnheader">Actions</span>
                    </div>
                    @foreach (var appellation in Model.Appellations)
                    {
                        var updateAppellationUrl = Url.Action("UpdateAppellation", "ManageTerroir", new { id = appellation.Id });
                        var deleteAppellationUrl = Url.Action("DeleteAppellation", "ManageTerroir", new { id = appellation.Id });
                        var appellationNameId = $"appellation-name-{appellation.Id:N}";
                        var appellationRegionId = $"appellation-region-{appellation.Id:N}";
                        var appellationSelectId = $"appellation-select-{appellation.Id:N}";
                        var appellationLabel = string.IsNullOrWhiteSpace(appellation.Name) ? "Unnamed appellation" : appellation.Name;
                        <form method="post"
                              action="@updateAppellationUrl"
                              class="terroir-table__row"
                              role="row"
                              id="terroir-appellation-@appellation.Id"
                              data-terroir-item="appellation"
                              data-terroir-id="@appellation.Id">
                            @Html.AntiForgeryToken()
                            <div class="terroir-table__cell terroir-table__cell--select" role="cell">
                                <input id="@appellationSelectId"
                                       type="checkbox"
                                       class="terroir-select"
                                       value="@appellation.Id"
                                       data-terroir-select="appellation"
                                       data-terroir-id="@appellation.Id"
                                       data-terroir-name="@appellationLabel" />
                                <label class="sr-only" for="@appellationSelectId">Select appellation @appellationLabel</label>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@appellationNameId">Appellation name</label>
                                <input id="@appellationNameId" name="Name" type="text" value="@appellation.Name" maxlength="256" required />
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@appellationRegionId">Region</label>
                                <select id="@appellationRegionId" name="RegionId" required>
                                    @foreach (var region in Model.Regions)
                                    {
                                        <option value="@region.Id" @(region.Id == appellation.RegionId ? "selected" : null)>
                                            @region.Name (@(region.CountryName ?? string.Empty))
                                        </option>
                                    }
                                </select>
                            </div>
                            <div class="terroir-row-stats" role="cell">
                                <span class="terroir-badge" title="Sub-appellations"><strong>@appellation.SubAppellationCount</strong> Sub-appellations</span>
                                <span class="terroir-badge" title="Wines"><strong>@appellation.WineCount</strong> Wines</span>
                            </div>
                            <div class="terroir-actions" role="cell">
                                <button type="submit" class="terroir-button">Save</button>
                                <button type="submit"
                                        class="terroir-button terroir-button--danger"
                                        formaction="@deleteAppellationUrl"
                                        formmethod="post"
                                        onclick="return confirm('Delete appellation @appellation.Name?');">
                                    Delete
                                </button>
                            </div>
                        </form>
                    }
                    @if (!Model.Appellations.Any())
                    {
                        <div class="terroir-empty" role="row">No appellations recorded yet.</div>
                    }
                </div>
                <form method="post"
                      action="@Url.Action("MergeAppellations", "ManageTerroir")"
                      class="terroir-merge-form"
                      data-terroir-merge-form="appellation">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="LeaderId" value="" data-terroir-merge-leader="appellation" />
                    <div data-terroir-merge-ids="appellation"></div>
                </form>
            </section>

            <section class="terroir-section" aria-labelledby="subappellations-title">
                <div class="terroir-section__header">
                    <h2 id="subappellations-title" class="terroir-section__title">Sub-appellations</h2>
                    <p class="terroir-section__summary">@Model.SubAppellations.Count sub-appellation@(Model.SubAppellations.Count == 1 ? string.Empty : "s")</p>
                </div>
                <form class="create-form" method="post" action="@Url.Action("CreateSubAppellation", "ManageTerroir")">
                    @Html.AntiForgeryToken()
                    <div class="create-form__fields">
                        <label for="create-subappellation-name">
                            Sub-appellation name
                            <input id="create-subappellation-name" name="Name" type="text" placeholder="Optional" maxlength="256" />
                        </label>
                        <label for="create-subappellation-appellation">
                            Appellation
                            <select id="create-subappellation-appellation" name="AppellationId" required>
                                <option value="">Select appellation</option>
                                @foreach (var appellation in Model.Appellations)
                                {
                                    <option value="@appellation.Id">@appellation.Name (@appellation.RegionName)</option>
                                }
                            </select>
                        </label>
                    </div>
                    <button type="submit" class="terroir-button terroir-button--primary">Create sub-appellation</button>
                </form>
                <div class="terroir-merge-actions" data-terroir-merge-actions="sub-appellation" hidden>
                    <button type="button" class="terroir-button" data-terroir-merge-trigger="sub-appellation">Merge selected sub-appellations</button>
                </div>
                <div class="terroir-table terroir-table--subappellations" role="table" aria-label="Existing sub-appellations">
                    <div class="terroir-table__header" role="row">
                        <span role="columnheader" class="terroir-table__select-header"><span class="sr-only">Select</span></span>
                        <span role="columnheader">Sub-appellation</span>
                        <span role="columnheader">Appellation</span>
                        <span role="columnheader">Stats</span>
                        <span role="columnheader">Actions</span>
                    </div>
                    @foreach (var subAppellation in Model.SubAppellations)
                    {
                        var updateSubUrl = Url.Action("UpdateSubAppellation", "ManageTerroir", new { id = subAppellation.Id });
                        var deleteSubUrl = Url.Action("DeleteSubAppellation", "ManageTerroir", new { id = subAppellation.Id });
                        var subNameId = $"subappellation-name-{subAppellation.Id:N}";
                        var subAppellationParentSelectId = $"subappellation-parent-{subAppellation.Id:N}";
                        var subCheckboxId = $"subappellation-select-{subAppellation.Id:N}";
                        var inputValue = string.IsNullOrWhiteSpace(subAppellation.Name) ? string.Empty : subAppellation.Name;
                        var subLabel = string.IsNullOrWhiteSpace(subAppellation.Name) ? "Unknown sub-appellation" : subAppellation.Name!;
                        <form method="post"
                              action="@updateSubUrl"
                              class="terroir-table__row"
                              role="row"
                              id="terroir-sub-appellation-@subAppellation.Id"
                              data-terroir-item="sub-appellation"
                              data-terroir-id="@subAppellation.Id">
                            @Html.AntiForgeryToken()
                            <div class="terroir-table__cell terroir-table__cell--select" role="cell">
                                <input id="@subCheckboxId"
                                       type="checkbox"
                                       class="terroir-select"
                                       value="@subAppellation.Id"
                                       data-terroir-select="sub-appellation"
                                       data-terroir-id="@subAppellation.Id"
                                       data-terroir-name="@subLabel" />
                                <label class="sr-only" for="@subCheckboxId">Select sub-appellation @subLabel</label>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@subNameId">Sub-appellation name</label>
                                <input id="@subNameId" name="Name" type="text" value="@inputValue" maxlength="256" />
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@subAppellationParentSelectId">Appellation</label>
                                <select id="@subAppellationParentSelectId" name="AppellationId" required>
                                    @foreach (var appellation in Model.Appellations)
                                    {
                                        <option value="@appellation.Id" @(appellation.Id == subAppellation.AppellationId ? "selected" : null)>
                                            @appellation.Name (@appellation.RegionName)
                                        </option>
                                    }
                                </select>
                            </div>
                            <div class="terroir-row-stats" role="cell">
                                <span class="terroir-badge" title="Wines"><strong>@subAppellation.WineCount</strong> Wines</span>
                            </div>
                            <div class="terroir-actions" role="cell">
                                <button type="submit" class="terroir-button">Save</button>
                                <button type="submit"
                                        class="terroir-button terroir-button--danger"
                                        formaction="@deleteSubUrl"
                                        formmethod="post"
                                        onclick="return confirm('Delete sub-appellation @(string.IsNullOrWhiteSpace(subAppellation.Name) ? "Unknown sub-appellation" : subAppellation.Name)?');">
                                    Delete
                                </button>
                            </div>
                        </form>
                    }
                    @if (!Model.SubAppellations.Any())
                    {
                        <div class="terroir-empty" role="row">No sub-appellations recorded yet.</div>
                    }
                </div>
                <form method="post"
                      action="@Url.Action("MergeSubAppellations", "ManageTerroir")"
                      class="terroir-merge-form"
                      data-terroir-merge-form="sub-appellation">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="LeaderId" value="" data-terroir-merge-leader="sub-appellation" />
                    <div data-terroir-merge-ids="sub-appellation"></div>
                </form>
            </section>

            <section class="terroir-section" aria-labelledby="wines-title">
                <div class="terroir-section__header">
                    <h2 id="wines-title" class="terroir-section__title">Wines</h2>
                    <p class="terroir-section__summary">@Model.Wines.Count wine@(Model.Wines.Count == 1 ? string.Empty : "s")</p>
                </div>
                <form class="create-form" method="post" action="@Url.Action("CreateWine", "ManageTerroir")">
                    @Html.AntiForgeryToken()
                    <div class="create-form__fields">
                        <label for="create-wine-name">
                            Wine name
                            <input id="create-wine-name" name="Name" type="text" placeholder="e.g. Penfolds Grange" maxlength="256" required />
                        </label>
                        <label for="create-wine-subappellation">
                            Sub-appellation
                            <select id="create-wine-subappellation" name="SubAppellationId" required>
                                <option value="">Select sub-appellation</option>
                                @foreach (var subAppellation in Model.SubAppellations)
                                {
                                    var label = string.IsNullOrWhiteSpace(subAppellation.Name)
                                        ? $"Unknown ({subAppellation.AppellationName})"
                                        : $"{subAppellation.Name} ({subAppellation.AppellationName})";
                                    <option value="@subAppellation.Id">@label</option>
                                }
                            </select>
                        </label>
                        <label for="create-wine-color">
                            Color
                            <select id="create-wine-color" name="Color" required>
                                @foreach (var color in colors)
                                {
                                    <option value="@color">@color</option>
                                }
                            </select>
                        </label>
                        <label for="create-wine-grape">
                            Grape variety
                            <input id="create-wine-grape" name="GrapeVariety" type="text" placeholder="Optional" maxlength="256" />
                        </label>
                    </div>
                    <button type="submit" class="terroir-button terroir-button--primary">Create wine</button>
                </form>
                <div class="terroir-merge-actions" data-terroir-merge-actions="wine" hidden>
                    <button type="button" class="terroir-button" data-terroir-merge-trigger="wine">Merge selected wines</button>
                </div>
                <div class="terroir-table terroir-table--wines" role="table" aria-label="Existing wines">
                    <div class="terroir-table__header" role="row">
                        <span role="columnheader" class="terroir-table__select-header"><span class="sr-only">Select</span></span>
                        <span role="columnheader">Wine</span>
                        <span role="columnheader">Sub-appellation</span>
                        <span role="columnheader">Color</span>
                        <span role="columnheader">Grape variety</span>
                        <span role="columnheader">Actions</span>
                    </div>
                    @foreach (var wine in Model.Wines)
                    {
                        var updateWineUrl = Url.Action("UpdateWine", "ManageTerroir", new { id = wine.Id });
                        var deleteWineUrl = Url.Action("DeleteWine", "ManageTerroir", new { id = wine.Id });
                        var wineNameId = $"wine-name-{wine.Id:N}";
                        var wineSubId = $"wine-sub-{wine.Id:N}";
                        var wineColorId = $"wine-color-{wine.Id:N}";
                        var wineGrapeId = $"wine-grape-{wine.Id:N}";
                        var wineSelectId = $"wine-select-{wine.Id:N}";
                        var wineLabel = string.IsNullOrWhiteSpace(wine.Name) ? "Unnamed wine" : wine.Name;
                        <form method="post"
                              action="@updateWineUrl"
                              class="terroir-table__row"
                              role="row"
                              id="terroir-wine-@wine.Id"
                              data-terroir-item="wine"
                              data-terroir-id="@wine.Id">
                            @Html.AntiForgeryToken()
                            <div class="terroir-table__cell terroir-table__cell--select" role="cell">
                                <input id="@wineSelectId"
                                       type="checkbox"
                                       class="terroir-select"
                                       value="@wine.Id"
                                       data-terroir-select="wine"
                                       data-terroir-id="@wine.Id"
                                       data-terroir-name="@wineLabel" />
                                <label class="sr-only" for="@wineSelectId">Select wine @wineLabel</label>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@wineNameId">Wine name</label>
                                <input id="@wineNameId" name="Name" type="text" value="@wine.Name" maxlength="256" required />
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@wineSubId">Sub-appellation</label>
                                <select id="@wineSubId" name="SubAppellationId" required>
                                    @foreach (var subAppellation in Model.SubAppellations)
                                    {
                                        var label = string.IsNullOrWhiteSpace(subAppellation.Name)
                                            ? $"Unknown ({subAppellation.AppellationName})"
                                            : $"{subAppellation.Name} ({subAppellation.AppellationName})";
                                        <option value="@subAppellation.Id" @(subAppellation.Id == wine.SubAppellationId ? "selected" : null)>@label</option>
                                    }
                                </select>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@wineColorId">Color</label>
                                <select id="@wineColorId" name="Color" required>
                                    @foreach (var color in colors)
                                    {
                                        <option value="@color" @(color == wine.Color ? "selected" : null)>@color</option>
                                    }
                                </select>
                            </div>
                            <div class="terroir-row-field" role="cell">
                                <label class="sr-only" for="@wineGrapeId">Grape variety</label>
                                <input id="@wineGrapeId" name="GrapeVariety" type="text" value="@wine.GrapeVariety" maxlength="256" />
                            </div>
                            <div class="terroir-actions" role="cell">
                                <button type="submit" class="terroir-button">Save</button>
                                <button type="submit"
                                        class="terroir-button terroir-button--danger"
                                        formaction="@deleteWineUrl"
                                        formmethod="post"
                                        onclick="return confirm('Delete wine @wine.Name?');">
                                    Delete
                                </button>
                            </div>
                        </form>
                    }
                    @if (!Model.Wines.Any())
                    {
                        <div class="terroir-empty" role="row">No wines recorded yet.</div>
                    }
                </div>
                <form method="post"
                      action="@Url.Action("MergeWines", "ManageTerroir")"
                      class="terroir-merge-form"
                      data-terroir-merge-form="wine">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="LeaderId" value="" data-terroir-merge-leader="wine" />
                    <div data-terroir-merge-ids="wine"></div>
                </form>
            </section>
        </main>
        <div class="terroir-merge-dialog" data-terroir-merge-dialog hidden>
            <div class="terroir-merge-dialog__backdrop" data-terroir-merge-dismiss></div>
            <div class="terroir-merge-dialog__card" role="dialog" aria-modal="true" aria-labelledby="terroir-merge-title">
                <div>
                    <h2 id="terroir-merge-title" class="terroir-merge-dialog__title">Merge selected items</h2>
                    <p class="terroir-merge-dialog__description" data-terroir-merge-description></p>
                </div>
                <ul class="terroir-merge-dialog__list" data-terroir-merge-list></ul>
                <div class="terroir-merge-dialog__footer">
                    <button type="button" class="terroir-button" data-terroir-merge-dismiss>Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        (function () {
            const root = document.body;
            if (!root) {
                return;
            }

            const section = root.dataset.highlightSection;
            const id = root.dataset.highlightId;
            if (!section || !id) {
                return;
            }

            const selector = '[data-terroir-item="' + section + '"][data-terroir-id="' + id + '"]';
            const target = document.querySelector(selector);
            if (!target) {
                return;
            }

            window.requestAnimationFrame(() => {
                if (typeof target.scrollIntoView === 'function') {
                    target.scrollIntoView({ block: 'center', inline: 'nearest' });
                }

                target.classList.add('terroir-table__row--highlight');
                window.setTimeout(() => {
                    target.classList.remove('terroir-table__row--highlight');
                }, 1200);
            });
        })();

        (function () {
            const labels = {
                'country': { singular: 'country', plural: 'countries' },
                'region': { singular: 'region', plural: 'regions' },
                'appellation': { singular: 'appellation', plural: 'appellations' },
                'sub-appellation': { singular: 'sub-appellation', plural: 'sub-appellations' },
                'wine': { singular: 'wine', plural: 'wines' }
            };

            const selectionState = new Map();
            const mergeActions = new Map();
            document.querySelectorAll('[data-terroir-merge-actions]').forEach(element => {
                const section = element.getAttribute('data-terroir-merge-actions');
                if (section) {
                    mergeActions.set(section, element);
                }
            });

            const mergeForms = new Map();
            document.querySelectorAll('[data-terroir-merge-form]').forEach(form => {
                const section = form.getAttribute('data-terroir-merge-form');
                if (!section) {
                    return;
                }

                const leaderInput = form.querySelector('[data-terroir-merge-leader]');
                const idsContainer = form.querySelector('[data-terroir-merge-ids]');
                if (!leaderInput || !idsContainer) {
                    return;
                }

                mergeForms.set(section, { form, leaderInput, idsContainer });
            });

            const dialog = document.querySelector('[data-terroir-merge-dialog]');
            if (!dialog) {
                return;
            }

            const list = dialog.querySelector('[data-terroir-merge-list]');
            const description = dialog.querySelector('[data-terroir-merge-description]');
            const dismissElements = dialog.querySelectorAll('[data-terroir-merge-dismiss]');
            let activeSection = null;
            let returnFocus = null;

            function ensureSectionState(section) {
                let state = selectionState.get(section);
                if (!state) {
                    state = new Map();
                    selectionState.set(section, state);
                }

                return state;
            }

            function updateActionVisibility(section) {
                const state = ensureSectionState(section);
                const container = mergeActions.get(section);
                if (!container) {
                    return;
                }

                const button = container.querySelector('[data-terroir-merge-trigger]');
                if (state.size > 1) {
                    container.hidden = false;
                    if (button) {
                        const label = labels[section] || { singular: 'item', plural: 'items' };
                        const noun = state.size === 1 ? label.singular : label.plural;
                        button.textContent = `Merge ${state.size} selected ${noun}`;
                    }
                } else {
                    container.hidden = true;
                }
            }

            document.querySelectorAll('[data-terroir-select]').forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    const section = checkbox.getAttribute('data-terroir-select');
                    const id = checkbox.getAttribute('data-terroir-id');
                    const name = checkbox.getAttribute('data-terroir-name') || 'Selected item';
                    if (!section || !id) {
                        return;
                    }

                    const state = ensureSectionState(section);
                    if (checkbox.checked) {
                        state.set(id, { id, name, checkbox });
                    } else {
                        state.delete(id);
                    }

                    updateActionVisibility(section);
                });
            });

            document.querySelectorAll('[data-terroir-merge-trigger]').forEach(button => {
                button.addEventListener('click', () => {
                    const section = button.getAttribute('data-terroir-merge-trigger');
                    if (!section) {
                        return;
                    }

                    openDialog(section, button);
                });
            });

            dismissElements.forEach(element => {
                element.addEventListener('click', closeDialog);
            });

            document.addEventListener('keydown', event => {
                if (event.key === 'Escape' && !dialog.hasAttribute('hidden')) {
                    closeDialog();
                }
            });

            function openDialog(section, trigger) {
                const state = ensureSectionState(section);
                if (state.size < 2) {
                    return;
                }

                activeSection = section;
                returnFocus = trigger instanceof HTMLElement ? trigger : null;

                const label = labels[section] || { singular: 'item', plural: 'items' };
                if (description) {
                    description.textContent = `Select the leading ${label.singular}. It keeps its parent connections and absorbs the others.`;
                }

                if (list) {
                    list.innerHTML = '';
                    state.forEach(entry => {
                        const listItem = document.createElement('li');
                        const leaderButton = document.createElement('button');
                        leaderButton.type = 'button';
                        leaderButton.className = 'terroir-merge-dialog__leader';
                        leaderButton.textContent = entry.name;
                        leaderButton.addEventListener('click', () => {
                            submitMerge(section, entry.id);
                        });
                        listItem.appendChild(leaderButton);
                        list.appendChild(listItem);
                    });

                    const firstButton = list.querySelector('button');
                    if (firstButton) {
                        window.requestAnimationFrame(() => firstButton.focus());
                    }
                }

                dialog.hidden = false;
            }

            function closeDialog() {
                if (dialog.hidden) {
                    return;
                }

                dialog.hidden = true;
                activeSection = null;
                if (returnFocus && typeof returnFocus.focus === 'function') {
                    returnFocus.focus();
                }
            }

            function submitMerge(section, leaderId) {
                const formData = mergeForms.get(section);
                const state = ensureSectionState(section);
                if (!formData || !leaderId || state.size < 2) {
                    closeDialog();
                    return;
                }

                formData.leaderInput.value = leaderId;
                formData.idsContainer.innerHTML = '';
                state.forEach(entry => {
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'EntityIds';
                    hiddenInput.value = entry.id;
                    formData.idsContainer.appendChild(hiddenInput);
                });

                closeDialog();
                formData.form.submit();
            }
        })();
    </script>
    @await Html.PartialAsync("_WineSurferBottomNav", Context?.Request?.Path.Value)
</body>
</html>
