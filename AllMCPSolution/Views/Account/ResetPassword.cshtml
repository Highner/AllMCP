@model AllMCPSolution.Models.ResetPasswordViewModel
@using AllMCPSolution.Controllers
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    var loginUrl = Url.Action("Login", "Account");
    var topBarModel = new WineSurferTopBarModel(currentPath, Array.Empty<WineSurferIncomingSisterhoodInvitation>());
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Reset password â€¢ Wine Surfer</title>
    @await Html.PartialAsync("_AuthStyles")
</head>
<body>
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="auth-main">
            <section class="auth-card" aria-labelledby="resetPasswordTitle">
                <header>
                    <h1 id="resetPasswordTitle" class="auth-title">Set a new password</h1>
                    <p class="auth-subtitle">Create a fresh password to secure your Wine Surfer account.</p>
                </header>

                @using (Html.BeginForm("ResetPassword", "Account", FormMethod.Post, new { @class = "auth-form", autocomplete = "off" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Token)

                    @Html.ValidationSummary(false, "", new { @class = "auth-validation", role = "alert" })

                    <div class="auth-field">
                        @Html.LabelFor(model => model.Email)
                        @Html.TextBoxFor(model => model.Email, new { @class = "auth-input", type = "email", autocomplete = "email", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Email, null, new { @class = "validation-message" })
                    </div>

                    <div class="auth-field">
                        @Html.LabelFor(model => model.Password)
                        @Html.PasswordFor(model => model.Password, new { @class = "auth-input", autocomplete = "new-password" })
                        @Html.ValidationMessageFor(model => model.Password, null, new { @class = "validation-message" })
                    </div>

                    <div class="auth-field">
                        @Html.LabelFor(model => model.ConfirmPassword)
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "auth-input", autocomplete = "new-password" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, null, new { @class = "validation-message" })
                    </div>

                    <div class="auth-actions">
                        <button type="submit" class="auth-toggle">Update password</button>
                        <div class="auth-links">
                            <a href="@loginUrl">Return to sign in</a>
                        </div>
                    </div>
                }
            </section>
        </main>
    </div>
</body>
</html>
