@model AllMCPSolution.Models.ChangePasswordViewModel
@using AllMCPSolution.Controllers
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    var statusMessage = ViewData["StatusMessage"] as string;
    var topBarModel = ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel
        ?? WineSurferTopBarModel.Empty(currentPath);
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Change password â€¢ Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    @await Html.PartialAsync("_AuthStyles")
    <script defer src="/js/pwa.js"></script>
</head>
<body class="wine-app">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="auth-main">
            <section class="auth-card wine-surface wine-surface-border wine-card-hover" aria-labelledby="changePasswordTitle">
                <header>
                    <h1 id="changePasswordTitle" class="auth-title">Update password</h1>
                    <p class="auth-subtitle">Keep your cellar protected by choosing a strong, unique password.</p>
                </header>

                @if (!string.IsNullOrWhiteSpace(statusMessage))
                {
                    <div class="auth-alert success" role="status">@statusMessage</div>
                }

                @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { @class = "auth-form", autocomplete = "off" }))
                {
                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(false, "", new { @class = "auth-validation", role = "alert" })

                    <div class="auth-field">
                        @Html.LabelFor(model => model.OldPassword)
                        @Html.PasswordFor(model => model.OldPassword, new { @class = "auth-input", autocomplete = "current-password" })
                        @Html.ValidationMessageFor(model => model.OldPassword, null, new { @class = "validation-message" })
                    </div>

                    <div class="auth-field">
                        @Html.LabelFor(model => model.NewPassword)
                        @Html.PasswordFor(model => model.NewPassword, new { @class = "auth-input", autocomplete = "new-password" })
                        @Html.ValidationMessageFor(model => model.NewPassword, null, new { @class = "validation-message" })
                    </div>

                    <div class="auth-field">
                        @Html.LabelFor(model => model.ConfirmPassword)
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "auth-input", autocomplete = "new-password" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, null, new { @class = "validation-message" })
                    </div>

                    <div class="auth-actions">
                        <button type="submit" class="auth-toggle">Save password</button>
                    </div>
                }
            </section>
        </main>
    </div>
</body>
</html>
