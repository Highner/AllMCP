@using System
@using System.Globalization
@using System.Linq
@using System.Text.Json
@using AllMCPSolution.Controllers
@model AllMCPSolution.Controllers.WineWavesViewModel
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    var topBarModel = ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel
        ?? WineSurferTopBarModel.Empty(currentPath);
    ViewData["WineSurferPageTitle"] = "Wine Waves";
    var hasDatasets = Model.Datasets.Any();
    var hasInventory = Model.Inventory.Any();
    var chartPayload = Model.Datasets.Select(dataset => new
    {
        id = dataset.WineVintageId,
        label = dataset.Label,
        details = dataset.Details,
        color = dataset.ColorHex,
        points = dataset.Points
            .OrderBy(point => point.Year)
        .Select(point => new
        {
            year = point.Year,
            score = Convert.ToDouble(point.Score, CultureInfo.InvariantCulture)
        })
    }).ToList();
    var chartDataJson = JsonSerializer.Serialize(chartPayload);
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Waves â€¢ Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
    <script defer src="/js/pwa.js"></script>
    <style>
        :root {
            color-scheme: dark;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, BlinkMacSystemFont, 'Helvetica Neue', sans-serif;
            color: rgba(244, 241, 234, 0.94);
        }

        main {
            display: flex;
            flex-direction: column;
            gap: 32px;
            padding: 48px 20px 72px;
            max-width: 1040px;
            margin: 0 auto;
            width: 100%;
        }

        .waves-header {
            display: flex;
            flex-direction: column;
            gap: 12px;
            text-align: center;
        }

        .waves-title {
            font-size: clamp(2rem, 3vw, 2.5rem);
            margin: 0;
            letter-spacing: 2px;
            text-transform: uppercase;
        }

        .waves-description {
            margin: 0;
            color: rgba(244, 241, 234, 0.72);
            font-size: 1.05rem;
            line-height: 1.6;
        }

        .waves-chart-card {
            background: rgba(17, 17, 20, 0.82);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 24px;
            padding: 32px;
            display: flex;
            flex-direction: column;
            gap: 24px;
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.35);
        }

        .waves-actions {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 12px;
            margin-top: 8px;
        }

        .make-waves-button {
            appearance: none;
            border: none;
            border-radius: 999px;
            padding: 12px 28px;
            font-size: 0.95rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1.4px;
            background: linear-gradient(135deg, rgba(244, 80, 67, 0.82), rgba(224, 142, 55, 0.9));
            color: rgba(17, 17, 20, 0.94);
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
            box-shadow: 0 12px 24px rgba(244, 96, 64, 0.25);
        }

        .make-waves-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 16px 32px rgba(244, 96, 64, 0.3);
        }

        .make-waves-button:focus-visible {
            outline: 2px solid rgba(244, 241, 234, 0.9);
            outline-offset: 3px;
        }

        .make-waves-button:disabled,
        .make-waves-button[aria-disabled="true"] {
            cursor: not-allowed;
            opacity: 0.5;
            box-shadow: none;
        }

        .waves-actions-help {
            margin: 0;
            font-size: 0.85rem;
            color: rgba(244, 241, 234, 0.6);
            text-align: center;
        }

        .waves-chart-wrapper {
            position: relative;
            min-height: 360px;
            cursor: zoom-in;
            border-radius: 20px;
            overflow: hidden;
            transition: box-shadow 0.3s ease, transform 0.3s ease;
        }

        .waves-chart-wrapper:hover {
            box-shadow: 0 16px 36px rgba(0, 0, 0, 0.28);
            transform: translateY(-2px);
        }

        .waves-chart-wrapper.is-fullscreen {
            position: fixed;
            inset: 0;
            z-index: 1200;
            min-height: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(17, 17, 20, 0.96);
            box-shadow: 0 40px 80px rgba(0, 0, 0, 0.55);
            cursor: default;
            transform: none;
            border-radius: 0;
        }

        .waves-chart-wrapper.is-fullscreen:hover {
            box-shadow: 0 40px 80px rgba(0, 0, 0, 0.55);
        }

        .waves-chart-wrapper.is-fullscreen canvas {
            width: 100% !important;
            height: 100% !important;
        }

        .waves-chart-close {
            position: absolute;
            top: 18px;
            right: 18px;
            width: 36px;
            height: 36px;
            border-radius: 999px;
            border: none;
            background: rgba(244, 241, 234, 0.14);
            color: rgba(244, 241, 234, 0.92);
            font-size: 1.1rem;
            font-weight: 600;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s ease, transform 0.2s ease;
            z-index: 1;
        }

        .waves-chart-close:hover,
        .waves-chart-close:focus-visible {
            background: rgba(244, 241, 234, 0.24);
            transform: scale(1.05);
            outline: none;
        }

        .waves-chart-wrapper.is-fullscreen .waves-chart-close {
            display: inline-flex;
        }

        .waves-legend {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 16px;
        }

        .waves-legend-item {
            display: flex;
            gap: 12px;
            align-items: flex-start;
            background: rgba(244, 241, 234, 0.04);
            border-radius: 14px;
            padding: 16px;
        }

        .waves-legend-dot {
            width: 12px;
            height: 12px;
            border-radius: 999px;
            margin-top: 4px;
            flex-shrink: 0;
        }

        .waves-legend-content {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .waves-legend-label {
            margin: 0;
            font-weight: 600;
            font-size: 0.95rem;
        }

        .waves-legend-details {
            margin: 0;
            color: rgba(244, 241, 234, 0.64);
            font-size: 0.85rem;
            line-height: 1.5;
        }

        .waves-empty {
            margin: 0;
            text-align: center;
            color: rgba(244, 241, 234, 0.7);
            font-size: 1.05rem;
        }

        .waves-popover-backdrop[hidden] {
            display: none;
        }

        .waves-popover-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(5, 5, 7, 0.72);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 24px;
            z-index: 1000;
        }

        .waves-popover-dialog {
            background: rgba(18, 18, 22, 0.96);
            border-radius: 18px;
            width: min(520px, 100%);
            border: 1px solid rgba(244, 241, 234, 0.12);
            box-shadow: 0 28px 48px rgba(0, 0, 0, 0.55);
            padding: 32px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .waves-popover-form h2 {
            margin: 0;
            font-size: 1.5rem;
            letter-spacing: 1px;
        }

        .waves-popover-description {
            margin: 0;
            color: rgba(244, 241, 234, 0.7);
            line-height: 1.6;
            font-size: 0.95rem;
        }

        .waves-popover-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            max-height: 320px;
            overflow: auto;
            padding-right: 4px;
        }

        .waves-popover-option {
            display: flex;
            gap: 12px;
            align-items: flex-start;
            background: rgba(244, 241, 234, 0.05);
            border-radius: 14px;
            padding: 12px 16px;
        }

        .waves-popover-option input[type="checkbox"] {
            width: 18px;
            height: 18px;
            margin-top: 4px;
            accent-color: #E4572E;
        }

        .waves-popover-option-content {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .waves-popover-option-label {
            margin: 0;
            font-weight: 600;
            font-size: 0.95rem;
        }

        .waves-popover-option-details {
            margin: 0;
            color: rgba(244, 241, 234, 0.6);
            font-size: 0.85rem;
        }

        .waves-popover-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .waves-primary-button,
        .waves-secondary-button {
            appearance: none;
            border: none;
            border-radius: 999px;
            padding: 10px 22px;
            font-weight: 600;
            letter-spacing: 1px;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
        }

        .waves-primary-button {
            background: rgba(244, 241, 234, 0.95);
            color: rgba(17, 17, 20, 0.9);
            box-shadow: 0 8px 18px rgba(244, 241, 234, 0.2);
        }

        .waves-secondary-button {
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.85);
        }

        .waves-primary-button:hover,
        .waves-secondary-button:hover {
            transform: translateY(-1px);
        }

        .waves-primary-button:disabled,
        .waves-secondary-button:disabled {
            cursor: not-allowed;
            opacity: 0.6;
            transform: none;
            box-shadow: none;
        }

        body.waves-popover-open {
            overflow: hidden;
        }

        body.waves-chart-fullscreen-open {
            overflow: hidden;
        }

        @@media (max-width: 720px) {
            main {
                padding: 32px 16px 64px;
            }

            .waves-chart-card {
                padding: 24px;
            }

            .waves-popover-dialog {
                padding: 24px;
            }
        }
    </style>
</head>
<body class="wine-app">
    @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
    <main>
        <section class="waves-header">
            <h1 class="waves-title">Wine Waves</h1>
            <p class="waves-description">
                Track how each vintage evolves across the years. Scores update as you capture more tasting history, helping you
                decide when to uncork the perfect bottle.
            </p>
        </section>
        <section class="waves-actions">
            @await Html.PartialAsync("_MakeWavesButton", hasInventory)
            <p class="waves-actions-help">
                @(hasInventory
                    ? "Select wines from your cellar to ask Wine Waves for new evolution scores."
                    : "Add wines to your inventory to generate fresh evolution scores.")
            </p>
        </section>
        <section class="waves-chart-card" aria-live="polite">
            @if (hasDatasets)
            {
                <div class="waves-chart-wrapper" data-waves-chart-wrapper aria-expanded="false">
                    <button type="button" class="waves-chart-close" data-waves-chart-close aria-label="Close full screen chart">Ã—</button>
                    <canvas id="wineWavesChart" role="img" aria-label="Line chart of evolution scores by vintage"></canvas>
                </div>
                <div class="waves-legend">
                    @foreach (var dataset in Model.Datasets)
                    {
                        <article class="waves-legend-item">
                            <span class="waves-legend-dot" style="background-color: @dataset.ColorHex"></span>
                            <div class="waves-legend-content">
                                <h2 class="waves-legend-label">@dataset.Label</h2>
                                @if (!string.IsNullOrWhiteSpace(dataset.Details))
                                {
                                    <p class="waves-legend-details">@dataset.Details</p>
                                }
                            </div>
                        </article>
                    }
                </div>
            }
            else
            {
                <p class="waves-empty">Start scoring your wines to see their evolution unfold here.</p>
            }
        </section>
    </main>
    @if (hasInventory)
    {
        <div class="waves-popover-backdrop" data-make-waves-popover hidden>
            <div class="waves-popover-dialog" role="dialog" aria-modal="true" aria-labelledby="wavesPopoverTitle">
                <form class="waves-popover-form" data-make-waves-form>
                    <h2 id="wavesPopoverTitle">Make waves</h2>
                    <p class="waves-popover-description">Select the vintages you want Wine Waves to analyze for fresh evolution scores.</p>
                    <div class="waves-popover-list" role="group" aria-labelledby="wavesPopoverTitle">
                        @for (var index = 0; index < Model.Inventory.Count; index++)
                        {
                            var item = Model.Inventory[index];
                            var optionId = $"waves-option-{index}";
                            <label class="waves-popover-option" for="@optionId">
                                <input type="checkbox" id="@optionId" name="wineVintageIds" value="@item.WineVintageId" />
                                <span class="waves-popover-option-content">
                                    <span class="waves-popover-option-label">@item.Label</span>
                                    @if (!string.IsNullOrWhiteSpace(item.Details))
                                    {
                                        <span class="waves-popover-option-details">@item.Details</span>
                                    }
                                </span>
                            </label>
                        }
                    </div>
                    @Html.AntiForgeryToken()
                    <div class="waves-popover-actions">
                        <button type="button" class="waves-secondary-button" data-make-waves-cancel>Cancel</button>
                        <button type="submit" class="waves-primary-button" data-make-waves-submit>Make waves</button>
                    </div>
                </form>
            </div>
        </div>
    }
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        (function () {
            const trigger = document.querySelector('[data-make-waves-trigger]');
            const popover = document.querySelector('[data-make-waves-popover]');
            if (!trigger || !popover) {
                return;
            }

            const form = popover.querySelector('[data-make-waves-form]');
            const cancelButton = popover.querySelector('[data-make-waves-cancel]');
            const submitButton = popover.querySelector('[data-make-waves-submit]');
            const endpoint = '/wine-surfer/wine-waves/make';
            let lastFocusedElement = null;

            const closePopover = () => {
                popover.setAttribute('hidden', 'hidden');
                document.body.classList.remove('waves-popover-open');
                popover.classList.remove('open');
                trigger.setAttribute('aria-expanded', 'false');
                if (lastFocusedElement && typeof lastFocusedElement.focus === 'function') {
                    lastFocusedElement.focus();
                } else {
                    trigger.focus();
                }
            };

            const openPopover = () => {
                if (trigger.hasAttribute('disabled')) {
                    return;
                }

                lastFocusedElement = document.activeElement;
                popover.removeAttribute('hidden');
                document.body.classList.add('waves-popover-open');
                popover.classList.add('open');
                trigger.setAttribute('aria-expanded', 'true');

                const firstCheckbox = popover.querySelector('input[type="checkbox"]');
                if (firstCheckbox && typeof firstCheckbox.focus === 'function') {
                    firstCheckbox.focus();
                }
            };

            trigger.addEventListener('click', openPopover);

            popover.addEventListener('click', (event) => {
                if (event.target === popover) {
                    closePopover();
                }
            });

            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && popover.classList.contains('open')) {
                    closePopover();
                }
            });

            if (cancelButton) {
                cancelButton.addEventListener('click', () => {
                    closePopover();
                });
            }

            if (form && submitButton) {
                form.addEventListener('submit', async (event) => {
                    event.preventDefault();

                    const selected = Array.from(form.querySelectorAll('input[name="wineVintageIds"]:checked'))
                        .map((input) => input.value)
                        .filter((value) => typeof value === 'string' && value.trim().length > 0);

                    if (selected.length === 0) {
                        window.alert('Select at least one wine to make new waves.');
                        return;
                    }

                    const originalLabel = submitButton.textContent;
                    submitButton.disabled = true;
                    submitButton.textContent = 'Making wavesâ€¦';

                    try {
                        const headers = {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        };

                        const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
                        if (tokenInput && tokenInput instanceof HTMLInputElement && tokenInput.value) {
                            headers['RequestVerificationToken'] = tokenInput.value;
                        }

                        const response = await fetch(endpoint, {
                            method: 'POST',
                            headers,
                            credentials: 'same-origin',
                            body: JSON.stringify({ wineVintageIds: selected })
                        });

                        const contentType = response.headers.get('content-type') || '';
                        const expectsJson = contentType.toLowerCase().includes('application/json');
                        const payload = expectsJson ? await response.json().catch(() => null) : null;

                        if (!response.ok || !payload) {
                            const errorMessage = payload?.message || 'We could not create new waves. Please try again.';
                            window.alert(errorMessage);
                            return;
                        }

                        window.alert(payload.message || 'Wine Waves updated your evolution scores.');
                        closePopover();
                        window.location.reload();
                    } catch (error) {
                        window.alert('We could not create new waves. Please try again.');
                    } finally {
                        submitButton.disabled = false;
                        submitButton.textContent = originalLabel;
                    }
                });
            }
        })();

        (function () {
            const wrapper = document.querySelector('[data-waves-chart-wrapper]');
            if (!wrapper) {
                return;
            }

            const closeButton = wrapper.querySelector('[data-waves-chart-close]');
            const body = document.body;
            let lastFocusedElement = null;

            const exitFullScreen = () => {
                if (!wrapper.classList.contains('is-fullscreen')) {
                    return;
                }

                wrapper.classList.remove('is-fullscreen');
                wrapper.setAttribute('aria-expanded', 'false');
                body.classList.remove('waves-chart-fullscreen-open');

                if (lastFocusedElement && typeof lastFocusedElement.focus === 'function') {
                    lastFocusedElement.focus();
                }

                window.dispatchEvent(new Event('resize'));
            };

            const enterFullScreen = () => {
                if (wrapper.classList.contains('is-fullscreen')) {
                    return;
                }

                lastFocusedElement = document.activeElement;
                wrapper.classList.add('is-fullscreen');
                wrapper.setAttribute('aria-expanded', 'true');
                body.classList.add('waves-chart-fullscreen-open');
                window.dispatchEvent(new Event('resize'));

                if (closeButton && typeof closeButton.focus === 'function') {
                    setTimeout(() => closeButton.focus(), 0);
                }
            };

            wrapper.addEventListener('click', (event) => {
                if (wrapper.classList.contains('is-fullscreen')) {
                    return;
                }

                if (closeButton && event.target === closeButton) {
                    return;
                }

                enterFullScreen();
            });

            if (closeButton) {
                closeButton.addEventListener('click', (event) => {
                    event.stopPropagation();
                    exitFullScreen();
                });
            }

            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape') {
                    exitFullScreen();
                }
            });
        })();

        (function () {
            const data = @Html.Raw(chartDataJson);
            const hasData = Array.isArray(data) && data.length > 0;
            if (!hasData) {
                return;
            }

            const ctx = document.getElementById('wineWavesChart');
            if (!ctx) {
                return;
            }

            const datasets = data.map(dataset => ({
                label: dataset.label,
                data: dataset.points.map(point => ({ x: point.year, y: point.score })),
                borderColor: dataset.color,
                backgroundColor: dataset.color,
                tension: 0.35,
                borderWidth: 2,
                pointRadius: 0,
                pointHoverRadius: 0,
                pointHitRadius: 10,
                spanGaps: true,
                fill: false
            }));

            new Chart(ctx, {
                type: 'line',
                data: {
                    datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'nearest',
                        intersect: false
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                title(tooltipItems) {
                                    const item = tooltipItems[0];
                                    return `Year ${item.parsed.x}`;
                                },
                                label(tooltipItem) {
                                    const value = Number.parseFloat(tooltipItem.formattedValue).toFixed(1);
                                    return `${tooltipItem.dataset.label}: ${value}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            type: 'linear',
                            title: {
                                display: true,
                                text: 'Year'
                            },
                            ticks: {
                                callback(value) {
                                    const numericValue = Number(value);
                                    if (Number.isFinite(numericValue)) {
                                        return Math.round(numericValue).toString();
                                    }

                                    return '';
                                }
                            },
                            grid: {
                                color: 'rgba(244, 241, 234, 0.08)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Evolution Score'
                            },
                            ticks: {
                                callback(value) {
                                    return Number.parseFloat(value).toFixed(0);
                                }
                            },
                            grid: {
                                color: 'rgba(244, 241, 234, 0.08)'
                            }
                        }
                    }
                }
            });
        })();
    </script>
</body>
</html>
