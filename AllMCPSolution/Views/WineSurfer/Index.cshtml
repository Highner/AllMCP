@model AllMCPSolution.Controllers.WineSurferLandingViewModel
@using System.Globalization
@using System.Linq
@using System.Text.Json
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer</title>
    <style>
        :root {
            color-scheme: dark;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: #050505;
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
        }

        .top-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 24px 32px;
            position: sticky;
            top: 0;
            background: rgba(5, 5, 5, 0.92);
            backdrop-filter: blur(8px);
            border-bottom: 1px solid rgba(244, 241, 234, 0.08);
            z-index: 10;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
            letter-spacing: 4px;
            text-transform: uppercase;
            font-weight: 600;
            font-size: 20px;
        }

        .burger {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.15);
            background: rgba(244, 241, 234, 0.05);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .burger span {
            position: relative;
            width: 20px;
            height: 2px;
            background: #f4f1ea;
            display: block;
        }

        .burger span::before,
        .burger span::after {
            content: "";
            position: absolute;
            left: 0;
            width: 100%;
            height: 2px;
            background: #f4f1ea;
            transition: transform 0.2s ease;
        }

        .burger span::before {
            transform: translateY(-6px);
        }

        .burger span::after {
            transform: translateY(6px);
        }

        .burger.active span {
            background: transparent;
        }

        .burger.active span::before {
            transform: rotate(45deg);
        }

        .burger.active span::after {
            transform: rotate(-45deg);
        }

        .menu-panel {
            position: absolute;
            top: 76px;
            right: 32px;
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 16px;
            padding: 20px;
            min-width: 220px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.45);
            display: none;
        }

        .menu-panel.open {
            display: block;
        }

        .menu-panel a {
            display: block;
            padding: 12px 16px;
            border-radius: 10px;
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-size: 12px;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .menu-panel a:hover {
            background: rgba(244, 241, 234, 0.12);
            transform: translateX(4px);
        }

        main {
            flex: 1;
            padding: 80px 24px 60px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 48px;
        }

        h1 {
            font-size: clamp(48px, 6vw, 96px);
            margin: 0;
            letter-spacing: 12px;
            text-transform: uppercase;
            text-align: center;
        }

        .tagline {
            font-size: 18px;
            max-width: 680px;
            text-align: center;
            line-height: 1.7;
            color: rgba(244, 241, 234, 0.75);
            letter-spacing: 2px;
            text-transform: uppercase;
        }

        .login-card {
            width: min(100%, 520px);
            padding: 28px 32px;
            border-radius: 20px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(12, 12, 12, 0.85);
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.45);
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .login-card h2 {
            margin: 0;
            font-size: 20px;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .login-card p {
            margin: 0;
            font-size: 14px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .login-card form {
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .login-field {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .login-field label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .login-field input {
            padding: 12px 14px;
            border-radius: 10px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: rgba(20, 20, 20, 0.9);
            color: #f4f1ea;
            font-size: 16px;
            letter-spacing: 0.5px;
        }

        .login-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .login-actions button {
            padding: 12px 24px;
            border-radius: 10px;
            border: none;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 2px;
            cursor: pointer;
            transition: transform 0.2s ease, background 0.2s ease;
        }

        .login-actions button.primary {
            background: #f4f1ea;
            color: #050505;
        }

        .login-actions button.secondary {
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            border: 1px solid rgba(244, 241, 234, 0.2);
        }

        .login-actions button:hover {
            transform: translateY(-2px);
        }

        .login-status {
            min-height: 20px;
            font-size: 13px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .login-status.success {
            color: #7bd88f;
        }

        .login-status.error {
            color: #ff9d9d;
        }

        .login-continue {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 12px 24px;
            border-radius: 10px;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 2px;
            text-transform: uppercase;
            font-size: 12px;
        }

        .login-continue:hover {
            border-color: rgba(244, 241, 234, 0.4);
        }

        .map-shell {
            position: relative;
            width: min(100%, 960px);
            aspect-ratio: 16 / 9;
            border-radius: 24px;
            background: radial-gradient(circle at 30% 30%, rgba(244, 241, 234, 0.08), transparent 55%),
                        radial-gradient(circle at 70% 70%, rgba(244, 241, 234, 0.06), transparent 60%),
                        rgba(12, 12, 12, 0.85);
            border: 1px solid rgba(244, 241, 234, 0.12);
            overflow: hidden;
            box-shadow: 0 24px 80px rgba(0, 0, 0, 0.45);
        }

        .world-map {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            pointer-events: auto;
        }

        .world-map svg {
            width: 100%;
            height: 100%;
            display: block;
        }

        .world-map .country {
            fill: rgba(244, 241, 234, 0.05);
            stroke: none;
        }

        .highlight-group {
            cursor: pointer;
        }

        .highlight-point circle {
            transition: r 0.25s ease, fill 0.25s ease, opacity 0.25s ease;
        }

        .highlight-point circle.halo {
            fill: rgba(244, 241, 234, 0.15);
            opacity: 0.65;
        }

        .highlight-point circle.core {
            fill: rgba(244, 241, 234, 0.9);
        }

        .highlight-point.is-hovered circle.halo,
        .highlight-point.is-selected circle.halo {
            opacity: 1;
            fill: rgba(244, 241, 234, 0.35);
        }

        .highlight-point.is-hovered circle.core,
        .highlight-point.is-selected circle.core {
            r: 4.8;
        }

        .highlight-label {
            font-size: 10px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            fill: rgba(244, 241, 234, 0.82);
            paint-order: stroke;
            stroke: rgba(5, 5, 5, 0.8);
            stroke-width: 2;
            opacity: 0;
            transition: opacity 0.25s ease;
        }

        .highlight-point.is-hovered .highlight-label,
        .highlight-point.is-selected .highlight-label {
            opacity: 1;
        }

        .regions-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 18px;
            width: min(100%, 960px);
        }

        .region-card {
            border: 1px solid rgba(244, 241, 234, 0.12);
            border-radius: 18px;
            padding: 18px 22px;
            background: rgba(10, 10, 10, 0.85);
            backdrop-filter: blur(4px);
            display: flex;
            flex-direction: column;
            gap: 10px;
            transition: transform 0.2s ease, border-color 0.2s ease;
        }

        .region-card:hover {
            transform: translateY(-4px);
            border-color: rgba(244, 241, 234, 0.35);
        }

        .region-card.is-hovered,
        .region-card.is-selected {
            border-color: rgba(244, 241, 234, 0.45);
            box-shadow: 0 0 24px rgba(244, 241, 234, 0.12);
        }

        .region-card.is-selected {
            transform: translateY(-6px);
        }

        .region-card .label {
            letter-spacing: 2px;
            font-size: 14px;
            text-transform: uppercase;
        }

        .region-card .country {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 2px;
            color: rgba(244, 241, 234, 0.6);
        }

        .region-card .inventory-overview {
            margin: 12px 0 0;
            padding-top: 12px;
            border-top: 1px solid rgba(244, 241, 234, 0.08);
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));
            gap: 12px;
        }

        .inventory-overview {
            margin: 0;
        }

        .inventory-overview .metric {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .inventory-overview dt {
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
            margin: 0;
        }

        .inventory-overview dd {
            margin: 0;
            font-size: 20px;
            font-weight: 500;
            letter-spacing: 1px;
        }

        @@media (max-width: 768px) {
            .top-bar {
                padding: 18px 20px;
            }

            .brand {
                font-size: 16px;
                letter-spacing: 3px;
            }

            main {
                padding-top: 60px;
            }

            h1 {
                letter-spacing: 8px;
            }

            .highlight-label {
                font-size: 9px;
            }
        }
    </style>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body>
    <header class="top-bar">
        <div class="brand">Wine Surfer</div>
        <button id="menuToggle" class="burger" type="button" aria-expanded="false" aria-controls="menuPanel">
            <span></span>
        </button>
        <nav id="menuPanel" class="menu-panel" aria-hidden="true">
            <a href="/wine-manager">Wine Inventory</a>
            <a href="/wine-surfer/sisterhoods">Sisterhoods</a>
        </nav>
    </header>
    <main>
        <h1>Wine Surfer</h1>
        <p class="tagline">Chart the journeys of every bottle in your cellar, explore terroirs across the globe, and feel the pulse of vintages riding the waves of time.</p>
        <section class="login-card" aria-labelledby="loginHeading">
            <div>
                <h2 id="loginHeading">Sign in to your cellar</h2>
                <p>Log in to continue tracking bottles and tasting notes.</p>
            </div>
            <form id="loginForm" novalidate>
                <div class="login-field">
                    <label for="loginName">Name</label>
                    <input id="loginName" name="name" type="text" list="loginUserSuggestions" placeholder="Ada Lovelace" autocomplete="name" required />
                    <datalist id="loginUserSuggestions"></datalist>
                </div>
                <div class="login-field">
                    <label for="loginTaste">Taste profile <span aria-hidden="true">(optional)</span></label>
                    <input id="loginTaste" name="tasteProfile" type="text" placeholder="Bold reds, coastal whites" autocomplete="off" />
                </div>
                <input type="hidden" id="loginAction" name="action" value="login" />
                <div class="login-actions">
                    <button type="submit" class="primary" data-login-action="login">Sign in</button>
                    <button type="submit" class="secondary" data-login-action="create">Create profile</button>
                </div>
            </form>
            <div id="loginStatus" class="login-status" role="status" aria-live="polite"></div>
            <a id="loginContinue" class="login-continue" href="/wine-manager" hidden>Open wine manager</a>
        </section>
        <section class="map-shell" aria-label="World map highlighting wine regions">
            <div id="map" class="world-map" role="img" aria-hidden="true"></div>
        </section>
        <script id="wineHighlightData" type="application/json">
            @Html.Raw(JsonSerializer.Serialize(Model.HighlightPoints
                .Select((point, index) => new
                {
                    index,
                    point.Label,
                    point.Country,
                    point.Latitude,
                    point.Longitude,
                    point.BottlesCellared,
                    point.BottlesConsumed,
                    point.AverageScore
                }), new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }))
        </script>
        <section class="regions-panel" aria-label="Highlighted wine regions">
            @for (var i = 0; i < Model.HighlightPoints.Count; i++)
            {
                var point = Model.HighlightPoints[i];
                <article class="region-card" data-region-index="@i">
                    <span class="label">@point.Label</span>
                    @if (!string.IsNullOrWhiteSpace(point.Country))
                    {
                        <span class="country">@point.Country</span>
                    }
                    <dl class="inventory-overview" aria-label="Inventory overview for @point.Label">
                        <div class="metric">
                            <dt>Cellared</dt>
                            <dd>@point.BottlesCellared</dd>
                        </div>
                        <div class="metric">
                            <dt>Consumed</dt>
                            <dd>@point.BottlesConsumed</dd>
                        </div>
                        <div class="metric">
                            <dt>Avg. Score</dt>
                            <dd>
                                @(point.AverageScore.HasValue
                                    ? point.AverageScore.Value.ToString("0.0", CultureInfo.InvariantCulture)
                                    : "—")
                            </dd>
                        </div>
                    </dl>
                </article>
            }
            @if (!Model.HighlightPoints.Any())
            {
                <article class="region-card">
                    <span class="label">No wine regions available yet</span>
                    <span class="country">Add bottles to your inventory to light up the map.</span>
                </article>
            }
        </section>
    </main>
    <script>
        (function setupWineSurferLogin() {
            const loginForm = document.getElementById('loginForm');
            if (!loginForm) {
                return;
            }

            const loginAction = document.getElementById('loginAction');
            const loginStatus = document.getElementById('loginStatus');
            const continueLink = document.getElementById('loginContinue');
            const nameInput = document.getElementById('loginName');
            const tasteInput = document.getElementById('loginTaste');
            const suggestions = document.getElementById('loginUserSuggestions');
            const actionButtons = loginForm.querySelectorAll('[data-login-action]');
            const knownSuggestionKeys = new Set();

            function setStatus(message, tone) {
                if (!loginStatus) {
                    return;
                }

                loginStatus.textContent = message ?? '';
                loginStatus.className = `login-status ${tone ?? ''}`.trim();
            }

            function updateContinueLink(user) {
                if (!continueLink || !user) {
                    return;
                }

                continueLink.hidden = false;
                continueLink.textContent = `Open wine manager as ${user.name}`;
                continueLink.setAttribute('href', '/wine-manager');
            }

            function persistUser(user) {
                try {
                    const payload = {
                        userId: user.userId ?? user.UserId ?? '',
                        name: user.name ?? user.Name ?? '',
                        tasteProfile: user.tasteProfile ?? user.TasteProfile ?? ''
                    };
                    if (!payload.userId || !payload.name) {
                        return;
                    }

                    window.localStorage?.setItem('wineSurferUser', JSON.stringify(payload));
                } catch (error) {
                    console.warn('Unable to persist login information', error);
                }
            }

            function ensureSuggestion(name) {
                if (!suggestions || !name) {
                    return;
                }

                const key = name.trim().toLowerCase();
                if (!key || knownSuggestionKeys.has(key)) {
                    return;
                }

                const option = document.createElement('option');
                option.value = name;
                suggestions.appendChild(option);
                knownSuggestionKeys.add(key);
            }

            async function loadUsers() {
                if (!suggestions) {
                    return;
                }

                try {
                    const response = await fetch('/wine-surfer/users', { headers: { Accept: 'application/json' } });
                    if (!response.ok) {
                        return;
                    }

                    const items = await response.json();
                    if (!Array.isArray(items)) {
                        return;
                    }

                    suggestions.innerHTML = '';
                    knownSuggestionKeys.clear();

                    items.forEach(item => {
                        const name = item?.name ?? item?.Name;
                        if (!name) {
                            return;
                        }

                        ensureSuggestion(name);
                    });
                } catch (error) {
                    console.warn('Unable to load user suggestions', error);
                }
            }

            function restoreStoredUser() {
                try {
                    const raw = window.localStorage?.getItem('wineSurferUser');
                    if (!raw) {
                        return;
                    }

                    const stored = JSON.parse(raw);
                    if (!stored || !stored.name || !stored.userId) {
                        return;
                    }

                    setStatus(`Signed in as ${stored.name}.`, 'success');
                    updateContinueLink(stored);
                    ensureSuggestion(stored.name);
                } catch (error) {
                    console.warn('Unable to restore stored login', error);
                }
            }

            actionButtons.forEach(button => {
                button.addEventListener('click', () => {
                    if (loginAction) {
                        loginAction.value = button.dataset.loginAction ?? 'login';
                    }
                });
            });

            loginForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                if (!nameInput) {
                    return;
                }

                const nameValue = nameInput.value?.trim();
                if (!nameValue) {
                    setStatus('Please enter your name to continue.', 'error');
                    nameInput.focus();
                    return;
                }

                const payload = {
                    name: nameValue,
                    tasteProfile: tasteInput?.value?.trim() || null,
                    createIfMissing: (loginAction?.value ?? 'login') === 'create'
                };

                try {
                    setStatus('Signing in…', null);
                    const response = await fetch('/wine-surfer/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            Accept: 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        let message = 'Unable to sign in right now.';
                        try {
                            const problem = await response.json();
                            if (problem?.errors) {
                                const allErrors = Object.values(problem.errors)
                                    .flat()
                                    .filter(Boolean);
                                if (allErrors.length) {
                                    message = allErrors.join(' ');
                                }
                            } else if (problem?.title) {
                                message = problem.title;
                            }
                        } catch (error) {
                            console.warn('Unable to parse login error response', error);
                        }

                        setStatus(message, 'error');
                        return;
                    }

                    const result = await response.json();
                    persistUser(result);
                    ensureSuggestion(result?.name ?? result?.Name ?? nameValue);
                    setStatus(`Signed in as ${result?.name ?? result?.Name ?? nameValue}.`, 'success');
                    updateContinueLink(result);
                    if (tasteInput && payload.createIfMissing) {
                        tasteInput.value = payload.tasteProfile ?? '';
                    }
                } catch (error) {
                    console.error('Login request failed', error);
                    setStatus('Login failed — please try again.', 'error');
                }
            });

            loadUsers();
            restoreStoredUser();
        })();
    </script>
    <script src="https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/topojson-client@3/dist/topojson-client.min.js" crossorigin="anonymous"></script>
    <script>
        (function renderMap() {
            const mapContainer = document.getElementById('map');
            if (!mapContainer || typeof d3 === 'undefined' || typeof topojson === 'undefined') {
                return;
            }

            const width = 960;
            const height = 540;

            const highlightDataElement = document.getElementById('wineHighlightData');
            const highlightData = highlightDataElement?.textContent?.trim()?.length
                ? JSON.parse(highlightDataElement.textContent)
                : [];
            highlightDataElement?.remove();

            const svg = d3.select(mapContainer)
                .append('svg')
                .attr('class', 'map-svg')
                .attr('viewBox', `0 0 ${width} ${height}`)
                .attr('preserveAspectRatio', 'xMidYMid meet')
                .attr('aria-hidden', 'true');

            const mapGroup = svg.append('g')
                .attr('class', 'map-group');

            const countryLayer = mapGroup.append('g')
                .attr('class', 'country-layer');

            const highlightGroup = mapGroup.append('g')
                .attr('class', 'highlight-group');

            const projection = d3.geoMercator();
            const path = d3.geoPath(projection);

            const zoomBehavior = d3.zoom()
                .scaleExtent([1, 8])
                .translateExtent([[0, 0], [width, height]])
                .on('zoom', (event) => {
                    mapGroup.attr('transform', event.transform);
                });

            svg.call(zoomBehavior).on('dblclick.zoom', null);

            fetch('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json')
                .then(response => response.json())
                .then(worldData => {
                    const countries = topojson.feature(worldData, worldData.objects.countries);
                    const latitudeLimit = 60;
                    const visibleBand = {
                        type: 'Polygon',
                        coordinates: [[
                            [-180, -latitudeLimit],
                            [180, -latitudeLimit],
                            [180, latitudeLimit],
                            [-180, latitudeLimit],
                            [-180, -latitudeLimit]
                        ]]
                    };

                    projection.fitExtent(
                        [[0, 0], [width, height]],
                        visibleBand
                    );

                    countryLayer
                        .selectAll('path')
                        .data(countries.features)
                        .join('path')
                        .attr('class', 'country')
                        .attr('d', path);

                    const highlightPoints = highlightGroup
                        .selectAll('g.highlight-point')
                        .data(highlightData)
                        .join('g')
                        .attr('class', 'highlight-point')
                        .attr('transform', d => {
                            const projected = projection([d.longitude, d.latitude]);
                            return projected ? `translate(${projected[0]}, ${projected[1]})` : null;
                        });

                    highlightPoints.append('circle')
                        .attr('class', 'halo')
                        .attr('r', 9);

                    highlightPoints.append('circle')
                        .attr('class', 'core')
                        .attr('r', 3.2);

                    highlightPoints.append('text')
                        .attr('class', 'highlight-label')
                        .attr('y', 16)
                        .attr('text-anchor', 'middle')
                        .text(d => d.label ?? '');

                    highlightPoints.append('title')
                        .text(d => d.label ?? '');

                    const regionCards = Array.from(document.querySelectorAll('.region-card'));

                    let selectedIndex = null;

                    const setHoveredIndex = (index) => {
                        highlightPoints.classed('is-hovered', d => d.index === index);
                        regionCards.forEach(card => {
                            const cardIndex = Number(card.dataset?.regionIndex ?? -1);
                            card.classList.toggle('is-hovered', cardIndex === index);
                        });
                    };

                    const focusOnPoint = (point) => {
                        if (!point) {
                            return;
                        }

                        const coordinates = projection([point.longitude, point.latitude]);
                        if (!coordinates) {
                            return;
                        }

                        const [x, y] = coordinates;
                        const scale = 3.2;
                        svg.transition()
                            .duration(600)
                            .call(
                                zoomBehavior.transform,
                                d3.zoomIdentity
                                    .translate(width / 2, height / 2)
                                    .scale(scale)
                                    .translate(-x, -y)
                            );
                    };

                    const setSelectedIndex = (index, { focus = false } = {}) => {
                        if (index === selectedIndex) {
                            return;
                        }

                        selectedIndex = index;
                        highlightPoints.classed('is-selected', d => d.index === index);
                        regionCards.forEach(card => {
                            const cardIndex = Number(card.dataset?.regionIndex ?? -1);
                            const isSelected = cardIndex === index;
                            card.classList.toggle('is-selected', isSelected);
                            if (isSelected) {
                                card.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                            }
                        });

                        if (focus) {
                            const point = highlightData.find(d => d.index === index);
                            focusOnPoint(point);
                        }
                    };

                    highlightPoints
                        .on('mouseenter', (_, d) => setHoveredIndex(d.index))
                        .on('mouseleave', () => setHoveredIndex(null))
                        .on('click', (_, d) => setSelectedIndex(d.index, { focus: true }));

                    regionCards.forEach(card => {
                        const index = Number(card.dataset?.regionIndex ?? -1);
                        if (!Number.isInteger(index) || index < 0) {
                            return;
                        }

                        card.addEventListener('mouseenter', () => setHoveredIndex(index));
                        card.addEventListener('mouseleave', () => setHoveredIndex(null));
                        card.addEventListener('click', () => setSelectedIndex(index, { focus: true }));
                    });

                    if (highlightData.length) {
                        setSelectedIndex(highlightData[0].index, { focus: false });
                    }
                })
                .catch(error => {
                    console.error('Failed to render world map', error);
                });
        })();
    </script>
    <script>
        const toggle = document.getElementById('menuToggle');
        const panel = document.getElementById('menuPanel');

        const closeMenu = () => {
            toggle.classList.remove('active');
            toggle.setAttribute('aria-expanded', 'false');
            panel.classList.remove('open');
            panel.setAttribute('aria-hidden', 'true');
        };

        toggle?.addEventListener('click', () => {
            const isOpen = toggle.classList.toggle('active');
            toggle.setAttribute('aria-expanded', String(isOpen));
            panel.classList.toggle('open', isOpen);
            panel.setAttribute('aria-hidden', String(!isOpen));
        });

        document.addEventListener('click', (event) => {
            if (!panel.contains(event.target) && event.target !== toggle) {
                closeMenu();
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                closeMenu();
            }
        });
    </script>
</body>
</html>
