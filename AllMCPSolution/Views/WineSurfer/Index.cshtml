@model AllMCPSolution.Controllers.WineSurferLandingViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using System.Linq
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Globalization
@{
    Layout = null;
    var inventoryAddModalModel = ViewData["InventoryAddModal"] as InventoryAddModalViewModel
        ?? new InventoryAddModalViewModel();
}

@functions {
    private static DateTime NormalizeDateTime(DateTime value)
    {
        return value.Kind switch
        {
            DateTimeKind.Utc => value.ToLocalTime(),
            DateTimeKind.Unspecified => DateTime.SpecifyKind(value, DateTimeKind.Local),
            _ => value
        };
    }

    private static DateTime? NormalizeDateTime(DateTime? value)
    {
        return value.HasValue ? NormalizeDateTime(value.Value) : (DateTime?)null;
    }

    private static string FormatSipSessionSchedule(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("f");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("D") ?? "Schedule TBD";
    }

    private static string FormatScore(decimal? value)
    {
        return value.HasValue
            ? value.Value.ToString("0.0", CultureInfo.InvariantCulture)
            : "â€”";
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <style>
        :root {
            color-scheme: dark;
            --wine-surfer-card-max-width: 960px;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .sisterhood-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 18px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.24);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, background 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
            text-decoration: none;
            min-width: 0;
        }

        .sisterhood-button:hover,
        .sisterhood-button:focus-visible {
            transform: translateY(-2px);
            border-color: rgba(244, 241, 234, 0.45);
            background: rgba(244, 241, 234, 0.12);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.25);
            text-decoration: none;
        }

        .sisterhood-button:focus-visible {
            outline: 2px solid rgba(244, 241, 234, 0.5);
            outline-offset: 2px;
        }

        .sisterhood-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .sisterhood-button--primary {
            background: linear-gradient(135deg, rgba(166, 25, 46, 0.95), rgba(219, 56, 56, 0.9));
            border-color: rgba(244, 241, 234, 0.35);
            color: #f4f1ea;
        }

        .sisterhood-button--primary:hover,
        .sisterhood-button--primary:focus-visible {
            background: linear-gradient(135deg, rgba(219, 56, 56, 1), rgba(166, 25, 46, 1));
            border-color: rgba(244, 241, 234, 0.6);
        }

        .upcoming-sessions-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 16px;
            flex-wrap: wrap;
            margin-bottom: 16px;
        }

        .upcoming-sessions-header .section-title {
            margin: 0;
        }

        .wine-surfer-card {
            width: min(100%, var(--wine-surfer-card-max-width));
            max-width: var(--wine-surfer-card-max-width);
        }

        .page-content {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            transition: filter 0.25s ease;
        }

        .top-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 24px 32px;
            position: sticky;
            top: 0;
            background: rgba(5, 5, 5, 0.92);
            backdrop-filter: blur(8px);
            border-bottom: 1px solid rgba(244, 241, 234, 0.08);
            z-index: 10;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
            letter-spacing: 4px;
            text-transform: uppercase;
            font-weight: 600;
            font-size: 20px;
        }

        .top-controls {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .burger {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.15);
            background: rgba(244, 241, 234, 0.05);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .burger span {
            position: relative;
            width: 20px;
            height: 2px;
            background: #f4f1ea;
            display: block;
        }

        .burger span::before,
        .burger span::after {
            content: "";
            position: absolute;
            left: 0;
            width: 100%;
            height: 2px;
            background: #f4f1ea;
            transition: transform 0.2s ease;
        }

        .burger span::before {
            transform: translateY(-6px);
        }

        .burger span::after {
            transform: translateY(6px);
        }

        .burger.active span {
            background: transparent;
        }

        .burger.active span::before {
            transform: rotate(45deg);
        }

        .burger.active span::after {
            transform: rotate(-45deg);
        }

        .auth-toggle {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 12px 24px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.2);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            text-decoration: none;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s ease, transform 0.2s ease, border-color 0.2s ease;
        }

        .auth-toggle:link,
        .auth-toggle:visited {
            color: #f4f1ea;
        }

        .auth-toggle:hover {
            transform: translateY(-2px);
            border-color: rgba(244, 241, 234, 0.35);
            background: rgba(244, 241, 234, 0.12);
        }

        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .auth-form button {
            width: 100%;
        }

        .menu-user {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .menu-user-label {
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .menu-user-name {
            font-weight: 600;
            letter-spacing: 1.4px;
            text-transform: uppercase;
        }

        .menu-auth-options {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .menu-panel {
            position: absolute;
            top: 76px;
            right: 32px;
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 16px;
            padding: 20px;
            min-width: 220px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.45);
            display: none;
        }

        .menu-panel.open {
            display: block;
        }

        .menu-panel a {
            display: block;
            padding: 12px 16px;
            border-radius: 10px;
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-size: 12px;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .top-bar-actions {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .notification-shell {
            position: relative;
            display: flex;
            align-items: center;
        }

        .top-bar-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 15px;
            font-weight: 600;
            letter-spacing: 1px;
            color: #f4f1ea;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease, transform 0.2s ease;
        }

        .top-bar-avatar:hover,
        .top-bar-avatar:focus-visible,
        .top-bar-avatar.active {
            background: rgba(244, 241, 234, 0.16);
            border-color: rgba(244, 241, 234, 0.4);
            outline: none;
        }

        .top-bar-avatar:focus-visible {
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.35);
        }

        .notification-badge {
            position: absolute;
            top: -4px;
            right: -6px;
            min-width: 18px;
            height: 18px;
            padding: 0 5px;
            border-radius: 999px;
            background: #f96b70;
            color: #050505;
            font-size: 11px;
            font-weight: 700;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .notification-panel {
            position: absolute;
            top: calc(100% + 14px);
            right: 0;
            width: min(300px, 80vw);
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.12);
            border-radius: 16px;
            padding: 18px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.55);
            display: none;
            z-index: 20;
        }

        .notification-panel.open {
            display: block;
        }

        .notification-heading {
            margin: 0 0 12px;
            font-size: 12px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.75);
        }

        .notification-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .notification-section {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-bottom: 16px;
        }

        .notification-section:last-of-type {
            margin-bottom: 0;
        }

        .notification-subheading {
            margin: 0;
            font-size: 11px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .notification-item {
            position: relative;
            margin: 0;
        }

        .notification-link {
            display: flex;
            flex-direction: column;
            gap: 4px;
            padding: 12px 38px 12px 14px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.05);
            color: #f4f1ea;
            text-decoration: none;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .notification-dismiss {
            position: absolute;
            top: 6px;
            right: 6px;
            width: 26px;
            height: 26px;
            border: none;
            border-radius: 999px;
            background: transparent;
            color: rgba(244, 241, 234, 0.65);
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            line-height: 1;
            transition: background 0.2s ease, color 0.2s ease;
        }

        .notification-dismiss:hover,
        .notification-dismiss:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.95);
            outline: none;
        }

        .notification-dismiss:focus-visible {
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.35);
        }

        .notification-link:hover,
        .notification-link:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            transform: translateY(-1px);
            outline: none;
        }

        .notification-title {
            font-size: 13px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            font-weight: 600;
        }

        .notification-meta {
            font-size: 12px;
            color: rgba(244, 241, 234, 0.75);
            letter-spacing: 1.2px;
        }

        .notification-tag {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 2px 8px;
            border-radius: 999px;
            font-size: 11px;
            letter-spacing: 1.1px;
            text-transform: uppercase;
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.9);
            width: fit-content;
        }

        .notification-empty {
            margin: 0 0 12px;
            font-size: 12px;
            letter-spacing: 1.3px;
            color: rgba(244, 241, 234, 0.65);
        }

        .notification-footer {
            margin-top: 14px;
            display: flex;
            justify-content: flex-end;
        }

        .notification-footer a {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 14px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            text-decoration: none;
            font-size: 11px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .notification-footer a:hover,
        .notification-footer a:focus-visible {
            background: rgba(244, 241, 234, 0.16);
            border-color: rgba(244, 241, 234, 0.4);
            outline: none;
        }

        .menu-panel a:hover {
            background: rgba(244, 241, 234, 0.12);
            transform: translateX(4px);
        }

        main {
            flex: 1;
            padding: 80px 24px 60px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 48px;
        }

        .wine-surfer-page-header .wine-surfer-page-header__title {
            font-size: clamp(48px, 6vw, 96px);
            margin: 0;
            letter-spacing: 12px;
            text-transform: uppercase;
            text-align: center;
        }

        .auth-callout {
            margin: 0;
            padding: 14px 18px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(12, 12, 12, 0.7);
            font-size: 13px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .auth-callout strong {
            color: #f4f1ea;
        }

        .map-shell {
            position: relative;
            width: min(100%, 960px);
            aspect-ratio: 16 / 9;
            border-radius: 24px;
            background: radial-gradient(circle at 30% 30%, rgba(244, 241, 234, 0.08), transparent 55%),
                        radial-gradient(circle at 70% 70%, rgba(244, 241, 234, 0.06), transparent 60%),
                        rgba(12, 12, 12, 0.85);
            border: 1px solid rgba(244, 241, 234, 0.12);
            overflow: hidden;
            box-shadow: 0 24px 80px rgba(0, 0, 0, 0.45);
        }

        .world-map {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            pointer-events: auto;
        }

        .world-map svg {
            width: 100%;
            height: 100%;
            display: block;
        }

        .world-map .country {
            fill: rgba(244, 241, 234, 0.12);
            stroke: none;
        }

        .highlight-group {
            cursor: pointer;
        }

        .highlight-point circle {
            transition: r 0.25s ease, fill 0.25s ease, opacity 0.25s ease;
        }

        .highlight-point circle.halo {
            fill: rgba(244, 241, 234, 0.15);
            opacity: 0.65;
        }

        .highlight-point circle.core {
            fill: rgba(244, 241, 234, 0.9);
        }

        .highlight-point.is-hovered circle.halo,
        .highlight-point.is-selected circle.halo {
            opacity: 1;
            fill: rgba(244, 241, 234, 0.35);
        }

        .highlight-point.is-hovered circle.core,
        .highlight-point.is-selected circle.core {
            r: 4.8;
        }

        .highlight-label {
            font-size: 10px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            fill: rgba(244, 241, 234, 0.82);
            paint-order: stroke;
            stroke: rgba(5, 5, 5, 0.8);
            stroke-width: 2;
            opacity: 0;
            transition: opacity 0.25s ease;
        }

        .highlight-point.is-hovered .highlight-label,
        .highlight-point.is-selected .highlight-label {
            opacity: 1;
        }

        .regions-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 18px;
            width: min(100%, var(--wine-surfer-card-max-width));
        }

        .region-card {
            backdrop-filter: blur(4px);
            transition: transform 0.2s ease, border-color 0.2s ease;
        }

        .region-card:hover {
            transform: translateY(-4px);
            border-color: rgba(244, 241, 234, 0.35);
        }

        .region-card.is-hovered,
        .region-card.is-selected {
            border-color: rgba(244, 241, 234, 0.45);
            box-shadow: 0 0 24px rgba(244, 241, 234, 0.12);
        }

        .region-card.is-selected {
            transform: translateY(-6px);
        }

        .region-card .label {
            letter-spacing: 2px;
            font-size: 14px;
            text-transform: uppercase;
        }

        .region-card .country {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 2px;
            color: rgba(244, 241, 234, 0.6);
        }

        .region-card .inventory-overview {
            margin: 12px 0 0;
            padding-top: 12px;
            border-top: 1px solid rgba(244, 241, 234, 0.08);
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));
            gap: 12px;
        }

        .inventory-overview {
            margin: 0;
        }

        .inventory-overview .metric {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .inventory-overview dt {
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
            margin: 0;
        }

        .inventory-overview dd {
            margin: 0;
            font-size: 20px;
            font-weight: 500;
            letter-spacing: 1px;
        }

        .section-title {
            margin: 0;
            font-size: 24px;
            letter-spacing: 6px;
            text-transform: uppercase;
        }

        .upcoming-sessions {
            display: flex;
            flex-direction: column;
            gap: 18px;
            width: min(100%, var(--wine-surfer-card-max-width));
        }

        .favorite-wines {
            display: flex;
            flex-direction: column;
            gap: 18px;
            margin: 48px 0;
            width: min(100%, var(--wine-surfer-card-max-width));
        }

        .favorite-wines-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 16px;
            flex-wrap: wrap;
        }

        .favorite-wines-message {
            margin: 0;
            font-size: 12px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .favorite-wines-message[hidden] {
            display: none;
        }

        .favorite-wines-message[data-state="success"] {
            color: #9bd39b;
        }

        .favorite-wines-message[data-state="error"] {
            color: #f96b70;
        }

        .favorite-wines-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 18px;
        }

        .favorite-wine-card {
            display: flex;
            flex-direction: column;
            gap: 12px;
            padding: 20px;
        }

        .favorite-wine-header {
            display: flex;
            align-items: baseline;
            justify-content: space-between;
            gap: 12px;
        }

        .favorite-wine-name {
            margin: 0;
        }

        .favorite-wine-vintage {
            margin: 0;
        }

        .favorite-wine-stats {
            margin: 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
        }

        .favorite-wine-stat dt {
            margin: 0;
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .favorite-wine-stat dd {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
            letter-spacing: 1px;
        }

        .favorite-wine-status {
            margin: 0;
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .favorite-wines-empty {
            margin: 0;
            font-size: 14px;
            letter-spacing: 1.4px;
            color: rgba(244, 241, 234, 0.7);
        }

        
        @@media (max-width: 768px) {
            .top-bar {
                padding: 18px 20px;
            }

            .brand {
                font-size: 16px;
                letter-spacing: 3px;
            }

            main {
                padding-top: 60px;
            }

            .wine-surfer-page-header .wine-surfer-page-header__title {
                letter-spacing: 8px;
            }

            .section-title {
                font-size: 18px;
                letter-spacing: 4px;
            }

            .highlight-label {
                font-size: 9px;
            }
        }
    </style>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>

@{
    var bodyClass = Model.CurrentUser is null ? "requires-auth" : "is-authenticated";
    var currentUserOptions = new JsonSerializerOptions
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
    };
    var serializedCurrentUser = Model.CurrentUser is null
        ? "null"
        : JsonSerializer.Serialize(Model.CurrentUser, currentUserOptions);
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = (ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel)
        ?? WineSurferTopBarModel.CreateFromSisterhoodData(
            currentLocation,
            Model.IncomingInvitations,
            Model.SentInvitationNotifications,
            displayName: Model.CurrentUser?.DisplayName,
            isAdmin: Model.CurrentUser?.IsAdmin == true);
    ViewData["WineSurferPageTitle"] = "Wine Surfer";
    var manageableSisterhoods = Model.ManageableSisterhoods ?? Array.Empty<WineSurferSisterhoodOption>();
    var canCreateSipSession = manageableSisterhoods.Count > 0;
    var isAuthenticated = Model.CurrentUser is not null;
    var createSipSessionUrl = Url.Action("PlanSipSession", "WineSurfer") ?? "/wine-surfer/sessions/create";
}
<body class="wine-app @bodyClass">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main>
            @if (Model.CurrentUser is null)
            {
                <p class="auth-callout" role="status">Sign in from the menu to view your tasting history and personalize region scores.</p>
            }
            <section class="favorite-wines" aria-label="Favourite wines">
                <div class="favorite-wines-header">
                    <h2 class="section-title">Favourite wines</h2>
                    @if (isAuthenticated)
                    {
                        <button type="button" class="sisterhood-button inventory-add-trigger" data-add-wine-trigger="favorites">Add wine</button>
                    }
                </div>
                <p class="favorite-wines-message" data-favorite-message hidden role="status"></p>
                @if (!isAuthenticated)
                {
                    <p class="favorite-wines-empty" role="status">Sign in to rate bottles and see your top picks here.</p>
                }
                else if (Model.FavoriteBottles.Count > 0)
                {
                    <div class="favorite-wines-grid" role="list">
                        @foreach (var bottle in Model.FavoriteBottles)
                        {
                            var enjoyedAt = NormalizeDateTime(bottle.DrunkAtUtc);
                            var statusLabel = bottle.IsDrunk
                                ? (enjoyedAt.HasValue ? $"Enjoyed on {enjoyedAt.Value:MMM d, yyyy}" : "Enjoyed")
                                : "Cellared";
                            <article class="favorite-wine-card wine-card wine-surface wine-surface-border wine-card-hover wine-surfer-card" role="listitem">
                                <header class="favorite-wine-header wine-card__header">
                                    <h3 class="favorite-wine-name wine-card__title">@bottle.WineName</h3>
                                    @if (bottle.Vintage.HasValue && bottle.Vintage.Value > 0)
                                    {
                                        <span class="favorite-wine-vintage wine-card__subtitle">@bottle.Vintage.Value</span>
                                    }
                                </header>
                                <dl class="favorite-wine-stats wine-card__stats" aria-label="Tasting stats for @bottle.Label">
                                    <div class="favorite-wine-stat wine-card__stat">
                                        <dt>Your score</dt>
                                        <dd>@FormatScore(bottle.CurrentUserScore)</dd>
                                    </div>
                                    <div class="favorite-wine-stat wine-card__stat">
                                        <dt>Average score</dt>
                                        <dd>@FormatScore(bottle.AverageScore)</dd>
                                    </div>
                                </dl>
                                <p class="favorite-wine-status">@statusLabel</p>
                            </article>
                        }
                    </div>
                }
                else
                {
                    <p class="favorite-wines-empty" role="status">Rate a few bottles to light up your favourites.</p>
                }
            </section>
            <section class="upcoming-sessions" aria-label="Upcoming sip sessions">
                <div class="upcoming-sessions-header">
                    <h2 class="section-title">Upcoming sip sessions</h2>
                    @if (canCreateSipSession)
                    {
                        <a class="sisterhood-button" href="@createSipSessionUrl">Create sip session</a>
                    }
                </div>
                @if (Model.UpcomingSipSessions.Count > 0)
                {
                    foreach (var session in Model.UpcomingSipSessions)
                    {
                        var scheduleLabel = FormatSipSessionSchedule(session.Session);
                        var locationLabel = string.IsNullOrWhiteSpace(session.Session.Location)
                            ? "Location TBD"
                            : session.Session.Location;
                        var hostLabel = string.IsNullOrWhiteSpace(session.SisterhoodName)
                            ? null
                            : session.SisterhoodName;

                        var sessionUrl = Url.Action("SipSession", "WineSurfer", new { sipSessionId = session.Session.Id })
                            ?? $"/wine-surfer/sessions/{session.Session.Id:D}";
                        var ariaLabel = $"Upcoming sip session: {session.Session.Name}";
                        var cardModel = new WineSurferSipSessionCardModel(
                            session.Session,
                            scheduleLabel,
                            locationLabel,
                            sessionUrl,
                            ariaLabel,
                            hostLabel);

                        @await Html.PartialAsync("_WineSurferSipSessionCard", cardModel)
                    }
                }
                else
                {
                    <p class="sip-session-empty" role="status">No upcoming sip sessions on the calendar yet. Check back soon or gather your sisterhood to plan the next tasting.</p>
                }
            </section>
            @if (isAuthenticated)
            {
                @await Html.PartialAsync("_InventoryAddModal", inventoryAddModalModel)
            }
            <section class="map-shell" aria-label="World map highlighting wine regions">
                <div id="map" class="world-map" role="img" aria-hidden="true"></div>
            </section>
            <script src="/js/wine-surfer-favorites.js"></script>
            <script id="wineHighlightData" type="application/json">
                @Html.Raw(JsonSerializer.Serialize(Model.HighlightPoints
                    .Select((point, index) => new
                    {
                        index,
                        point.Label,
                        point.Country,
                        point.Latitude,
                        point.Longitude,
                        point.BottlesCellared,
                        point.BottlesConsumed,
                        point.AverageScore,
                        point.UserAverageScores
                    }), new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }))
            </script>
            <section class="regions-panel" aria-label="Highlighted wine regions">
                @for (var i = 0; i < Model.HighlightPoints.Count; i++)
                {
                    var point = Model.HighlightPoints[i];
                    <article class="region-card wine-card wine-surface wine-surface-border wine-card-hover wine-surfer-card" data-region-index="@i">
                        <span class="label wine-card__title">@point.Label</span>
                        @if (!string.IsNullOrWhiteSpace(point.Country))
                        {
                            <span class="country wine-card__subtitle">@point.Country</span>
                        }
                        <dl class="inventory-overview wine-card__stats" aria-label="Inventory overview for @point.Label">
                            <div class="metric wine-card__stat">
                                <dt>Cellared</dt>
                                <dd>@point.BottlesCellared</dd>
                            </div>
                            <div class="metric wine-card__stat">
                                <dt>Consumed</dt>
                                <dd>@point.BottlesConsumed</dd>
                            </div>
                            <div class="metric wine-card__stat">
                                <dt>Avg. Score</dt>
                                <dd data-region-average>â€”</dd>
                            </div>
                        </dl>
                    </article>
                }
                @if (!Model.HighlightPoints.Any())
                {
                    <article class="region-card wine-card wine-surface wine-surface-border wine-card-hover wine-surfer-card">
                        <span class="label wine-card__title">No wine regions available yet</span>
                        <span class="country wine-card__subtitle">Add bottles to your inventory to light up the map.</span>
                    </article>
                }
            </section>
        </main>
    </div>
    <script>
        window.wineSurferCurrentUser = @Html.Raw(serializedCurrentUser);
        (function initializeWineSurfer() {
            const highlightDataElement = document.getElementById('wineHighlightData');
            let highlightData = [];

            if (highlightDataElement?.textContent?.trim()?.length) {
                try {
                    highlightData = JSON.parse(highlightDataElement.textContent);
                } catch (error) {
                    console.warn('Unable to parse highlight data payload', error);
                    highlightData = [];
                }
            }

            window.wineSurferHighlightData = Array.isArray(highlightData) ? highlightData : [];
            highlightDataElement?.remove();

            const regionAverageElements = new Map();
            document.querySelectorAll('.region-card').forEach(card => {
                const index = Number(card.dataset?.regionIndex ?? -1);
                if (!Number.isInteger(index) || index < 0) {
                    return;
                }

                const averageElement = card.querySelector('[data-region-average]');
                if (averageElement) {
                    regionAverageElements.set(index, averageElement);
                }
            });

            function normalizeUserId(value) {
                if (value === null || value === undefined) {
                    return '';
                }

                if (typeof value === 'string') {
                    return value.trim().toLowerCase();
                }

                return String(value).trim().toLowerCase();
            }

            function formatScore(value) {
                const numeric = Number(value);
                if (!Number.isFinite(numeric)) {
                    return 'â€”';
                }

                return numeric.toFixed(1);
            }

            function applyUserAverageScores(normalizedUserId) {
                const points = Array.isArray(window.wineSurferHighlightData)
                    ? window.wineSurferHighlightData
                    : [];

                regionAverageElements.forEach((element, index) => {
                    const point = points.find(entry => entry.index === index);
                    if (!point) {
                        element.textContent = 'â€”';
                        return;
                    }

                    let displayValue = formatScore(point.averageScore);

                    if (normalizedUserId) {
                        const matchingScore = Array.isArray(point.userAverageScores)
                            ? point.userAverageScores.find(scoreEntry => normalizeUserId(scoreEntry.userId) === normalizedUserId)
                            : null;

                        if (matchingScore && matchingScore.averageScore != null) {
                            displayValue = formatScore(matchingScore.averageScore);
                        }
                    }

                    element.textContent = displayValue;
                });
            }

            const currentUser = window.wineSurferCurrentUser;
            const normalizedId = currentUser?.domainUserId
                ? normalizeUserId(currentUser.domainUserId)
                : '';

            applyUserAverageScores(normalizedId);
        })();
    </script>
<script src="https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/topojson-client@3/dist/topojson-client.min.js" crossorigin="anonymous"></script>
    <script>
        (function renderMap() {
            const mapContainer = document.getElementById('map');
            if (!mapContainer || typeof d3 === 'undefined' || typeof topojson === 'undefined') {
                return;
            }

            const width = 960;
            const height = 540;

            let highlightData = Array.isArray(window.wineSurferHighlightData)
                ? window.wineSurferHighlightData
                : [];

            if (!Array.isArray(highlightData) || !highlightData.length) {
                const highlightDataElement = document.getElementById('wineHighlightData');
                if (highlightDataElement?.textContent?.trim()?.length) {
                    try {
                        highlightData = JSON.parse(highlightDataElement.textContent);
                    } catch (error) {
                        console.warn('Unable to parse highlight data payload for map', error);
                        highlightData = [];
                    }
                }

                highlightDataElement?.remove();
                window.wineSurferHighlightData = Array.isArray(highlightData) ? highlightData : [];
            }

            const svg = d3.select(mapContainer)
                .append('svg')
                .attr('class', 'map-svg')
                .attr('viewBox', `0 0 ${width} ${height}`)
                .attr('preserveAspectRatio', 'xMidYMid meet')
                .attr('aria-hidden', 'true');

            const mapGroup = svg.append('g')
                .attr('class', 'map-group');

            const countryLayer = mapGroup.append('g')
                .attr('class', 'country-layer');

            const highlightGroup = mapGroup.append('g')
                .attr('class', 'highlight-group');

            const projection = d3.geoMercator();
            const path = d3.geoPath(projection);

            const zoomBehavior = d3.zoom()
                .scaleExtent([1, 8])
                .translateExtent([[0, 0], [width, height]])
                .on('zoom', (event) => {
                    mapGroup.attr('transform', event.transform);
                });

            svg.call(zoomBehavior).on('dblclick.zoom', null);

            fetch('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json')
                .then(response => response.json())
                .then(worldData => {
                    const countries = topojson.feature(worldData, worldData.objects.countries);
                    const latitudeLimit = 60;
                    const visibleBand = {
                        type: 'Polygon',
                        coordinates: [[
                            [-180, -latitudeLimit],
                            [180, -latitudeLimit],
                            [180, latitudeLimit],
                            [-180, latitudeLimit],
                            [-180, -latitudeLimit]
                        ]]
                    };

                    projection.fitExtent(
                        [[0, 0], [width, height]],
                        visibleBand
                    );

                    countryLayer
                        .selectAll('path')
                        .data(countries.features)
                        .join('path')
                        .attr('class', 'country')
                        .attr('d', path);

                    const highlightPoints = highlightGroup
                        .selectAll('g.highlight-point')
                        .data(highlightData)
                        .join('g')
                        .attr('class', 'highlight-point')
                        .attr('transform', d => {
                            const projected = projection([d.longitude, d.latitude]);
                            return projected ? `translate(${projected[0]}, ${projected[1]})` : null;
                        });

                    highlightPoints.append('circle')
                        .attr('class', 'halo')
                        .attr('r', 9);

                    highlightPoints.append('circle')
                        .attr('class', 'core')
                        .attr('r', 3.2);

                    highlightPoints.append('text')
                        .attr('class', 'highlight-label')
                        .attr('y', 16)
                        .attr('text-anchor', 'middle')
                        .text(d => d.label ?? '');

                    highlightPoints.append('title')
                        .text(d => d.label ?? '');

                    const regionCards = Array.from(document.querySelectorAll('.region-card'));

                    let selectedIndex = null;

                    const setHoveredIndex = (index) => {
                        highlightPoints.classed('is-hovered', d => d.index === index);
                        regionCards.forEach(card => {
                            const cardIndex = Number(card.dataset?.regionIndex ?? -1);
                            card.classList.toggle('is-hovered', cardIndex === index);
                        });
                    };

                    const focusOnPoint = (point) => {
                        if (!point) {
                            return;
                        }

                        const coordinates = projection([point.longitude, point.latitude]);
                        if (!coordinates) {
                            return;
                        }

                        const [x, y] = coordinates;
                        const scale = 3.2;
                        svg.transition()
                            .duration(600)
                            .call(
                                zoomBehavior.transform,
                                d3.zoomIdentity
                                    .translate(width / 2, height / 2)
                                    .scale(scale)
                                    .translate(-x, -y)
                            );
                    };

                    const setSelectedIndex = (index, { focus = false } = {}) => {
                        if (index === selectedIndex) {
                            return;
                        }

                        selectedIndex = index;
                        highlightPoints.classed('is-selected', d => d.index === index);
                        regionCards.forEach(card => {
                            const cardIndex = Number(card.dataset?.regionIndex ?? -1);
                            const isSelected = cardIndex === index;
                            card.classList.toggle('is-selected', isSelected);
                            if (isSelected) {
                                card.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                            }
                        });

                        if (focus) {
                            const point = highlightData.find(d => d.index === index);
                            focusOnPoint(point);
                        }
                    };

                    highlightPoints
                        .on('mouseenter', (_, d) => setHoveredIndex(d.index))
                        .on('mouseleave', () => setHoveredIndex(null))
                        .on('click', (_, d) => setSelectedIndex(d.index, { focus: true }));

                    regionCards.forEach(card => {
                        const index = Number(card.dataset?.regionIndex ?? -1);
                        if (!Number.isInteger(index) || index < 0) {
                            return;
                        }

                        card.addEventListener('mouseenter', () => setHoveredIndex(index));
                        card.addEventListener('mouseleave', () => setHoveredIndex(null));
                        card.addEventListener('click', () => setSelectedIndex(index, { focus: true }));
                    });

                })
                .catch(error => {
                    console.error('Failed to render world map', error);
                });
        })();
    </script>
</body>
</html>
