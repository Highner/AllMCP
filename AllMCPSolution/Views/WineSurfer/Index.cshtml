@model AllMCPSolution.Controllers.WineSurferLandingViewModel
@using System.Globalization
@using System.Linq
@using System.Text.Json
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer</title>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body>
    <header class="top-bar">
        <div class="brand">Wine Surfer</div>
        <button id="menuToggle" class="burger" type="button" aria-expanded="false" aria-controls="menuPanel">
            <span></span>
        </button>
        <nav id="menuPanel" class="menu-panel" aria-hidden="true">
            <a href="/wine-manager">Wine Inventory</a>
        </nav>
    </header>
    <main>
        <h1>Wine Surfer</h1>
        <p class="tagline">Chart the journeys of every bottle in your cellar, explore terroirs across the globe, and feel the pulse of vintages riding the waves of time.</p>
        <section class="map-shell" aria-label="World map highlighting wine regions">
            <div id="map" class="world-map" role="img" aria-hidden="true"></div>
        </section>
        <script id="wineHighlightData" type="application/json">
            @Html.Raw(JsonSerializer.Serialize(Model.HighlightPoints
                .Select((point, index) => new
                {
                    index,
                    point.Label,
                    point.Country,
                    point.Latitude,
                    point.Longitude,
                    point.BottlesCellared,
                    point.BottlesConsumed,
                    point.AverageScore
                }), new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase }))
        </script>
        <section class="regions-panel" aria-label="Highlighted wine regions">
            @for (var i = 0; i < Model.HighlightPoints.Count; i++)
            {
                var point = Model.HighlightPoints[i];
                <article class="region-card" data-region-index="@i">
                    <span class="label">@point.Label</span>
                    @if (!string.IsNullOrWhiteSpace(point.Country))
                    {
                        <span class="country">@point.Country</span>
                    }
                    <dl class="inventory-overview" aria-label="Inventory overview for @point.Label">
                        <div class="metric">
                            <dt>Cellared</dt>
                            <dd>@point.BottlesCellared</dd>
                        </div>
                        <div class="metric">
                            <dt>Consumed</dt>
                            <dd>@point.BottlesConsumed</dd>
                        </div>
                        <div class="metric">
                            <dt>Avg. Score</dt>
                            <dd>
                                @(point.AverageScore.HasValue
                                    ? point.AverageScore.Value.ToString("0.0", CultureInfo.InvariantCulture)
                                    : "â€”")
                            </dd>
                        </div>
                    </dl>
                </article>
            }
            @if (!Model.HighlightPoints.Any())
            {
                <article class="region-card">
                    <span class="label">No wine regions available yet</span>
                    <span class="country">Add bottles to your inventory to light up the map.</span>
                </article>
            }
        </section>
    </main>
    <script src="https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/topojson-client@3/dist/topojson-client.min.js" crossorigin="anonymous"></script>
    <script>
        (function renderMap() {
            const mapContainer = document.getElementById('map');
            if (!mapContainer || typeof d3 === 'undefined' || typeof topojson === 'undefined') {
                return;
            }

            const width = 960;
            const height = 540;

            const highlightDataElement = document.getElementById('wineHighlightData');
            const highlightData = highlightDataElement?.textContent?.trim()?.length
                ? JSON.parse(highlightDataElement.textContent)
                : [];
            highlightDataElement?.remove();

            const svg = d3.select(mapContainer)
                .append('svg')
                .attr('class', 'map-svg')
                .attr('viewBox', `0 0 ${width} ${height}`)
                .attr('preserveAspectRatio', 'xMidYMid meet')
                .attr('aria-hidden', 'true');

            const mapGroup = svg.append('g')
                .attr('class', 'map-group');

            const countryLayer = mapGroup.append('g')
                .attr('class', 'country-layer');

            const highlightGroup = mapGroup.append('g')
                .attr('class', 'highlight-group');

            const projection = d3.geoMercator();
            const path = d3.geoPath(projection);

            const zoomBehavior = d3.zoom()
                .scaleExtent([1, 8])
                .translateExtent([[0, 0], [width, height]])
                .on('zoom', (event) => {
                    mapGroup.attr('transform', event.transform);
                });

            svg.call(zoomBehavior).on('dblclick.zoom', null);

            fetch('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json')
                .then(response => response.json())
                .then(worldData => {
                    const countries = topojson.feature(worldData, worldData.objects.countries);
                    const latitudeLimit = 60;
                    const visibleBand = {
                        type: 'Polygon',
                        coordinates: [[
                            [-180, -latitudeLimit],
                            [180, -latitudeLimit],
                            [180, latitudeLimit],
                            [-180, latitudeLimit],
                            [-180, -latitudeLimit]
                        ]]
                    };

                    projection.fitExtent(
                        [[0, 0], [width, height]],
                        visibleBand
                    );

                    countryLayer
                        .selectAll('path')
                        .data(countries.features)
                        .join('path')
                        .attr('class', 'country')
                        .attr('d', path);

                    const highlightPoints = highlightGroup
                        .selectAll('g.highlight-point')
                        .data(highlightData)
                        .join('g')
                        .attr('class', 'highlight-point')
                        .attr('transform', d => {
                            const projected = projection([d.longitude, d.latitude]);
                            return projected ? `translate(${projected[0]}, ${projected[1]})` : null;
                        });

                    highlightPoints.append('circle')
                        .attr('class', 'halo')
                        .attr('r', 9);

                    highlightPoints.append('circle')
                        .attr('class', 'core')
                        .attr('r', 3.2);

                    highlightPoints.append('text')
                        .attr('class', 'highlight-label')
                        .attr('y', 16)
                        .attr('text-anchor', 'middle')
                        .text(d => d.label ?? '');

                    highlightPoints.append('title')
                        .text(d => d.label ?? '');

                    const regionCards = Array.from(document.querySelectorAll('.region-card'));

                    let selectedIndex = null;

                    const setHoveredIndex = (index) => {
                        highlightPoints.classed('is-hovered', d => d.index === index);
                        regionCards.forEach(card => {
                            const cardIndex = Number(card.dataset?.regionIndex ?? -1);
                            card.classList.toggle('is-hovered', cardIndex === index);
                        });
                    };

                    const focusOnPoint = (point) => {
                        if (!point) {
                            return;
                        }

                        const coordinates = projection([point.longitude, point.latitude]);
                        if (!coordinates) {
                            return;
                        }

                        const [x, y] = coordinates;
                        const scale = 3.2;
                        svg.transition()
                            .duration(600)
                            .call(
                                zoomBehavior.transform,
                                d3.zoomIdentity
                                    .translate(width / 2, height / 2)
                                    .scale(scale)
                                    .translate(-x, -y)
                            );
                    };

                    const setSelectedIndex = (index, { focus = false } = {}) => {
                        if (index === selectedIndex) {
                            return;
                        }

                        selectedIndex = index;
                        highlightPoints.classed('is-selected', d => d.index === index);
                        regionCards.forEach(card => {
                            const cardIndex = Number(card.dataset?.regionIndex ?? -1);
                            const isSelected = cardIndex === index;
                            card.classList.toggle('is-selected', isSelected);
                            if (isSelected) {
                                card.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
                            }
                        });

                        if (focus) {
                            const point = highlightData.find(d => d.index === index);
                            focusOnPoint(point);
                        }
                    };

                    highlightPoints
                        .on('mouseenter', (_, d) => setHoveredIndex(d.index))
                        .on('mouseleave', () => setHoveredIndex(null))
                        .on('click', (_, d) => setSelectedIndex(d.index, { focus: true }));

                    regionCards.forEach(card => {
                        const index = Number(card.dataset?.regionIndex ?? -1);
                        if (!Number.isInteger(index) || index < 0) {
                            return;
                        }

                        card.addEventListener('mouseenter', () => setHoveredIndex(index));
                        card.addEventListener('mouseleave', () => setHoveredIndex(null));
                        card.addEventListener('click', () => setSelectedIndex(index, { focus: true }));
                    });

                    if (highlightData.length) {
                        setSelectedIndex(highlightData[0].index, { focus: false });
                    }
                })
                .catch(error => {
                    console.error('Failed to render world map', error);
                });
        })();
    </script>
    <script>
        const toggle = document.getElementById('menuToggle');
        const panel = document.getElementById('menuPanel');

        const closeMenu = () => {
            toggle.classList.remove('active');
            toggle.setAttribute('aria-expanded', 'false');
            panel.classList.remove('open');
            panel.setAttribute('aria-hidden', 'true');
        };

        toggle?.addEventListener('click', () => {
            const isOpen = toggle.classList.toggle('active');
            toggle.setAttribute('aria-expanded', String(isOpen));
            panel.classList.toggle('open', isOpen);
            panel.setAttribute('aria-hidden', String(!isOpen));
        });

        document.addEventListener('click', (event) => {
            if (!panel.contains(event.target) && event.target !== toggle) {
                closeMenu();
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                closeMenu();
            }
        });
    </script>
</body>
</html>
