@model AllMCPSolution.Controllers.WineSurferSipSessionDetailViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Html
@{
    Layout = null;
    var statusMessage = TempData["SisterhoodStatus"] as string;
    var errorMessage = TempData["SisterhoodError"] as string;
}

@functions {
    private static DateTime NormalizeDateTime(DateTime value)
    {
        return value.Kind switch
        {
            DateTimeKind.Utc => value.ToLocalTime(),
            DateTimeKind.Unspecified => DateTime.SpecifyKind(value, DateTimeKind.Local),
            _ => value
        };
    }

    private static DateTime? NormalizeDateTime(DateTime? value)
    {
        return value.HasValue ? NormalizeDateTime(value.Value) : (DateTime?)null;
    }

    private static string FormatSipSessionSchedule(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("f");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("D") ?? "Schedule TBD";
    }

    private static string FormatSipSessionDateValue(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("yyyy-MM-dd");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("yyyy-MM-dd") ?? string.Empty;
    }

    private static string FormatSipSessionTimeValue(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        return localDateTime.HasValue ? localDateTime.Value.ToString("HH:mm") : string.Empty;
    }

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer Â· Sip Session</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <style>
        :root {
            color-scheme: dark;
            --wine-surfer-card-max-width: 960px;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .wine-surfer-card {
            width: min(100%, var(--wine-surfer-card-max-width));
            max-width: var(--wine-surfer-card-max-width);
        }

        .page-content {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .session-main {
            width: min(var(--wine-surfer-card-max-width), 100%);
            margin: 0 auto;
            padding: 120px 32px 96px;
            display: flex;
            flex-direction: column;
            gap: 48px;
            --session-content-max-width: min(var(--wine-surfer-card-max-width), 100%);
        }

        .session-feedback {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .status-banner {
            padding: 12px 18px;
            border-radius: 12px;
            font-size: 13px;
            letter-spacing: 1px;
            text-transform: uppercase;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            background: rgba(244, 241, 234, 0.04);
            border: 1px solid rgba(244, 241, 234, 0.12);
        }

        .status-banner.success {
            color: #d4f4d2;
            border-color: rgba(68, 160, 82, 0.45);
            background: rgba(68, 160, 82, 0.18);
        }

        .status-banner.error {
            color: #ffe0e0;
            border-color: rgba(216, 60, 60, 0.5);
            background: rgba(216, 60, 60, 0.2);
        }

        .session-overview,
        .bottle-section {
            width: 100%;
            max-width: var(--session-content-max-width);
            margin: 0 auto;
        }

        .session-overview {
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .session-overview-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 16px;
        }

        .session-overview-header-info {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .session-title {
            margin: 0;
            font-size: 32px;
            letter-spacing: 2px;
            line-height: 1.2;
        }

        .session-overview-actions {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
        }

        .session-kicker {
            margin: 0;
            font-size: 12px;
            letter-spacing: 3px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .sisterhood-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            padding: 8px 16px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: transparent;
            color: #f4f1ea;
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, color 0.2s ease, opacity 0.2s ease, transform 0.2s ease;
        }

        .sisterhood-button:hover,
        .sisterhood-button:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
        }

        .sisterhood-button:focus-visible {
            outline: none;
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.25);
        }

        .sisterhood-button:disabled {
            opacity: 0.4;
            cursor: not-allowed;
        }

        .sisterhood-button--primary {
            border-color: rgba(244, 241, 234, 0.28);
            background: rgba(244, 241, 234, 0.12);
        }

        .sisterhood-button--primary:hover,
        .sisterhood-button--primary:focus-visible {
            background: rgba(244, 241, 234, 0.18);
            transform: translateY(-1px);
        }

        .sisterhood-button--danger {
            border-color: rgba(181, 65, 65, 0.45);
            color: #f6dcdc;
        }

        .sisterhood-button--danger:hover,
        .sisterhood-button--danger:focus-visible {
            background: rgba(181, 65, 65, 0.25);
            color: #ffe3e3;
        }

        .sisterhood-button--ghost {
            color: rgba(244, 241, 234, 0.85);
        }

        .sisterhood-button--ghost:hover,
        .sisterhood-button--ghost:focus-visible {
            color: #f4f1ea;
        }

        .sisterhood-button--ghost-danger {
            border-color: rgba(214, 104, 86, 0.45);
            color: #f3b0a3;
        }

        .sisterhood-button--ghost-danger:hover,
        .sisterhood-button--ghost-danger:focus-visible {
            background: rgba(214, 104, 86, 0.15);
            color: #ffd6cc;
        }

        .session-description {
            margin: 0;
            font-size: 16px;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.78);
            letter-spacing: 1px;
        }

        .session-meta {
            display: grid;
            grid-template-columns: minmax(220px, 1.2fr) minmax(180px, 1fr);
            gap: 24px;
            margin: 0;
            padding: 0;
            list-style: none;
        }

        .session-meta-item {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .session-meta-item dt {
            margin: 0;
            font-size: 11px;
            letter-spacing: 1.8px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .session-meta-item dd {
            margin: 0;
            font-size: 18px;
            letter-spacing: 1.2px;
        }

        .session-body {
            display: flex;
            flex-direction: column;
            gap: 32px;
        }

        .bottle-section {
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .bottle-section__header {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
        }

        .bottle-section__actions {
            display: inline-flex;
            align-items: center;
            gap: 12px;
            margin-left: auto;
        }

        .bottle-section__action-form {
            margin: 0;
        }

        .food-suggestions {
            margin: 0;
            margin-top: 8px;
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 8px;
            padding: 16px 20px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
        }

        .food-suggestions__title {
            margin: 0;
            font-size: 13px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .food-suggestions__list {
            margin: 0;
            padding-left: 18px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .food-suggestions__list li {
            font-size: 15px;
            letter-spacing: 1px;
        }

        .food-suggestions__cheese {
            margin-top: 4px;
            padding-top: 8px;
            border-top: 1px solid rgba(244, 241, 234, 0.1);
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .food-suggestions__cheese-title {
            margin: 0;
            font-size: 12px;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .food-suggestions__cheese-text {
            margin: 0;
            font-size: 15px;
            letter-spacing: 1px;
        }

        .food-suggestions__error {
            margin: 0;
            margin-top: 8px;
        }

        .bottle-section__title {
            margin: 0;
            font-size: 20px;
            letter-spacing: 4px;
            text-transform: uppercase;
        }

        .bottle-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 14px;
            width: 100%;
        }

        .bottle-list > li {
            width: 100%;
        }

        .bottle-card {
            backdrop-filter: blur(4px);
            display: flex;
            flex-direction: column;
            gap: 18px;
            padding: 28px;
            position: relative;
            transition: transform 160ms ease, box-shadow 160ms ease;
        }

        .session-page.is-authenticated .bottle-card {
            cursor: pointer;
        }

        .session-page.requires-auth .bottle-card {
            cursor: default;
        }

        .session-page.is-authenticated .bottle-card:hover,
        .session-page.is-authenticated .bottle-card:focus-visible {
            transform: translateY(-2px);
            box-shadow: 0 18px 44px rgba(0, 0, 0, 0.45);
        }

        .bottle-card:focus-visible {
            outline: 2px solid rgba(244, 241, 234, 0.85);
            outline-offset: 4px;
        }

        .bottle-name {
            margin: 0;
            font-size: 20px;
            letter-spacing: 4px;
            text-transform: uppercase;
        }

        .bottle-card-header {
            display: flex;
            align-items: baseline;
            justify-content: space-between;
            gap: 12px;
        }

        .bottle-vintage {
            margin: 0;
            font-size: 14px;
            letter-spacing: 3px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .bottle-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 24px;
            margin: 0 0 8px;
            padding: 0;
            list-style: none;
        }

        .bottle-meta-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .bottle-meta-item dt {
            margin: 0;
            font-size: 11px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .bottle-meta-item dd {
            margin: 0;
            font-size: 16px;
            letter-spacing: 1.1px;
        }

        .sip-session-edit-region {
            margin-top: 16px;
        }

        .sip-session-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
            border-radius: 14px;
            border: 1px dashed rgba(244, 241, 234, 0.18);
            background: rgba(244, 241, 234, 0.03);
            padding: 16px;
        }

        .sip-session-form label {
            font-size: 12px;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .sip-session-form input[type="text"],
        .sip-session-form input[type="date"],
        .sip-session-form input[type="time"],
        .sip-session-form textarea {
            width: 100%;
            padding: 10px 12px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.16);
            background: rgba(244, 241, 234, 0.06);
            color: #f4f1ea;
            font-size: 14px;
        }

        .sip-session-form textarea {
            min-height: 80px;
            resize: vertical;
        }

        .sip-session-form input[type="text"]:focus,
        .sip-session-form input[type="date"]:focus,
        .sip-session-form input[type="time"]:focus,
        .sip-session-form textarea:focus {
            outline: none;
            border-color: rgba(244, 241, 234, 0.3);
            background: rgba(244, 241, 234, 0.12);
        }

        .sip-session-form-actions {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .sip-session-delete-section {
            margin-top: 18px;
            padding-top: 14px;
            border-top: 1px solid rgba(244, 241, 234, 0.16);
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .sip-session-delete-hint {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.65);
        }

        .sip-session-delete-form {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .contribute-modal-backdrop {
            z-index: 70;
        }

        .contribute-modal {
            width: min(520px, 100%);
        }

        .contribute-modal__header {
            justify-content: space-between;
            align-items: center;
        }

        .contribute-modal__title {
            margin: 0;
        }

        .contribute-modal__body {
            padding: 0;
        }

        .contribute-modal__form {
            display: flex;
            flex-direction: column;
            gap: 16px;
            padding: 24px;
            flex: 1;
        }

        .contribute-modal__hint {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.75);
        }

        .contribute-modal__list {
            flex: 1;
            overflow-y: auto;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
            padding: 12px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .contribute-modal__list ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .contribute-modal__option label {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 10px;
            border-radius: 10px;
            transition: background 0.2s ease;
            cursor: pointer;
        }

        .contribute-modal__option label:hover,
        .contribute-modal__option label:focus-within {
            background: rgba(244, 241, 234, 0.08);
        }

        .contribute-modal__option input[type="checkbox"] {
            width: 16px;
            height: 16px;
            accent-color: #c086f2;
        }

        .contribute-modal__option[data-disabled] label {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .contribute-modal__option[data-disabled] label:hover,
        .contribute-modal__option[data-disabled] label:focus-within {
            background: transparent;
        }

        .contribute-modal__empty {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.72);
        }

        .contribute-modal__actions {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 12px;
            padding-top: 8px;
        }

        .sip-session-edit-modal-backdrop {
            z-index: 65;
        }

        .sip-session-edit-modal {
            width: min(560px, 100%);
        }

        .sip-session-edit-modal__body {
            padding: 24px;
            gap: 16px;
        }

        .sip-session-edit-modal__body .sip-session-form {
            border: none;
            padding: 0;
            background: transparent;
            box-shadow: none;
        }

        .sip-session-edit-modal__body .sip-session-form .sip-session-form-actions {
            justify-content: flex-end;
        }

        .bottle-note {
            margin: 8px 0 0;
            font-size: 15px;
            letter-spacing: 0.8px;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.82);
            white-space: pre-wrap;
        }

        .bottle-note--empty {
            color: rgba(244, 241, 234, 0.55);
            font-style: italic;
        }

        .bottle-prompt {
            margin: 6px 0 0;
            font-size: 11px;
            letter-spacing: 2.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.55);
        }

        .drink-bottle-error.is-success {
            color: #4ade80;
        }

        .empty-state {
            margin: 0;
            font-size: 14px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.55);
        }

        @@media (max-width: 720px) {
            .session-main {
                padding: 96px 20px 72px;
                gap: 36px;
            }

            .session-title {
                letter-spacing: 6px;
            }

            .session-meta {
                grid-template-columns: 1fr;
            }

            .bottle-card {
                padding: 18px;
            }
        }
    </style>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
@{ 
    var bodyClass = Model.CurrentUser is null ? "requires-auth" : "is-authenticated";
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = WineSurferTopBarModel.CreateFromSisterhoodData(
        currentLocation,
        Model.IncomingInvitations,
        Model.SentInvitationNotifications,
        displayName: Model.CurrentUser?.DisplayName,
        isAdmin: Model.CurrentUser?.IsAdmin == true);
    var isCreateMode = Model.IsCreateMode;
    var manageableSisterhoods = Model.ManageableSisterhoods ?? Array.Empty<WineSurferSisterhoodOption>();
    var hasManageableSisterhoods = manageableSisterhoods.Count > 0;
    var sisterhoodName = isCreateMode
        ? (manageableSisterhoods.Count == 1 ? manageableSisterhoods[0].Name : "Select a sisterhood")
        : (string.IsNullOrWhiteSpace(Model.SisterhoodName) ? "Sisterhood" : Model.SisterhoodName);
    var scheduleLabel = isCreateMode
        ? "Schedule TBD"
        : FormatSipSessionSchedule(Model.Session);
    var locationLabel = isCreateMode || string.IsNullOrWhiteSpace(Model.Session.Location)
        ? "Location TBD"
        : Model.Session.Location;
    var sessionTitle = isCreateMode
        ? "Plan a new sip session"
        : (string.IsNullOrWhiteSpace(Model.Session.Name) ? "Sip Session" : Model.Session.Name.Trim());
    var sessionBottles = Model.Session.Bottles ?? Array.Empty<WineSurferSipSessionBottle>();
    var sessionBottleIds = new HashSet<Guid>(sessionBottles.Select(bottle => bottle.Id));
    var availableBottles = Model.AvailableBottles ?? Array.Empty<WineSurferSipSessionBottle>();
    var contributableBottleCount = availableBottles.Count(bottle => !sessionBottleIds.Contains(bottle.Id));
    var hasContributableBottles = contributableBottleCount > 0;
    var showContributeButton = !isCreateMode && Model.CurrentUser is not null;
    var foodSuggestions = Model.FoodSuggestions ?? Array.Empty<string>();
    var hasFoodSuggestions = foodSuggestions.Count > 0;
    var foodSuggestionError = string.IsNullOrWhiteSpace(Model.FoodSuggestionError) ? null : Model.FoodSuggestionError!.Trim();
    var cheeseSuggestion = string.IsNullOrWhiteSpace(Model.CheeseSuggestion) ? null : Model.CheeseSuggestion!.Trim();
    var hasCheeseSuggestion = !string.IsNullOrEmpty(cheeseSuggestion);
    var hasPairingContent = hasFoodSuggestions || hasCheeseSuggestion;
    var suggestFoodAction = !isCreateMode ? Url.Action("SuggestSipSessionFood", "WineSurfer", new { sipSessionId = Model.Session.Id }) : null;
    var canShowFoodButton = !isCreateMode && !string.IsNullOrEmpty(suggestFoodAction);
    var canRequestFoodSuggestions = canShowFoodButton && sessionBottles.Count > 0;
    var showBottleActions = !isCreateMode && (canShowFoodButton || showContributeButton);
    const string contributeModalId = "sip-session-contribute-modal";
    var contributeModalTitleId = $"{contributeModalId}-title";
    ViewData["WineSurferPageTitle"] = sessionTitle;
}
<body class="wine-app session-page @bodyClass">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="session-main">
            @if (!string.IsNullOrWhiteSpace(statusMessage) || !string.IsNullOrWhiteSpace(errorMessage))
            {
                <section class="session-feedback" aria-live="polite">
                    @if (!string.IsNullOrWhiteSpace(statusMessage))
                    {
                        <div class="status-banner success" role="status">@statusMessage</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <div class="status-banner error" role="alert">@errorMessage</div>
                    }
                </section>
            }
            <section class="session-overview" aria-label="Sip session details">
                <div class="session-overview-header">
                    <div class="session-overview-header-info">
                        <p class="session-kicker">@sisterhoodName</p>
                        <h1 class="session-title">@sessionTitle</h1>
                    </div>
                    @if (isCreateMode)
                    {
                        var scheduledDateValue = FormatSipSessionDateValue(Model.Session);
                        var scheduledTimeValue = FormatSipSessionTimeValue(Model.Session);
                        const string createNameId = "sip-session-create-name";
                        const string createScheduleDateId = "sip-session-create-schedule-date";
                        const string createScheduleTimeId = "sip-session-create-schedule-time";
                        const string createLocationId = "sip-session-create-location";
                        const string createDescriptionId = "sip-session-create-description";
                        const string createSisterhoodId = "sip-session-create-sisterhood";
                        <div class="session-overview-actions">
                            @if (hasManageableSisterhoods)
                            {
                                <button type="button"
                                        class="sisterhood-button"
                                        data-sip-session-create-toggle
                                        data-close-label="Cancel"
                                        data-open-on-load="true"
                                        aria-expanded="false"
                                        aria-controls="sip-session-edit-modal">
                                    Plan sip session
                                </button>
                            }
                            else
                            {
                                <button type="button"
                                        class="sisterhood-button"
                                        data-sip-session-create-toggle
                                        aria-expanded="false"
                                        aria-controls="sip-session-edit-modal"
                                        disabled>
                                    Plan sip session
                                </button>
                            }
                        </div>
                        <div class="sip-session-edit-region" data-sip-session-create-region hidden>
                            <template data-sip-session-create-template>
                                <form method="post"
                                      action="@Url.Action("CreateSipSession", "WineSurfer")"
                                      class="sip-session-form"
                                      data-sip-session-edit-form>
                                    @Html.AntiForgeryToken()
                                    <label for="@createSisterhoodId">Sisterhood</label>
                                    <select id="@createSisterhoodId"
                                            name="SisterhoodId"
                                            required
                                            @(hasManageableSisterhoods ? null : "disabled")>
                                        <option value="" @(Model.SisterhoodId == Guid.Empty ? "selected" : null)>Select a sisterhood</option>
                                        @foreach (var option in manageableSisterhoods)
                                        {
                                            <option value="@option.Id" @(Model.SisterhoodId == option.Id ? "selected" : null)>@option.Name</option>
                                        }
                                    </select>
                                    <label for="@createNameId">Session name</label>
                                    <input id="@createNameId"
                                           name="Name"
                                           type="text"
                                           value="@Model.Session.Name"
                                           maxlength="256"
                                           required
                                           @(hasManageableSisterhoods ? null : "disabled") />
                                    <label for="@createScheduleDateId">Scheduled date</label>
                                    <input id="@createScheduleDateId"
                                           name="ScheduledDate"
                                           type="date"
                                           value="@scheduledDateValue"
                                           @(hasManageableSisterhoods ? null : "disabled") />
                                    <label for="@createScheduleTimeId">Scheduled time (optional)</label>
                                    <input id="@createScheduleTimeId"
                                           name="ScheduledTime"
                                           type="time"
                                           value="@scheduledTimeValue"
                                           @(hasManageableSisterhoods ? null : "disabled") />
                                    <label for="@createLocationId">Location</label>
                                    <input id="@createLocationId"
                                           name="Location"
                                           type="text"
                                           value="@(Model.Session.Location ?? string.Empty)"
                                           maxlength="256"
                                           @(hasManageableSisterhoods ? null : "disabled") />
                                    <label for="@createDescriptionId">Description</label>
                                    <textarea id="@createDescriptionId"
                                              name="Description"
                                              maxlength="2048"
                                              @(hasManageableSisterhoods ? null : "disabled")>@(Model.Session.Description ?? string.Empty)</textarea>
                                    <div class="sip-session-form-actions">
                                        <button type="submit" class="sisterhood-button" @(hasManageableSisterhoods ? null : "disabled")>Create session</button>
                                        <button type="button"
                                                class="sisterhood-button sisterhood-button--ghost"
                                                data-sip-session-edit-cancel>Cancel</button>
                                    </div>
                                    @if (!hasManageableSisterhoods)
                                    {
                                        <p class="empty-state" style="text-transform:none;font-size:13px;letter-spacing:0;">You need to be an admin of a sisterhood to plan a sip session.</p>
                                    }
                                </form>
                            </template>
                        </div>
                    }
                    else
                    {
                        var showEditButton = Model.CanManageSession;

                        if (showEditButton)
                        {
                            <div class="session-overview-actions">
                                <button type="button"
                                        class="sisterhood-button"
                                        data-sip-session-edit-toggle
                                        data-session-title="@sessionTitle"
                                        data-close-label="Close edit"
                                        aria-expanded="false"
                                        aria-controls="sip-session-edit-modal">
                                    Edit sip session
                                </button>
                            </div>

                            var sessionReturnUrl = Url.Action("SipSession", "WineSurfer", new { sipSessionId = Model.Session.Id })
                                ?? string.Concat(requestPath, requestQuery);
                            var deleteReturnUrl = Url.Action("Index", "WineSurfer") ?? "/wine-surfer";
                            var scheduledDateValue = FormatSipSessionDateValue(Model.Session);
                            var scheduledTimeValue = FormatSipSessionTimeValue(Model.Session);
                            var nameInputId = $"sip-session-name-{Model.Session.Id}";
                            var scheduleDateInputId = $"sip-session-schedule-date-{Model.Session.Id}";
                            var scheduleTimeInputId = $"sip-session-schedule-time-{Model.Session.Id}";
                            var locationInputId = $"sip-session-location-{Model.Session.Id}";
                            var descriptionInputId = $"sip-session-description-{Model.Session.Id}";
                            <div class="sip-session-edit-region" data-sip-session-edit-region hidden>
                                <template data-sip-session-edit-template>
                                    <form method="post"
                                          action="@Url.Action("UpdateSipSession", "WineSurfer")"
                                          class="sip-session-form"
                                          data-sip-session-edit-form>
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                        <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                        <input type="hidden" name="ReturnUrl" value="@sessionReturnUrl" />
                                        <label for="@nameInputId">Session name</label>
                                        <input id="@nameInputId"
                                               name="Name"
                                               type="text"
                                               value="@Model.Session.Name"
                                               maxlength="256"
                                               required />
                                        <label for="@scheduleDateInputId">Scheduled date</label>
                                        <input id="@scheduleDateInputId"
                                               name="ScheduledDate"
                                               type="date"
                                               value="@scheduledDateValue" />
                                        <label for="@scheduleTimeInputId">Scheduled time (optional)</label>
                                        <input id="@scheduleTimeInputId"
                                               name="ScheduledTime"
                                               type="time"
                                               value="@scheduledTimeValue" />
                                        <label for="@locationInputId">Location</label>
                                        <input id="@locationInputId"
                                               name="Location"
                                               type="text"
                                               value="@(Model.Session.Location ?? string.Empty)"
                                               maxlength="256" />
                                        <label for="@descriptionInputId">Description</label>
                                        <textarea id="@descriptionInputId"
                                                  name="Description"
                                                  maxlength="2048">@(Model.Session.Description ?? string.Empty)</textarea>
                                        <div class="sip-session-form-actions">
                                            <button type="submit" class="sisterhood-button">Save changes</button>
                                            <button type="button"
                                                    class="sisterhood-button sisterhood-button--ghost"
                                                    data-sip-session-edit-cancel>Cancel</button>
                                        </div>
                                    </form>
                                    <div class="sip-session-delete-section">
                                        <p class="sip-session-delete-hint">Deleting this sip session will remove it for everyone in the sisterhood.</p>
                                        <form method="post"
                                              action="@Url.Action("DeleteSipSession", "WineSurfer")"
                                              class="sip-session-delete-form">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                            <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                            <input type="hidden" name="ReturnUrl" value="@deleteReturnUrl" />
                                            <button type="submit" class="sisterhood-button sisterhood-button--danger">Delete sip session</button>
                                        </form>
                                    </div>
                                </template>
                            </div>
                        }
                    }
                </div>
                @if (isCreateMode)
                {
                    <p class="session-description">Select a sisterhood and enter the details below to plan your next tasting.</p>
                }
                else if (!string.IsNullOrWhiteSpace(Model.Session.Description))
                {
                    <p class="session-description">@Model.Session.Description</p>
                }
                <dl class="session-meta">
                    <div class="session-meta-item">
                        <dt>Date &amp; time</dt>
                        <dd>@scheduleLabel</dd>
                    </div>
                    <div class="session-meta-item">
                        <dt>Location</dt>
                        <dd>@locationLabel</dd>
                    </div>
                </dl>
            </section>
            <section class="bottle-section" aria-label="Bottle list">
                @if (!isCreateMode)
                {
                    if (hasPairingContent)
                    {
                        <section class="food-suggestions" aria-label="Suggested food pairings" role="status">
                            <h3 class="food-suggestions__title">Suggested pairings</h3>
                            @if (hasFoodSuggestions)
                            {
                                <ul class="food-suggestions__list">
                                    @foreach (var suggestion in foodSuggestions)
                                    {
                                        <li>@suggestion</li>
                                    }
                                </ul>
                            }
                            @if (hasCheeseSuggestion)
                            {
                                <div class="food-suggestions__cheese">
                                    <h4 class="food-suggestions__cheese-title">Cheese pairing</h4>
                                    <p class="food-suggestions__cheese-text">@cheeseSuggestion</p>
                                </div>
                            }
                        </section>
                    }
                    else if (!string.IsNullOrEmpty(foodSuggestionError))
                    {
                        <div class="status-banner error food-suggestions__error" role="alert">@foodSuggestionError</div>
                    }
                }
                <div class="bottle-section__header">
                    <h2 class="bottle-section__title">Bottle list</h2>
                    @if (showBottleActions)
                    {
                        <div class="bottle-section__actions">
                            @if (canShowFoodButton && !string.IsNullOrEmpty(suggestFoodAction))
                            {
                                <form method="post"
                                      action="@suggestFoodAction"
                                      class="bottle-section__action-form"
                                      data-suggest-food-form>
                                    @Html.AntiForgeryToken()
                                    <button type="submit"
                                            class="sisterhood-button sisterhood-button--ghost"
                                            title="@(canRequestFoodSuggestions ? "Ask the pairing assistant for dishes that match these wines." : "Add bottles before requesting food pairings.")"
                                            data-suggest-food-button
                                            data-state="ready"
                                            aria-busy="false"
                                            @(canRequestFoodSuggestions ? null : "disabled")>
                                        Suggest food
                                    </button>
                                </form>
                            }
                            @if (showContributeButton)
                            {
                                <button type="button"
                                        class="sisterhood-button"
                                        data-contribute-trigger
                                        aria-controls="@contributeModalId"
                                        aria-expanded="false"
                                        title="@(hasContributableBottles ? "Select undrunk bottles to contribute." : "No undrunk bottles available to contribute right now.")">
                                    Contribute bottle
                                </button>
                            }
                        </div>
                    }
                </div>
                
                @if (isCreateMode)
                {
                    <p class="empty-state">Add bottles after you create this sip session.</p>
                }
                else if (Model.Session.Bottles.Count > 0)
                {
                    <ul class="bottle-list">
                        @foreach (var bottle in Model.Session.Bottles)
                        {
                            <li>
                                @await Html.PartialAsync("_BottleCard", bottle, new ViewDataDictionary(ViewData)
                                {
                                    { "IsAuthenticated", Model.CurrentUser is not null },
                                    { "SisterhoodId", Model.SisterhoodId },
                                    { "SipSessionId", Model.Session.Id },
                                    { "ReturnUrl", currentLocation }
                                })
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="empty-state">No bottles have been linked to this sip session yet. Gather your cellar and set the bottle list.</p>
                }
            </section>
        </main>
        @if (Model.CanManageSession || isCreateMode)
        {
            var editModal = new WineSurferModalShell
            {
                BackdropId = "sip-session-edit-modal",
                BackdropCssClass = "wine-surfer-modal-backdrop sip-session-edit-modal-backdrop",
                BackdropAttributes = new Dictionary<string, string?>
                {
                    ["data-sip-session-edit-modal"] = null,
                    ["hidden"] = null,
                    ["aria-hidden"] = "true"
                },
                DialogCssClass = "wine-surfer-modal sip-session-edit-modal",
                DialogAttributes = new Dictionary<string, string?>
                {
                    ["aria-labelledby"] = "sip-session-edit-modal-title"
                },
                HeaderCssClass = "wine-surfer-modal__header sip-session-edit-modal__header",
                Title = "Edit sip session",
                TitleCssClass = "wine-surfer-modal__title sip-session-edit-modal__title",
                TitleElementId = "sip-session-edit-modal-title",
                TitleAttributes = new Dictionary<string, string?>
                {
                    ["data-sip-session-edit-modal-title"] = null
                },
                CloseButtonCssClass = "wine-surfer-modal__close sip-session-edit-modal__close",
                CloseButtonLabel = "Close edit sip session dialog",
                CloseButtonAttributes = new Dictionary<string, string?>
                {
                    ["data-sip-session-edit-close"] = null
                },
                BodyCssClass = "wine-surfer-modal__body sip-session-edit-modal__body",
                BodyAttributes = new Dictionary<string, string?>
                {
                    ["data-sip-session-edit-modal-body"] = null
                },
                BodyContent = _ => HtmlString.Empty
            };
            @await Html.PartialAsync("_WineSurferModalShell", editModal)
            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    const modal = document.querySelector('[data-sip-session-edit-modal]');
                    if (!modal) {
                        return;
                    }

                    const modalBody = modal.querySelector('[data-sip-session-edit-modal-body]');
                    const titleElement = modal.querySelector('[data-sip-session-edit-modal-title]');
                    const closeButtons = modal.querySelectorAll('[data-sip-session-edit-close]');
                    let activeTrigger = null;
                    let activeForm = null;

                    const isModalOpen = () => !modal.hasAttribute('hidden');

                    const setModalButtonState = (button, isOpen, overrides = {}) => {
                        if (!button) {
                            return;
                        }

                        if (!button.dataset.originalLabel) {
                            button.dataset.originalLabel = button.textContent?.trim() ?? '';
                        }

                        const { closeLabel, defaultLabel } = overrides;

                        if (typeof defaultLabel === 'string') {
                            button.dataset.originalLabel = defaultLabel;
                        }

                        if (typeof closeLabel === 'string') {
                            button.dataset.modalCloseLabel = closeLabel;
                        }

                        if (isOpen) {
                            const label = (typeof closeLabel === 'string' ? closeLabel : button.dataset.modalCloseLabel) ?? 'Close';
                            button.textContent = label;
                            button.setAttribute('aria-expanded', 'true');
                        } else {
                            const original = (typeof defaultLabel === 'string' ? defaultLabel : button.dataset.originalLabel) ?? '';
                            const fallback = button.dataset.originalLabel ?? '';
                            button.textContent = original || fallback;
                            button.setAttribute('aria-expanded', 'false');
                        }
                    };

                    const closeModal = ({ restoreFocus = true } = {}) => {
                        if (!modalBody) {
                            return;
                        }

                        if (activeForm) {
                            activeForm.reset();
                            activeForm = null;
                        }

                        modalBody.innerHTML = '';

                        modal.setAttribute('hidden', '');
                        modal.setAttribute('aria-hidden', 'true');

                        if (activeTrigger) {
                            setModalButtonState(activeTrigger, false);
                        }

                        const triggerToFocus = activeTrigger;
                        activeTrigger = null;

                        if (restoreFocus && triggerToFocus) {
                            window.requestAnimationFrame(() => triggerToFocus.focus());
                        }
                    };

                    const openModal = (trigger, template, { title, closeLabel, focusSelector } = {}) => {
                        if (!modalBody || !template) {
                            return;
                        }

                        modalBody.innerHTML = '';
                        const fragment = template.content.cloneNode(true);
                        modalBody.appendChild(fragment);

                        const form = modalBody.querySelector('[data-sip-session-edit-form]');
                        if (!form) {
                            modalBody.innerHTML = '';
                            return;
                        }

                        activeForm = form;

                        const cancelButton = form.querySelector('[data-sip-session-edit-cancel]');
                        if (cancelButton) {
                            cancelButton.addEventListener('click', (event) => {
                                event.preventDefault();
                                form.reset();
                                closeModal();
                            });
                        }

                        modal.removeAttribute('hidden');
                        modal.setAttribute('aria-hidden', 'false');

                        activeTrigger = trigger;
                        setModalButtonState(trigger, true, { closeLabel });

                        if (titleElement) {
                            if (title) {
                                titleElement.textContent = title;
                            } else {
                                titleElement.textContent = 'Edit sip session';
                            }
                        }

                        window.requestAnimationFrame(() => {
                            const focusTarget = focusSelector
                                ? form.querySelector(focusSelector)
                                : form.querySelector('input[name="Name"]');
                            focusTarget?.focus();
                        });
                    };

                    closeButtons.forEach((button) => {
                        button.addEventListener('click', () => closeModal());
                    });

                    modal.addEventListener('click', (event) => {
                        if (event.target === modal) {
                            closeModal();
                        }
                    });

                    document.addEventListener('keydown', (event) => {
                        if (event.key === 'Escape' && isModalOpen()) {
                            closeModal();
                        }
                    });

                    const createButtons = document.querySelectorAll('[data-sip-session-create-toggle]');
                    createButtons.forEach((button) => {
                        button.addEventListener('click', () => {
                            const region = document.querySelector('[data-sip-session-create-region]');
                            if (!region) {
                                return;
                            }

                            const template = region.querySelector('template[data-sip-session-create-template]');
                            if (!template) {
                                return;
                            }

                            if (isModalOpen() && activeTrigger === button) {
                                closeModal();
                                return;
                            }

                            openModal(button, template, {
                                title: button.dataset.modalTitle || 'Create sip session',
                                closeLabel: button.dataset.closeLabel || 'Cancel',
                                focusSelector: 'select[name="SisterhoodId"]'
                            });
                        });

                        if (button.hasAttribute('data-open-on-load') && !button.disabled) {
                            window.requestAnimationFrame(() => {
                                button.click();
                            });
                        }
                    });

                    const editButtons = document.querySelectorAll('[data-sip-session-edit-toggle]');
                    editButtons.forEach((button) => {
                        button.addEventListener('click', () => {
                            const section = button.closest('.session-overview');
                            const region = section?.querySelector('[data-sip-session-edit-region]')
                                ?? document.querySelector('[data-sip-session-edit-region]');
                            if (!region) {
                                return;
                            }

                            const template = region.querySelector('template[data-sip-session-edit-template]');
                            if (!template) {
                                return;
                            }

                            if (isModalOpen() && activeTrigger === button) {
                                closeModal();
                                return;
                            }

                            const sessionTitle = button.dataset.sessionTitle?.trim() ?? '';
                            openModal(button, template, {
                                title: sessionTitle ? `Edit sip session Â· ${sessionTitle}` : 'Edit sip session',
                                closeLabel: button.dataset.closeLabel || 'Close edit'
                            });
                        });
                    });
                });
            </script>
        }
        @if (!isCreateMode && Model.CurrentUser is not null)
        {
            var contributeModal = new WineSurferModalShell
            {
                BackdropId = contributeModalId,
                BackdropCssClass = "wine-surfer-modal-backdrop contribute-modal-backdrop",
                BackdropAttributes = new Dictionary<string, string?>
                {
                    ["data-contribute-modal"] = null,
                    ["hidden"] = null,
                    ["aria-hidden"] = "true"
                },
                DialogCssClass = "wine-surfer-modal contribute-modal",
                DialogAttributes = new Dictionary<string, string?>
                {
                    ["aria-labelledby"] = contributeModalTitleId
                },
                HeaderCssClass = "wine-surfer-modal__header contribute-modal__header",
                Title = "Contribute bottles",
                TitleCssClass = "wine-surfer-modal__title contribute-modal__title",
                TitleElementId = contributeModalTitleId,
                CloseButtonCssClass = "wine-surfer-modal__close contribute-modal__close",
                CloseButtonLabel = "Close contribute bottles dialog",
                CloseButtonAttributes = new Dictionary<string, string?>
                {
                    ["data-contribute-close"] = null
                },
                BodyCssClass = "wine-surfer-modal__body contribute-modal__body",
                BodyContent = @<form method="post"
                      action="@Url.Action("ContributeSipSessionBottles", "WineSurfer")"
                      class="contribute-modal__form"
                      data-contribute-form>
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                    <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                    <p class="contribute-modal__hint">Select the bottles you'd like to add to this sip session.</p>
                    <div class="contribute-modal__list" role="group" aria-labelledby="@contributeModalTitleId">
                        <p class="contribute-modal__empty" data-contribute-empty @(hasContributableBottles ? "hidden" : null)>No bottles available to contribute right now.</p>
                        @if (availableBottles.Count > 0)
                        {
                            <ul>
                                @foreach (var bottle in availableBottles)
                                {
                                    var inputId = $"contribute-bottle-{bottle.Id:N}";
                                    var isInSession = sessionBottleIds.Contains(bottle.Id);
                                    <li class="contribute-modal__option" data-bottle-option @(isInSession ? "data-disabled=\"true\"" : null)>
                                        <label for="@inputId">
                                            <input id="@inputId"
                                                   type="checkbox"
                                                   name="BottleIds"
                                                   value="@bottle.Id"
                                                   @(isInSession ? "disabled" : null) />
                                            <span>@bottle.Label</span>
                                        </label>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="contribute-modal__actions">
                        <button type="submit"
                                class="sisterhood-button"
                                data-contribute-submit
                                disabled>
                            Add to sip session
                        </button>
                        <button type="button"
                                class="sisterhood-button sisterhood-button--ghost"
                                data-contribute-close>
                            Cancel
                        </button>
                    </div>
                </form>
            };
            @await Html.PartialAsync("_WineSurferModalShell", contributeModal)
            <script>
                document.addEventListener('DOMContentLoaded', () => {
                    const modal = document.getElementById('@contributeModalId');
                    if (!modal) {
                        return;
                    }

                    const form = modal.querySelector('[data-contribute-form]');
                    const submitButton = form?.querySelector('[data-contribute-submit]');
                    const closeButtons = modal.querySelectorAll('[data-contribute-close]');
                    const openButtons = document.querySelectorAll('[data-contribute-trigger]');
                    const emptyState = modal.querySelector('[data-contribute-empty]');
                    const checkboxNodes = form?.querySelectorAll('input[type="checkbox"][name="BottleIds"]') ?? [];
                    const checkboxes = Array.from(checkboxNodes);
                    let lastTrigger = null;

                    const getEnabledCount = () => checkboxes.filter(box => !box.disabled).length;

                    const updateEmptyState = () => {
                        if (!emptyState) {
                            return;
                        }

                        const enabledCount = getEnabledCount();
                        if (enabledCount === 0) {
                            emptyState.removeAttribute('hidden');
                        } else {
                            emptyState.setAttribute('hidden', '');
                        }
                    };

                    const updateSubmitState = () => {
                        if (!submitButton) {
                            return;
                        }

                        const anyChecked = checkboxes.some(box => !box.disabled && box.checked);
                        submitButton.disabled = !anyChecked;
                    };

                    const focusInitialControl = () => {
                        const firstEnabled = checkboxes.find(box => !box.disabled);
                        if (firstEnabled) {
                            window.requestAnimationFrame(() => firstEnabled.focus());
                            return;
                        }

                        const fallback = closeButtons[0] ?? submitButton;
                        if (fallback instanceof HTMLElement) {
                            window.requestAnimationFrame(() => fallback.focus());
                        }
                    };

                    const openModal = (trigger) => {
                        if (!form) {
                            return;
                        }

                        lastTrigger = trigger instanceof HTMLElement ? trigger : null;
                        modal.removeAttribute('hidden');
                        modal.setAttribute('aria-hidden', 'false');
                        if (lastTrigger) {
                            lastTrigger.setAttribute('aria-expanded', 'true');
                        }
                        document.body.style.overflow = 'hidden';
                        form.reset();
                        updateEmptyState();
                        updateSubmitState();
                        focusInitialControl();
                    };

                    const closeModal = () => {
                        if (!form) {
                            return;
                        }

                        modal.setAttribute('hidden', '');
                        modal.setAttribute('aria-hidden', 'true');
                        document.body.style.overflow = '';
                        form.reset();
                        updateSubmitState();

                        const triggerToFocus = lastTrigger;
                        if (triggerToFocus) {
                            triggerToFocus.setAttribute('aria-expanded', 'false');
                            lastTrigger = null;
                            window.requestAnimationFrame(() => triggerToFocus.focus());
                        }
                    };

                    const isModalOpen = () => !modal.hasAttribute('hidden');

                    openButtons.forEach((button) => {
                        button.addEventListener('click', () => {
                            openModal(button instanceof HTMLElement ? button : null);
                        });
                    });

                    closeButtons.forEach((button) => {
                        button.addEventListener('click', () => {
                            closeModal();
                        });
                    });

                    checkboxes.forEach((box) => {
                        box.addEventListener('change', () => {
                            updateSubmitState();
                        });
                    });

                    modal.addEventListener('click', (event) => {
                        if (event.target === modal) {
                            closeModal();
                        }
                    });

                    document.addEventListener('keydown', (event) => {
                        if (event.key === 'Escape' && isModalOpen()) {
                            closeModal();
                        }
                    });

                    form?.addEventListener('submit', (event) => {
                        const anyChecked = checkboxes.some(box => !box.disabled && box.checked);
                        if (!anyChecked) {
                            event.preventDefault();
                            updateSubmitState();
                        }
                    });

                    updateEmptyState();
                    updateSubmitState();
                });
            </script>
        }
        @if (Model.CurrentUser is not null)
        {
            var drinkModalOptions = new DrinkBottleModalViewModel
            {
                Intro = "Capture how this bottle showed during the session.",
                SubmitLabel = "Drink Bottle",
                FormAction = Url.Action("RateSipSessionBottle", "WineSurfer"),
                IncludeAntiForgeryToken = true,
                ShowDate = false,
                RequireNote = false,
                NoteRows = 5,
                ScoreLabel = "Score (0-10)",
                FormAttributes = new Dictionary<string, string>
                {
                    { "data-sip-session-drink-form", "true" }
                },
                HiddenFields = new List<DrinkBottleModalHiddenField>
                {
                    new DrinkBottleModalHiddenField("SisterhoodId", Model.SisterhoodId.ToString()),
                    new DrinkBottleModalHiddenField("SipSessionId", Model.Session.Id.ToString()),
                    new DrinkBottleModalHiddenField("BottleId"),
                    new DrinkBottleModalHiddenField("NoteId")
                }
            };

            @await Html.PartialAsync("_DrinkBottleModal", drinkModalOptions)
        }
    </div>
    <script src="/js/sip-session.js"></script>
</body>
</html>
