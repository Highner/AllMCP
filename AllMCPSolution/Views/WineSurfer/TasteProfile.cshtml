@model AllMCPSolution.Controllers.WineSurferTasteProfileViewModel
@using AllMCPSolution.Controllers
@using System.Collections.Generic
@{
    Layout = null;
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = (ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel)
        ?? WineSurferTopBarModel.CreateFromSisterhoodData(
            currentLocation,
            Model.IncomingInvitations,
            Model.SentInvitationNotifications,
            displayName: Model.CurrentUser?.DisplayName,
            isAdmin: Model.CurrentUser?.IsAdmin == true);
    var tasteProfileSummary = Model.TasteProfileSummary ?? string.Empty;
    var summaryMaxLength = Model.SummaryMaxLength;
    var tasteProfile = Model.TasteProfile ?? string.Empty;
    var statusMessage = Model.StatusMessage;
    var errorMessage = Model.ErrorMessage;
    var maxLength = Model.MaxLength;
    var suggestedAppellations = Model.SuggestedAppellations ?? Array.Empty<WineSurferSuggestedAppellation>();
    var hasSuggestedAppellations = suggestedAppellations.Count > 0;
    ViewData["WineSurferPageTitle"] = "Taste Profile";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer â€¢ Taste Profile</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
    <style>
        :root {
            color-scheme: dark;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: hsl(var(--foreground));
            font-family: var(--font-sans);
        }

        .taste-profile-main {
            width: min(900px, 100%);
            margin: 0 auto;
            padding: 64px 24px 96px;
            display: flex;
            flex-direction: column;
            gap: 48px;
        }

        .taste-profile-card {
            display: flex;
            flex-direction: column;
            gap: 32px;
            padding: 40px;
            border-radius: calc(var(--radius) * 1.1);
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--card) / 0.8);
            box-shadow: 0 32px 80px rgba(0, 0, 0, 0.35);
            --taste-profile-success: 142 69% 58%;
            --taste-profile-success-foreground: 142 76% 90%;
        }

        .taste-profile-header {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .taste-profile-title {
            margin: 0;
            font-size: clamp(32px, 5vw, 52px);
            letter-spacing: 12px;
            text-transform: uppercase;
        }

        .taste-profile-description {
            margin: 0;
            max-width: 48ch;
            color: hsla(var(--muted-foreground) / 0.9);
            font-size: 14px;
            letter-spacing: 1px;
            text-transform: uppercase;
        }

        .taste-profile-banner {
            padding: 16px 20px;
            border-radius: calc(var(--radius) * 0.9);
            border: 1px solid transparent;
            font-size: 13px;
            letter-spacing: 1.8px;
            text-transform: uppercase;
        }

        .taste-profile-banner--success {
            background: hsla(var(--taste-profile-success) / 0.2);
            border-color: hsla(var(--taste-profile-success) / 0.55);
            color: hsl(var(--taste-profile-success-foreground));
        }

        .taste-profile-banner--error {
            background: hsla(var(--destructive) / 0.2);
            border-color: hsla(var(--destructive) / 0.65);
            color: hsl(var(--destructive-foreground));
        }

        .taste-profile-form {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .taste-profile-field {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .taste-profile-label {
            font-size: 14px;
            letter-spacing: 2px;
            text-transform: uppercase;
        }

        .taste-profile-textarea {
            width: 100%;
            min-height: 220px;
            padding: 18px 20px;
            border-radius: calc(var(--radius) * 1.05);
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--accent) / 0.2);
            color: inherit;
            resize: vertical;
            line-height: 1.6;
            font-size: 15px;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .taste-profile-textarea:focus {
            outline: none;
            border-color: hsla(var(--ring) / 0.9);
            box-shadow: 0 0 0 3px hsla(var(--ring) / 0.25);
        }

        .taste-profile-input {
            width: 100%;
            padding: 14px 18px;
            border-radius: calc(var(--radius) * 1.05);
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--accent) / 0.2);
            color: inherit;
            font-size: 15px;
            line-height: 1.4;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        .taste-profile-input:focus {
            outline: none;
            border-color: hsla(var(--ring) / 0.9);
            box-shadow: 0 0 0 3px hsla(var(--ring) / 0.25);
        }

        .taste-profile-help-row {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        .taste-profile-help {
            margin: 0;
            font-size: 13px;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .taste-profile-footer {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
            gap: 16px;
        }

        .taste-profile-actions {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 12px;
        }

        .taste-profile-actions .sisterhood-button {
            white-space: nowrap;
        }

        .taste-profile-suggestions {
            display: flex;
            flex-direction: column;
            gap: 16px;
            padding: 24px;
            border-radius: calc(var(--radius) * 0.9);
            border: 1px solid hsla(var(--border) / 0.55);
            background: hsla(var(--accent) / 0.18);
        }

        .taste-profile-suggestions-header {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .taste-profile-suggestions-title {
            margin: 0;
            font-size: 18px;
            letter-spacing: 4px;
            text-transform: uppercase;
        }

        .taste-profile-suggestions-caption {
            margin: 0;
            font-size: 13px;
            color: hsla(var(--muted-foreground) / 0.8);
            letter-spacing: 1.5px;
            text-transform: uppercase;
        }

        .taste-profile-suggestions-list {
            margin: 0;
            padding: 0;
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .taste-profile-suggestion-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
            padding: 12px 16px;
            border-radius: calc(var(--radius) * 0.85);
            border: 1px solid hsla(var(--border) / 0.45);
            background: hsla(var(--accent) / 0.12);
        }

        .taste-profile-suggestion-name {
            font-size: 15px;
            font-weight: 600;
            letter-spacing: 1.6px;
            text-transform: uppercase;
        }

        .taste-profile-suggestion-location {
            font-size: 13px;
            color: hsla(var(--muted-foreground) / 0.85);
            letter-spacing: 1px;
        }

        .taste-profile-suggestions-empty {
            margin: 0;
            font-size: 13px;
            color: hsla(var(--muted-foreground) / 0.85);
            letter-spacing: 1px;
        }

        .taste-profile-generate-button[disabled] {
            cursor: progress;
        }

        .taste-profile-counter {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.9);
        }

        @@media (max-width: 640px) {
            .taste-profile-card {
                padding: 28px;
            }

            .taste-profile-main {
                padding: 48px 18px 72px;
            }

            .taste-profile-suggestions {
                padding: 20px;
            }

            .taste-profile-suggestion-item {
                padding: 10px 14px;
            }

            .taste-profile-help-row {
                flex-direction: column;
                align-items: stretch;
            }

            .taste-profile-footer {
                flex-direction: column;
                align-items: stretch;
                gap: 20px;
            }

            .taste-profile-actions {
                width: 100%;
                flex-direction: column;
                align-items: stretch;
                gap: 16px;
            }

            .taste-profile-actions .sisterhood-button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="taste-profile-main">
            <section class="taste-profile-card" aria-labelledby="tasteProfileHeading">
                <header class="taste-profile-header">
                    <h1 id="tasteProfileHeading" class="taste-profile-title">Taste Profile</h1>
                    <p class="taste-profile-description">Capture the styles, regions, and bottles you love so Wine Surfer can tailor future picks.</p>
                </header>
                @if (!string.IsNullOrWhiteSpace(statusMessage))
                {
                    <div class="taste-profile-banner taste-profile-banner--success" role="status">@statusMessage</div>
                }
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <div class="taste-profile-banner taste-profile-banner--error" role="alert">@errorMessage</div>
                }
                <div id="tasteProfileGeneratorMessage" class="taste-profile-banner" hidden aria-live="polite"></div>
                <section class="taste-profile-suggestions" data-suggested-appellations>
                    <div class="taste-profile-suggestions-header">
                        <h2 class="taste-profile-suggestions-title">Suggested appellations</h2>
                        <p class="taste-profile-suggestions-caption">Based on your taste profile</p>
                    </div>
                    <ol class="taste-profile-suggestions-list" data-suggested-appellations-list>
                        @foreach (var suggestion in suggestedAppellations)
                        {
                            var hasSub = !string.IsNullOrWhiteSpace(suggestion.SubAppellationName);
                            var primary = hasSub ? suggestion.SubAppellationName : suggestion.AppellationName;
                            if (string.IsNullOrWhiteSpace(primary))
                            {
                                continue;
                            }

                            var detailSegments = new List<string>();
                            if (hasSub && !string.IsNullOrWhiteSpace(suggestion.AppellationName))
                            {
                                detailSegments.Add(suggestion.AppellationName);
                            }

                            var regionCountrySegments = new List<string>();
                            if (!string.IsNullOrWhiteSpace(suggestion.RegionName))
                            {
                                regionCountrySegments.Add(suggestion.RegionName);
                            }

                            if (!string.IsNullOrWhiteSpace(suggestion.CountryName))
                            {
                                regionCountrySegments.Add(suggestion.CountryName);
                            }

                            if (regionCountrySegments.Count > 0)
                            {
                                detailSegments.Add(string.Join(", ", regionCountrySegments));
                            }

                            var detail = detailSegments.Count > 0 ? string.Join(" â€¢ ", detailSegments) : null;

                            <li class="taste-profile-suggestion-item">
                                <span class="taste-profile-suggestion-name">@primary</span>
                                @if (!string.IsNullOrWhiteSpace(detail))
                                {
                                    <span class="taste-profile-suggestion-location">@detail</span>
                                }
                            </li>
                        }
                    </ol>
                    <p class="taste-profile-suggestions-empty" data-suggested-appellations-empty @(hasSuggestedAppellations ? "hidden" : null)>
                        Generate your taste profile to see tailored appellation ideas.
                    </p>
                </section>
                <form method="post" action="@Url.Action("UpdateTasteProfile", "WineSurfer")" class="taste-profile-form" novalidate>
                    @Html.AntiForgeryToken()
                    <div class="taste-profile-field">
                        <label class="taste-profile-label" for="tasteProfileSummaryInput">Profile summary</label>
                        <input
                            id="tasteProfileSummaryInput"
                            name="TasteProfileSummary"
                            type="text"
                            class="taste-profile-input"
                            maxlength="@summaryMaxLength"
                            data-max-length="@summaryMaxLength"
                            spellcheck="true"
                            value="@tasteProfileSummary" />
                        <div class="taste-profile-help-row">
                            <p class="taste-profile-help">Share a concise, one-line snapshot of your palateâ€”perfect for recommendations and quick intros.</p>
                            <span class="taste-profile-counter" data-char-count data-for="tasteProfileSummaryInput" data-max-length="@summaryMaxLength">
                                @($"{tasteProfileSummary.Length} / {summaryMaxLength} characters")
                            </span>
                        </div>
                    </div>
                    <div class="taste-profile-field">
                        <label class="taste-profile-label" for="tasteProfileInput">Your taste profile</label>
                        <textarea
                            id="tasteProfileInput"
                            name="TasteProfile"
                            class="taste-profile-textarea"
                            maxlength="@maxLength"
                            data-max-length="@maxLength"
                            spellcheck="true"
                            rows="8">@tasteProfile</textarea>
                        <p class="taste-profile-help">We recommend highlighting grape varieties, favorite producers, and moments you savor. Update it anytime your palate evolves.</p>
                    </div>
                    <div class="taste-profile-footer">
                        <span class="taste-profile-counter" data-char-count data-for="tasteProfileInput" data-max-length="@maxLength">
                            @($"{tasteProfile.Length} / {maxLength} characters")
                        </span>
                        <div class="taste-profile-actions">
                            <button
                                type="button"
                                class="sisterhood-button taste-profile-generate-button"
                                data-generate-taste-profile
                                data-generate-url="@Url.Action("GenerateTasteProfile", "WineSurfer")">
                                Generate profile
                            </button>
                            <button type="submit" class="sisterhood-button">Save profile</button>
                        </div>
                    </div>
                </form>
            </section>
        </main>
    </div>
    <script>
        (function () {
            const counters = document.querySelectorAll('[data-char-count]');
            if (counters && counters.length > 0) {
                counters.forEach((counter) => {
                    const targetId = counter.getAttribute('data-for');
                    if (!targetId) {
                        return;
                    }

                    const field = document.getElementById(targetId);
                    if (!field) {
                        return;
                    }

                    const maxLength = parseInt(counter.dataset.maxLength || field.getAttribute('maxlength') || '0', 10);
                    const formatCount = (value) => `${value} / ${maxLength} characters`;

                    const updateCount = () => {
                        counter.textContent = formatCount(field.value.length);
                    };

                    field.addEventListener('input', updateCount, { passive: true });
                    updateCount();
                });
            }

            const generatorButton = document.querySelector('[data-generate-taste-profile]');
            if (!generatorButton || typeof window.fetch !== 'function') {
                return;
            }

            const generatorUrl = generatorButton.getAttribute('data-generate-url');
            if (!generatorUrl) {
                return;
            }

            const profileField = document.getElementById('tasteProfileInput');
            const summaryField = document.getElementById('tasteProfileSummaryInput');
            if (!profileField || !summaryField) {
                return;
            }

            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            const messageNode = document.getElementById('tasteProfileGeneratorMessage');
            const suggestionsList = document.querySelector('[data-suggested-appellations-list]');
            const suggestionsEmpty = document.querySelector('[data-suggested-appellations-empty]');
            const toText = (value) => (typeof value === 'string' ? value.trim() : '');

            const updateSuggestions = (entries) => {
                if (!suggestionsList || !suggestionsEmpty) {
                    return;
                }

                suggestionsList.innerHTML = '';
                let appended = 0;

                if (Array.isArray(entries)) {
                    const fragment = document.createDocumentFragment();
                    for (const entry of entries) {
                        if (!entry || typeof entry !== 'object') {
                            continue;
                        }

                        const subAppellation = toText(entry.subAppellation);
                        const appellation = toText(entry.appellation);
                        const region = toText(entry.region);
                        const country = toText(entry.country);
                        const primary = subAppellation || appellation;

                        if (!primary) {
                            continue;
                        }

                        const detailSegments = [];

                        if (subAppellation && appellation) {
                            detailSegments.push(appellation);
                        }

                        const regionCountrySegments = [];
                        if (region) {
                            regionCountrySegments.push(region);
                        }
                        if (country) {
                            regionCountrySegments.push(country);
                        }

                        if (regionCountrySegments.length > 0) {
                            detailSegments.push(regionCountrySegments.join(', '));
                        }

                        const item = document.createElement('li');
                        item.className = 'taste-profile-suggestion-item';

                        const nameNode = document.createElement('span');
                        nameNode.className = 'taste-profile-suggestion-name';
                        nameNode.textContent = primary;
                        item.appendChild(nameNode);

                        if (detailSegments.length > 0) {
                            const locationNode = document.createElement('span');
                            locationNode.className = 'taste-profile-suggestion-location';
                            locationNode.textContent = detailSegments.join(' â€¢ ');
                            item.appendChild(locationNode);
                        }

                        fragment.appendChild(item);
                        appended += 1;
                    }

                    suggestionsList.appendChild(fragment);
                }

                suggestionsEmpty.hidden = appended > 0;
            };

            const setGeneratorMessage = (kind, text) => {
                if (!messageNode) {
                    return;
                }

                messageNode.textContent = text || '';
                messageNode.hidden = !text;
                messageNode.classList.remove('taste-profile-banner--success', 'taste-profile-banner--error');

                if (!text) {
                    messageNode.removeAttribute('role');
                    return;
                }

                if (kind === 'success') {
                    messageNode.classList.add('taste-profile-banner--success');
                    messageNode.setAttribute('role', 'status');
                } else if (kind === 'error') {
                    messageNode.classList.add('taste-profile-banner--error');
                    messageNode.setAttribute('role', 'alert');
                } else {
                    messageNode.removeAttribute('role');
                }
            };

            generatorButton.addEventListener('click', async () => {
                if (generatorButton.disabled) {
                    return;
                }

                setGeneratorMessage(null, '');
                const originalLabel = (generatorButton.textContent || '').trim() || 'Generate profile';
                generatorButton.disabled = true;
                generatorButton.textContent = 'Generatingâ€¦';

                try {
                    const headers = { 'Content-Type': 'application/json' };
                    const tokenValue = tokenInput ? tokenInput.value : null;
                    if (tokenValue) {
                        headers['RequestVerificationToken'] = tokenValue;
                    }

                    const response = await fetch(generatorUrl, {
                        method: 'POST',
                        headers,
                        body: JSON.stringify({}),
                        credentials: 'same-origin'
                    });

                    const responseText = await response.text();
                    let payload = null;

                    if (responseText) {
                        try {
                            payload = JSON.parse(responseText);
                        } catch (error) {
                            payload = null;
                        }
                    }

                    if (!response.ok || !payload) {
                        const errorMessage = payload && typeof payload.error === 'string'
                            ? payload.error
                            : 'We couldnâ€™t generate a taste profile right now. Please try again.';
                        setGeneratorMessage('error', errorMessage);
                        return;
                    }

                    if (typeof payload.summary === 'string') {
                        summaryField.value = payload.summary;
                        summaryField.dispatchEvent(new Event('input', { bubbles: true }));
                    }

                    if (typeof payload.profile === 'string') {
                        profileField.value = payload.profile;
                        profileField.dispatchEvent(new Event('input', { bubbles: true }));
                    }

                    if (Array.isArray(payload.suggestions)) {
                        updateSuggestions(payload.suggestions);
                    }

                    setGeneratorMessage('success', 'We generated a new taste profile. Review and save it when youâ€™re ready.');
                } catch (error) {
                    setGeneratorMessage('error', 'We couldnâ€™t generate a taste profile right now. Please try again.');
                } finally {
                    generatorButton.disabled = false;
                    generatorButton.textContent = originalLabel;
                }
            });
        })();
    </script>
</body>
</html>
