@model AllMCPSolution.Controllers.WineSurferSipSessionDetailViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Html
@{
    Layout = null;
    var statusMessage = TempData["SisterhoodStatus"] as string;
    var errorMessage = TempData["SisterhoodError"] as string;
}

@functions {
    private static DateTime NormalizeDateTime(DateTime value)
    {
        return value.Kind switch
        {
            DateTimeKind.Utc => value.ToLocalTime(),
            DateTimeKind.Unspecified => DateTime.SpecifyKind(value, DateTimeKind.Local),
            _ => value
        };
    }

    private static DateTime? NormalizeDateTime(DateTime? value)
    {
        return value.HasValue ? NormalizeDateTime(value.Value) : (DateTime?)null;
    }

    private static string FormatSipSessionSchedule(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("f");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("D") ?? "Schedule TBD";
    }

    private static string FormatSipSessionDateValue(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("yyyy-MM-dd");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("yyyy-MM-dd") ?? string.Empty;
    }

    private static string FormatSipSessionTimeValue(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        return localDateTime.HasValue ? localDateTime.Value.ToString("HH:mm") : string.Empty;
    }

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer Â· Sip Session</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <script defer src="/js/pwa.js"></script>
    <style>
        :root {
            color-scheme: dark;
            --wine-surfer-card-max-width: 960px;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .wine-surfer-card {
            width: min(100%, var(--wine-surfer-card-max-width));
            max-width: var(--wine-surfer-card-max-width);
        }

        .page-content {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .session-main {
            width: min(var(--wine-surfer-card-max-width), 100%);
            margin: 0 auto;
            padding: 120px 32px 96px;
            display: flex;
            flex-direction: column;
            gap: 48px;
            --session-content-max-width: min(var(--wine-surfer-card-max-width), 100%);
        }

        .session-feedback {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
    </style>
</head>
@{ 
    var bodyClass = Model.CurrentUser is null ? "requires-auth" : "is-authenticated";
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = (ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel)
        ?? WineSurferTopBarModel.CreateFromSisterhoodData(
            currentLocation,
            Model.IncomingInvitations,
            Model.SentInvitationNotifications,
            displayName: Model.CurrentUser?.DisplayName,
            isAdmin: Model.CurrentUser?.IsAdmin == true);
    var isCreateMode = Model.IsCreateMode;
    var manageableSisterhoods = Model.ManageableSisterhoods ?? Array.Empty<WineSurferSisterhoodOption>();
    var hasManageableSisterhoods = manageableSisterhoods.Count > 0;
    var sisterhoodName = isCreateMode
        ? (manageableSisterhoods.Count == 1 ? manageableSisterhoods[0].Name : "Select a sisterhood")
        : (string.IsNullOrWhiteSpace(Model.SisterhoodName) ? "Sisterhood" : Model.SisterhoodName);
    var scheduleLabel = isCreateMode
        ? "Schedule TBD"
        : FormatSipSessionSchedule(Model.Session);
    var locationLabel = isCreateMode || string.IsNullOrWhiteSpace(Model.Session.Location)
        ? "Location TBD"
        : Model.Session.Location;
    var sessionTitle = isCreateMode
        ? "Plan a new sip session"
        : (string.IsNullOrWhiteSpace(Model.Session.Name) ? "Sip Session" : Model.Session.Name.Trim());
    var sessionBottles = Model.Session.Bottles ?? Array.Empty<WineSurferSipSessionBottle>();
    var sessionBottleIds = new HashSet<Guid>(sessionBottles.Select(bottle => bottle.Id));
    var availableBottles = Model.AvailableBottles ?? Array.Empty<WineSurferSipSessionBottle>();
    var contributableBottleCount = availableBottles.Count(bottle => !sessionBottleIds.Contains(bottle.Id));
    var hasContributableBottles = contributableBottleCount > 0;
    var showContributeButton = !isCreateMode && Model.CurrentUser is not null;
    var foodSuggestions = Model.FoodSuggestions ?? Array.Empty<string>();
    var hasFoodSuggestions = foodSuggestions.Count > 0;
    var foodSuggestionError = string.IsNullOrWhiteSpace(Model.FoodSuggestionError) ? null : Model.FoodSuggestionError!.Trim();
    var cheeseSuggestion = string.IsNullOrWhiteSpace(Model.CheeseSuggestion) ? null : Model.CheeseSuggestion!.Trim();
    var hasCheeseSuggestion = !string.IsNullOrEmpty(cheeseSuggestion);
    var hasPairingContent = hasFoodSuggestions || hasCheeseSuggestion;
    var suggestFoodAction = !isCreateMode ? Url.Action("SuggestFood", "SipSession", new { sipSessionId = Model.Session.Id }) : null;
    var canShowFoodButton = !isCreateMode && !string.IsNullOrEmpty(suggestFoodAction);
    var canRequestFoodSuggestions = canShowFoodButton && sessionBottles.Count > 0;
    var showBottleActions = !isCreateMode && (canShowFoodButton || showContributeButton);
    const string contributeModalId = "sip-session-contribute-modal";
    var contributeModalTitleId = $"{contributeModalId}-title";
    ViewData["WineSurferPageTitle"] = sessionTitle;
}
<body class="wine-app session-page @bodyClass">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="session-main">
            @if (!string.IsNullOrWhiteSpace(statusMessage) || !string.IsNullOrWhiteSpace(errorMessage))
            {
                <section class="session-feedback" aria-live="polite">
                    @if (!string.IsNullOrWhiteSpace(statusMessage))
                    {
                        <div class="status-banner success" role="status">@statusMessage</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <div class="status-banner error" role="alert">@errorMessage</div>
                    }
                </section>
            }
            <!-- Keep the remaining markup identical to the original SipSession.cshtml for consistency -->
            @await Html.PartialAsync("~/Views/WineSurfer/SipSession.cshtml", Model)
        </main>
    </div>
    <script defer src="/js/sip-session.js"></script>
</body>
</html>