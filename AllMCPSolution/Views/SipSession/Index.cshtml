@model AllMCPSolution.Controllers.WineSurferSipSessionDetailViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Html
@{
    Layout = null;
    var statusMessage = TempData["SisterhoodStatus"] as string;
    var errorMessage = TempData["SisterhoodError"] as string;
}

@functions {
    private static DateTime NormalizeDateTime(DateTime value)
    {
        return value.Kind switch
        {
            DateTimeKind.Utc => value.ToLocalTime(),
            DateTimeKind.Unspecified => DateTime.SpecifyKind(value, DateTimeKind.Local),
            _ => value
        };
    }

    private static DateTime? NormalizeDateTime(DateTime? value)
    {
        return value.HasValue ? NormalizeDateTime(value.Value) : (DateTime?)null;
    }

    private static string FormatSipSessionSchedule(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("f");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("D") ?? "Schedule TBD";
    }

    private static string FormatSipSessionDateValue(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("yyyy-MM-dd");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("yyyy-MM-dd") ?? string.Empty;
    }

    private static string FormatSipSessionTimeValue(WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        return localDateTime.HasValue ? localDateTime.Value.ToString("HH:mm") : string.Empty;
    }

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer Â· Sip Session</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
    <script defer src="/js/pwa.js"></script>
    <style>
        :root {
            color-scheme: dark;
            --wine-surfer-card-max-width: 1100px;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: hsl(var(--foreground));
            font-family: var(--font-sans, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
            display: flex;
            flex-direction: column;
        }

        .page-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .session-main {
            flex: 1;
            width: 100%;
            display: flex;
            justify-content: center;
            padding: 120px 20px 96px;
        }

        .session-container {
            width: min(100%, var(--wine-surfer-card-max-width));
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .session-card {
            background: hsla(var(--card) / 0.9);
            border: 1px solid hsla(var(--border) / 0.45);
            border-radius: 28px;
            padding: clamp(24px, 3vw, 42px);
            box-shadow: 0 30px 60px -45px rgba(0, 0, 0, 0.9);
        }

        .session-feedback {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .status-banner {
            padding: 16px 20px;
            border-radius: 18px;
            font-weight: 600;
            letter-spacing: 0.12em;
            text-transform: uppercase;
            text-align: center;
        }

        .status-banner.success {
            background: hsla(var(--accent) / 0.4);
            border: 1px solid hsla(var(--border) / 0.35);
        }

        .status-banner.error {
            background: hsla(var(--destructive) / 0.2);
            border: 1px solid hsla(var(--destructive) / 0.4);
        }

        .session-overview {
            display: flex;
            flex-direction: column;
            gap: 32px;
        }

        .session-overview-header {
            display: flex;
            flex-direction: column;
            gap: 16px;
            align-items: flex-start;
        }

        @@media (min-width: 768px) {
            .session-overview-header {
                flex-direction: row;
                justify-content: space-between;
                align-items: flex-end;
            }
        }

        .session-overview-header-info {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .session-kicker {
            margin: 0;
            font-size: 0.75rem;
            letter-spacing: 0.32em;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .session-title {
            margin: 0;
            font-size: clamp(2.5rem, 4vw, 3.75rem);
            text-transform: uppercase;
            letter-spacing: 0.14em;
            line-height: 1;
        }

        .session-overview-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            justify-content: flex-start;
        }

        .session-overview-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 16px;
        }

        .session-summary-card {
            background: hsla(var(--accent) / 0.2);
            border: 1px solid hsla(var(--border) / 0.35);
            border-radius: 22px;
            padding: 20px 24px;
        }

        .session-summary-content {
            display: grid;
            gap: 16px;
        }

        .session-meta {
            display: flex;
            flex-direction: column;
            gap: 4px;
            margin: 0;
        }

        .session-meta-label {
            font-size: 0.7rem;
            letter-spacing: 0.28em;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .session-meta-value {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .session-content {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .session-grid {
            display: grid;
            gap: 24px;
            grid-template-columns: minmax(0, 1fr);
        }

        @@media (min-width: 1040px) {
            .session-grid {
                grid-template-columns: minmax(0, 1.75fr) minmax(0, 1fr);
            }
        }

        .session-bottles,
        .session-sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .section-title {
            margin: 0;
            font-size: 1.5rem;
            letter-spacing: 0.18em;
            text-transform: uppercase;
        }

        .section-subtitle {
            margin: 0 0 8px;
            font-size: 0.95rem;
            letter-spacing: 0.16em;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.9);
        }

        .empty-state {
            margin: 0;
            padding: 18px 20px;
            border-radius: 18px;
            border: 1px dashed hsla(var(--border) / 0.4);
            background: hsla(var(--accent) / 0.14);
            text-align: center;
            letter-spacing: 0.08em;
        }

        .bottle-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 20px;
            padding: 0;
            margin: 0;
        }

        .bottle-item {
            border-radius: 22px;
            border: 1px solid hsla(var(--border) / 0.35);
            background: hsla(var(--background) / 0.7);
            overflow: hidden;
        }

        .bottle-card {
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .bottle-header {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        @@media (min-width: 640px) {
            .bottle-header {
                flex-direction: row;
                justify-content: space-between;
                align-items: flex-start;
            }
        }

        .bottle-title {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .bottle-name {
            font-size: 1.35rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
        }

        .bottle-vintage {
            font-size: 0.95rem;
            letter-spacing: 0.2em;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.85);
        }

        .bottle-meta {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .bottle-meta-label {
            display: block;
            font-size: 0.65rem;
            letter-spacing: 0.32em;
            text-transform: uppercase;
            color: hsla(var(--muted-foreground) / 0.7);
        }

        .bottle-meta-value {
            font-weight: 600;
            font-size: 1.05rem;
        }

        .bottle-actions {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        @@media (min-width: 720px) {
            .bottle-actions {
                flex-direction: row;
                justify-content: space-between;
            }
        }

        .bottle-rate {
            display: flex;
            flex-direction: column;
            gap: 12px;
            width: 100%;
        }

        .rating-form {
            display: grid;
            gap: 8px;
        }

        .rating-form label {
            font-size: 0.75rem;
            letter-spacing: 0.16em;
            text-transform: uppercase;
        }

        .rating-form input,
        .rating-form textarea,
        .rating-form button {
            width: 100%;
        }

        .bottle-secondary-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .pairing-form {
            display: flex;
            justify-content: flex-start;
        }

        .pairing-suggestions,
        .cheese-suggestion {
            background: hsla(var(--accent) / 0.12);
            border: 1px solid hsla(var(--border) / 0.25);
            border-radius: 18px;
            padding: 18px 20px;
        }

        .suggestion-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 0;
            padding: 0;
        }

        .suggestion-item {
            letter-spacing: 0.06em;
        }

        .error-banner {
            padding: 16px 18px;
            border-radius: 18px;
            border: 1px solid hsla(var(--destructive) / 0.4);
            background: hsla(var(--destructive) / 0.16);
        }

        .session-edit {
            width: 100%;
        }

        .session-edit__summary {
            width: 100%;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            list-style: none;
        }

        .session-edit__summary::marker,
        .session-edit__summary::-webkit-details-marker {
            display: none;
        }

        .session-edit__panel {
            margin-top: 16px;
            padding: 24px;
            border-radius: 20px;
            background: hsla(var(--background) / 0.85);
            border: 1px solid hsla(var(--border) / 0.35);
        }

        .session-edit__form {
            display: grid;
            gap: 14px;
        }

        .session-edit__form input,
        .session-edit__form textarea,
        .session-edit__form select,
        .session-edit__form button {
            width: 100%;
        }

        .session-edit__actions {
            display: flex;
            justify-content: flex-end;
        }
    </style>
</head>
@{ 
    var bodyClass = Model.CurrentUser is null ? "requires-auth" : "is-authenticated";
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = (ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel)
        ?? WineSurferTopBarModel.CreateFromSisterhoodData(
            currentLocation,
            Model.IncomingInvitations,
            Model.SentInvitationNotifications,
            displayName: Model.CurrentUser?.DisplayName,
            isAdmin: Model.CurrentUser?.IsAdmin == true);
    var isCreateMode = Model.IsCreateMode;
    var canManageSession = Model.CanManageSession;
    var isSisterhoodMember = Model.IsSisterhoodMember;
    var manageableSisterhoods = Model.ManageableSisterhoods ?? Array.Empty<WineSurferSisterhoodOption>();
    var hasManageableSisterhoods = manageableSisterhoods.Count > 0;
    var sisterhoodName = isCreateMode
        ? (manageableSisterhoods.Count == 1 ? manageableSisterhoods[0].Name : "Select a sisterhood")
        : (string.IsNullOrWhiteSpace(Model.SisterhoodName) ? "Sisterhood" : Model.SisterhoodName);
    var scheduleLabel = isCreateMode
        ? "Schedule TBD"
        : FormatSipSessionSchedule(Model.Session);
    var locationLabel = isCreateMode || string.IsNullOrWhiteSpace(Model.Session.Location)
        ? "Location TBD"
        : Model.Session.Location;
    var sessionTitle = isCreateMode
        ? "Plan a new sip session"
        : (string.IsNullOrWhiteSpace(Model.Session.Name) ? "Sip Session" : Model.Session.Name.Trim());
    var sessionBottles = Model.Session.Bottles ?? Array.Empty<WineSurferSipSessionBottle>();
    var sessionBottleIds = new HashSet<Guid>(sessionBottles.Select(bottle => bottle.Id));
    var availableBottles = Model.AvailableBottles ?? Array.Empty<WineSurferSipSessionBottle>();
    var contributableBottleCount = availableBottles.Count(bottle => !sessionBottleIds.Contains(bottle.Id));
    var hasContributableBottles = contributableBottleCount > 0;
    var showContributeButton = !isCreateMode && isSisterhoodMember;
    var foodSuggestions = Model.FoodSuggestions ?? Array.Empty<string>();
    var hasFoodSuggestions = foodSuggestions.Count > 0;
    var foodSuggestionError = string.IsNullOrWhiteSpace(Model.FoodSuggestionError) ? null : Model.FoodSuggestionError!.Trim();
    var cheeseSuggestion = string.IsNullOrWhiteSpace(Model.CheeseSuggestion) ? null : Model.CheeseSuggestion!.Trim();
    var hasCheeseSuggestion = !string.IsNullOrEmpty(cheeseSuggestion);
    var hasPairingContent = hasFoodSuggestions || hasCheeseSuggestion;
    var suggestFoodAction = !isCreateMode ? Url.Action("SuggestFood", "SipSession", new { sipSessionId = Model.Session.Id }) : null;
    var canShowFoodButton = !isCreateMode && canManageSession && !string.IsNullOrEmpty(suggestFoodAction);
    var canRequestFoodSuggestions = canShowFoodButton && sessionBottles.Count > 0;
    var showBottleActions = !isCreateMode && (canShowFoodButton || showContributeButton);
    const string contributeModalId = "sip-session-contribute-modal";
    var contributeModalTitleId = $"{contributeModalId}-title";
    ViewData["WineSurferPageTitle"] = sessionTitle;
}
<body class="wine-app session-page @bodyClass">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main class="session-main">
            <div class="session-container">
                @if (!string.IsNullOrWhiteSpace(statusMessage) || !string.IsNullOrWhiteSpace(errorMessage))
                {
                    <section class="session-card session-feedback" aria-live="polite">
                        @if (!string.IsNullOrWhiteSpace(statusMessage))
                        {
                            <div class="status-banner success" role="status">@statusMessage</div>
                        }
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <div class="status-banner error" role="alert">@errorMessage</div>
                        }
                    </section>
                }
                <section class="session-card session-overview" aria-label="Sip session details">
                <div class="session-overview-header">
                    <div class="session-overview-header-info">
                        <p class="session-kicker">@sisterhoodName</p>
                        <h1 class="session-title">@sessionTitle</h1>
                    </div>
                    @if (isCreateMode)
                    {
                        var scheduledDateValue = FormatSipSessionDateValue(Model.Session);
                        var scheduledTimeValue = FormatSipSessionTimeValue(Model.Session);
                        const string createNameId = "sip-session-create-name";
                        const string createScheduleDateId = "sip-session-create-schedule-date";
                        const string createScheduleTimeId = "sip-session-create-schedule-time";
                        const string createLocationId = "sip-session-create-location";
                        const string createDescriptionId = "sip-session-create-description";
                        const string createSisterhoodId = "sip-session-create-sisterhood";
                        <div class="session-overview-actions">
                            @if (hasManageableSisterhoods)
                            {
                                <button type="button"
                                        class="sisterhood-button"
                                        data-sip-session-create-toggle
                                        data-close-label="Cancel"
                                        data-open-on-load="true"
                                        aria-expanded="false"
                                        aria-controls="sip-session-edit-modal">
                                    Plan sip session
                                </button>
                            }
                            else
                            {
                                <button type="button"
                                        class="sisterhood-button"
                                        data-sip-session-create-toggle
                                        aria-expanded="false"
                                        aria-controls="sip-session-edit-modal"
                                        disabled>
                                    Plan sip session
                                </button>
                            }
                        </div>
                        <div class="sip-session-edit-region" data-sip-session-create-region hidden>
                            <template data-sip-session-create-template>
                                <form method="post"
                                      action="@Url.Action("CreateSipSession", "WineSurfer")"
                                      class="sip-session-form"
                                      data-sip-session-edit-form>
                                    @Html.AntiForgeryToken()
                                    <label for="@createSisterhoodId">Sisterhood</label>
                                    <select id="@createSisterhoodId"
                                            name="SisterhoodId"
                                            required
                                            @(hasManageableSisterhoods ? null : "disabled")>
                                        <option value="" @(Model.SisterhoodId == Guid.Empty ? "selected" : null)>Select a sisterhood</option>
                                        @foreach (var option in manageableSisterhoods)
                                        {
                                            <option value="@option.Id" @(Model.SisterhoodId == option.Id ? "selected" : null)>@option.Name</option>
                                        }
                                    </select>
                                    <label for="@createNameId">Name (optional)</label>
                                    <input type="text" id="@createNameId" name="Name" value="@Model.Session.Name" placeholder="e.g., Summer Reds Tasting"/>
                                    <label for="@createScheduleDateId">Date (optional)</label>
                                    <input type="date" id="@createScheduleDateId" name="ScheduledDate" value="@scheduledDateValue"/>
                                    <label for="@createScheduleTimeId">Time (optional)</label>
                                    <input type="time" id="@createScheduleTimeId" name="ScheduledTime" value="@scheduledTimeValue"/>
                                    <label for="@createLocationId">Location (optional)</label>
                                    <input type="text" id="@createLocationId" name="Location" value="@Model.Session.Location" placeholder="e.g., Patio, John's House" />
                                    <label for="@createDescriptionId">Description (optional)</label>
                                    <textarea id="@createDescriptionId" name="Description" rows="4" placeholder="Describe the theme or notes for this session...">@Model.Session.Description</textarea>
                                    <div class="form-actions">
                                        <button type="submit" class="sisterhood-button">
                                            Create
                                        </button>
                                    </div>
                                </form>
                            </template>
                            <div id="sip-session-edit-modal" class="sip-session-edit-modal" role="dialog" aria-labelledby="sip-session-edit-modal-title" aria-modal="true" hidden>
                                <div class="sip-session-edit-modal__header">
                                    <h2 id="sip-session-edit-modal-title" class="sip-session-edit-modal__title">Plan sip session</h2>
                                    <button type="button"
                                            class="sip-session-edit-modal__close"
                                            aria-label="Close"
                                            data-sip-session-create-toggle>
                                        <span aria-hidden="true">Ã</span>
                                    </button>
                                </div>
                                <div class="sip-session-edit-modal__content">
                                    <div class="sip-session-edit-modal__column">
                                        <p class="session-meta">Choose a sisterhood to host the session.</p>
                                        <div class="session-form-control">
                                            <label for="@createSisterhoodId">Sisterhood</label>
                                            <select id="@createSisterhoodId"
                                                    name="SisterhoodId"
                                                    required
                                                    @(hasManageableSisterhoods ? null : "disabled")>
                                                <option value="" @(Model.SisterhoodId == Guid.Empty ? "selected" : null)>Select a sisterhood</option>
                                                @foreach (var option in manageableSisterhoods)
                                                {
                                                    <option value="@option.Id" @(Model.SisterhoodId == option.Id ? "selected" : null)>@option.Name</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="session-form-control">
                                            <label for="@createNameId">Name (optional)</label>
                                            <input type="text" id="@createNameId" name="Name" value="@Model.Session.Name" placeholder="e.g., Summer Reds Tasting"/>
                                        </div>
                                        <div class="session-form-control">
                                            <label for="@createScheduleDateId">Date (optional)</label>
                                            <input type="date" id="@createScheduleDateId" name="ScheduledDate" value="@scheduledDateValue"/>
                                        </div>
                                        <div class="session-form-control">
                                            <label for="@createScheduleTimeId">Time (optional)</label>
                                            <input type="time" id="@createScheduleTimeId" name="ScheduledTime" value="@scheduledTimeValue"/>
                                        </div>
                                        <div class="session-form-control">
                                            <label for="@createLocationId">Location (optional)</label>
                                            <input type="text" id="@createLocationId" name="Location" value="@Model.Session.Location" placeholder="e.g., Patio, John's House" />
                                        </div>
                                        <div class="session-form-control">
                                            <label for="@createDescriptionId">Description (optional)</label>
                                            <textarea id="@createDescriptionId" name="Description" rows="4" placeholder="Describe the theme or notes for this session...">@Model.Session.Description</textarea>
                                        </div>
                                        <div class="form-actions">
                                            <button type="submit" class="sisterhood-button">
                                                Create
                                            </button>
                                        </div>
                                    </div>
                                    <div class="sip-session-edit-modal__column">
                                        <h3 class="section-title">About Sessions</h3>
                                        <p class="session-meta">A sip session is a friendly wine tasting with your Sisterhood. Invite members, bring bottles, and compare notes.</p>
                                        <ul class="session-meta">
                                            <li>Give the session a name like "Summer Reds Tasting".</li>
                                            <li>Optionally schedule a date/time and location.</li>
                                            <li>Members can contribute bottles ahead of time.</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="session-overview-actions">
                            @if (canManageSession)
                            {
                                var editDateValue = FormatSipSessionDateValue(Model.Session);
                                var editTimeValue = FormatSipSessionTimeValue(Model.Session);
                                var editNameId = $"sip-session-edit-name-{Model.Session.Id:N}";
                                var editDateId = $"sip-session-edit-date-{Model.Session.Id:N}";
                                var editTimeId = $"sip-session-edit-time-{Model.Session.Id:N}";
                                var editLocationId = $"sip-session-edit-location-{Model.Session.Id:N}";
                                var editDescriptionId = $"sip-session-edit-description-{Model.Session.Id:N}";
                                var editDetailsId = $"sip-session-edit-panel-{Model.Session.Id:N}";
                                var updateAction = Url.Action("UpdateSipSession", "WineSurfer");
                                <details class="session-edit" data-session-edit>
                                    <summary class="sisterhood-button session-edit__summary" role="button" aria-controls="@editDetailsId">
                                        Edit session
                                    </summary>
                                    <div id="@editDetailsId" class="session-edit__panel">
                                        <form method="post" action="@updateAction" class="session-edit__form">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                            <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                            <input type="hidden" name="ReturnUrl" value="@currentLocation" />
                                            <label for="@editNameId">Session name</label>
                                            <input id="@editNameId"
                                                   name="Name"
                                                   type="text"
                                                   maxlength="256"
                                                   value="@(Model.Session.Name ?? string.Empty)"
                                                   required />
                                            <label for="@editDateId">Date</label>
                                            <input id="@editDateId"
                                                   name="ScheduledDate"
                                                   type="date"
                                                   value="@editDateValue" />
                                            <label for="@editTimeId">Time (optional)</label>
                                            <input id="@editTimeId"
                                                   name="ScheduledTime"
                                                   type="time"
                                                   value="@editTimeValue" />
                                            <label for="@editLocationId">Location (optional)</label>
                                            <input id="@editLocationId"
                                                   name="Location"
                                                   type="text"
                                                   maxlength="256"
                                                   value="@(Model.Session.Location ?? string.Empty)" />
                                            <label for="@editDescriptionId">Description (optional)</label>
                                            <textarea id="@editDescriptionId"
                                                      name="Description"
                                                      rows="4"
                                                      maxlength="2048">@(Model.Session.Description ?? string.Empty)</textarea>
                                            <div class="session-edit__actions">
                                                <button type="submit" class="sisterhood-button">Save changes</button>
                                            </div>
                                        </form>
                                    </div>
                                </details>
                            }
                            @if (showContributeButton)
                            {
                                <button type="button" class="sisterhood-button" data-open-contribute-modal aria-controls="@contributeModalId" aria-expanded="false">
                                    Contribute bottles
                                </button>
                            }
                        </div>
                    }
                </div>
                <div class="session-overview-summary">
                    <div class="session-summary-card">
                        <div class="session-summary-content">
                            <div class="session-meta">
                                <span class="session-meta-label">Schedule</span>
                                <span class="session-meta-value">@scheduleLabel</span>
                            </div>
                            <div class="session-meta">
                                <span class="session-meta-label">Location</span>
                                <span class="session-meta-value">@locationLabel</span>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <section class="session-content" aria-label="Session content">
                    <div class="session-grid">
                        <div class="session-card session-bottles" aria-labelledby="session-bottles-title">
                            <h2 id="session-bottles-title" class="section-title">Bottles</h2>
                            @if (sessionBottles.Count == 0)
                            {
                                <p class="empty-state">No bottles added yet.</p>
                            }
                            else
                            {
                                <ul class="bottle-list">
                                    @foreach (var bottle in sessionBottles)
                                    {
                                        var bottleId = $"bottle-{bottle.Id}";
                                        var scoreId = $"bottle-score-{bottle.Id}";
                                        var commentId = $"bottle-comment-{bottle.Id}";
                                        var ratingFormId = $"rate-{bottle.Id}";
                                        var revealFormId = $"reveal-{bottle.Id}";
                                        var drinkFormId = $"drink-{bottle.Id}";
                                        var removeFormId = $"remove-{bottle.Id}";
                                        var deleteNoteFormId = $"delete-note-{bottle.Id}";
                                        var revealAction = Url.Action("RevealSipSessionBottle", "WineSurfer");
                                        var drinkAction = Url.Action("DrinkSipSessionBottle", "WineSurfer");
                                        var rateAction = Url.Action("RateSipSessionBottle", "WineSurfer");
                                        var removeAction = Url.Action("RemoveSipSessionBottle", "WineSurfer");
                                        var deleteNoteAction = Url.Action("DeleteSipSessionBottleNote", "WineSurfer");
                                        var userScore = bottle.CurrentUserScore.HasValue ? bottle.CurrentUserScore.Value.ToString("0.0") : string.Empty;
                                        <li id="@bottleId" class="bottle-item @(bottle.IsRevealed ? "revealed" : "masked")" data-bottle-id="@bottle.Id">
                                            <div class="bottle-card">
                                                <div class="bottle-content">
                                                    <div class="bottle-header">
                                                        <div class="bottle-title">
                                                            <a class="bottle-name" href="@Url.Action("GetBottle", "WineInventory", new { id = bottle.Id })">
                                                                @if (bottle.IsRevealed)
                                                                {
                                                                    @bottle.Label
                                                                }
                                                                else
                                                                {
                                                                    @("Mystery Bottle")
                                                                }
                                                            </a>
                                                            @if (bottle.IsRevealed && bottle.Vintage.HasValue)
                                                            {
                                                                <span class="bottle-vintage">@bottle.Vintage.Value</span>
                                                            }
                                                        </div>
                                                        <div class="bottle-meta">
                                                            @if (bottle.IsRevealed)
                                                            {
                                                                <span class="bottle-meta-field">
                                                                    <span class="bottle-meta-label">Average score</span>
                                                                    <span class="bottle-meta-value">@string.Format("{0:0.0}", bottle.SisterhoodAverageScore)</span>
                                                                </span>
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="bottle-actions">
                                                        <div class="bottle-rate">
                                                            <form id="@ratingFormId" method="post" action="@rateAction" class="rating-form">
                                                                @Html.AntiForgeryToken()
                                                                <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                                                <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                                                <input type="hidden" name="BottleId" value="@bottle.Id" />
                                                                <label for="@scoreId">Your score</label>
                                                                <input id="@scoreId" type="number" step="0.1" min="0" max="10" name="Score" value="@userScore" placeholder="e.g., 8.5" />
                                                                <label for="@commentId">Comment (optional)</label>
                                                                <input id="@commentId" type="text" name="Comment" placeholder="Add a note..." value="@bottle.CurrentUserNote" />
                                                                <button type="submit" class="sisterhood-button">Save</button>
                                                            </form>
                                                        </div>
                                                        <div class="bottle-secondary-actions">
                                                            @if (!bottle.IsRevealed && bottle.IsOwnedByCurrentUser)
                                                            {
                                                                <form id="@revealFormId" method="post" action="@revealAction" class="reveal-form">
                                                                    @Html.AntiForgeryToken()
                                                                    <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                                                    <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                                                    <input type="hidden" name="BottleId" value="@bottle.Id" />
                                                                    <button type="submit" class="sisterhood-button">Reveal</button>
                                                                </form>
                                                            }
                                                            <form id="@drinkFormId" method="post" action="@drinkAction" class="drink-form">
                                                                @Html.AntiForgeryToken()
                                                                <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                                                <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                                                <input type="hidden" name="BottleId" value="@bottle.Id" />
                                                                <button type="submit" class="sisterhood-button">Drink</button>
                                                            </form>
                                                            @if (bottle.IsOwnedByCurrentUser)
                                                            {
                                                                <form id="@removeFormId" method="post" action="@removeAction" class="remove-form">
                                                                    @Html.AntiForgeryToken()
                                                                    <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                                                    <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                                                    <input type="hidden" name="BottleId" value="@bottle.Id" />
                                                                    <input type="hidden" name="ReturnUrl" value="@currentLocation" />
                                                                    <button type="submit" class="sisterhood-button">Remove</button>
                                                                </form>
                                                            }
                                                            @if (bottle.CurrentUserNoteId.HasValue)
                                                            {
                                                                <form id="@deleteNoteFormId" method="post" action="@deleteNoteAction" class="delete-note-form">
                                                                    @Html.AntiForgeryToken()
                                                                    <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                                                    <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                                                    <input type="hidden" name="TastingNoteId" value="@bottle.CurrentUserNoteId.Value" />
                                                                    <button type="submit" class="sisterhood-button">Delete note</button>
                                                                </form>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                        <aside class="session-card session-sidebar" aria-labelledby="session-sidebar-title">
                            <h2 id="session-sidebar-title" class="section-title">Pairing ideas</h2>
                            @if (canShowFoodButton && !string.IsNullOrEmpty(suggestFoodAction))
                            {
                                <form method="post" action="@suggestFoodAction" class="pairing-form" data-suggest-food-form>
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="sisterhood-button" data-suggest-food-button @(canRequestFoodSuggestions ? null : "disabled")>Suggest food</button>
                                </form>
                            }
                            @if (hasPairingContent)
                            {
                                @if (hasFoodSuggestions)
                                {
                                    <section class="pairing-suggestions" aria-label="Food suggestions">
                                        <ul class="suggestion-list">
                                            @foreach (var suggestion in foodSuggestions)
                                            {
                                                <li class="suggestion-item">@suggestion</li>
                                            }
                                        </ul>
                                    </section>
                                }
                                @if (hasCheeseSuggestion)
                                {
                                    <section class="cheese-suggestion" aria-label="Cheese suggestion">
                                        <h3 class="section-subtitle">Cheese to bring</h3>
                                        <p>@cheeseSuggestion</p>
                                    </section>
                                }
                            }
                            else if (!string.IsNullOrEmpty(foodSuggestionError))
                            {
                                <div class="error-banner" role="alert">@foodSuggestionError</div>
                            }
                        </aside>
                    </div>
                </section>

            @if (showContributeButton)
            {
                var contributeModalTitle = "Contribute bottles";
                <div id="@contributeModalId" class="contribute-modal" role="dialog" aria-modal="true" aria-labelledby="@contributeModalTitleId" hidden>
                    <div class="contribute-modal__header">
                        <h2 id="@contributeModalTitleId" class="contribute-modal__title">@contributeModalTitle</h2>
                        <button type="button" class="contribute-modal__close" data-close-contribute-modal aria-label="Close">
                            <span aria-hidden="true">Ã</span>
                        </button>
                    </div>
                    <div class="contribute-modal__content">
                        <p class="session-meta">Select bottles to contribute to this session.</p>
                        @if (!hasContributableBottles)
                        {
                            <p class="empty-state">You have no additional bottles to contribute.</p>
                        }
                        else
                        {
                            <form method="post" action="@Url.Action("ContributeSipSessionBottles", "WineSurfer")" class="contribute-form">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SisterhoodId" value="@Model.SisterhoodId" />
                                <input type="hidden" name="SipSessionId" value="@Model.Session.Id" />
                                <div class="contribute-list" role="group" aria-label="Your bottles">
                                    @foreach (var candidate in availableBottles)
                                    {
                                        if (sessionBottleIds.Contains(candidate.Id)) { continue; }
                                        var checkboxId = $"contrib-{candidate.Id}";
                                        <div class="contribute-item">
                                            <input type="checkbox" id="@checkboxId" name="BottleIds" value="@candidate.Id" />
                                            <label for="@checkboxId">
                                                <span class="bottle-inline-name">@candidate.Label</span>
                                                <span class="bottle-inline-meta">@candidate.WineName</span>
                                            </label>
                                        </div>
                                    }
                                </div>
                                <div class="form-actions">
                                    <button type="submit" class="sisterhood-button">Contribute</button>
                                </div>
                            </form>
                        }
                    </div>
                </div>
            }
            </div>
        </main>
    </div>
    <script defer src="/js/sip-session.js"></script>
</body>
</html>
