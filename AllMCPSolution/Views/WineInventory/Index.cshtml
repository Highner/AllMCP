@model AllMCPSolution.Controllers.WineInventoryViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Generic
@using System.Linq
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    string BuildSortUrl(string field)
    {
        var nextDir = string.Equals(Model.SortField, field, StringComparison.OrdinalIgnoreCase) &&
                      !string.Equals(Model.SortDirection, "desc", StringComparison.OrdinalIgnoreCase)
            ? "desc"
            : "asc";

        var parameters = new Dictionary<string, string?>
        {
            ["status"] = string.Equals(Model.Status, "all", StringComparison.OrdinalIgnoreCase) ? null : Model.Status,
            ["color"] = string.IsNullOrWhiteSpace(Model.Color) ? null : Model.Color,
            ["search"] = string.IsNullOrWhiteSpace(Model.Search) ? null : Model.Search,
            ["sortField"] = field,
            ["sortDir"] = nextDir
        };

        var filtered = parameters
            .Where(kvp => !string.IsNullOrWhiteSpace(kvp.Value))
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value!);

        return QueryHelpers.AddQueryString("/wine-manager", filtered);
    }

    bool IsSorted(string field) => string.Equals(Model.SortField, field, StringComparison.OrdinalIgnoreCase);

    string SortStateClass(string field)
    {
        if (!IsSorted(field))
        {
            return string.Empty;
        }

        return string.Equals(Model.SortDirection, "desc", StringComparison.OrdinalIgnoreCase) ? "sorted-desc" : "sorted-asc";
    }

    var hasBottles = Model.Bottles.Any();
    var topBarModel = ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel
        ?? WineSurferTopBarModel.Empty(currentPath);
    var bottleHeaderContent = await Html.PartialAsync("_BottleDetailsHeaderControls");

    var yourCellarTable = new CrudTableTemplateModel
    {
        Title = "Your Cellar",
        DataTableKey = "summary",
        HeaderContent = @<text>
            <button type="button" class="crud-table__action-button inventory-add-trigger">Add Wine</button>
        </text>,
        BodyContent = @<text>
            <table id="inventory-table" class="inventory-table crud-table__table">
                <thead>
                    <tr class="header-row crud-table__header-row">
                        <th>
                            <a class="sort-header @SortStateClass("wine")" href="@BuildSortUrl("wine")">
                                <span class="header-text">Wine</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("appellation")" href="@BuildSortUrl("appellation")">
                                <span class="header-text">Appellation</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("vintage")" href="@BuildSortUrl("vintage")">
                                <span class="header-text">Vintage</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <span class="header-text">Bottles</span>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("color")" href="@BuildSortUrl("color")">
                                <span class="header-text">Color</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("status")" href="@BuildSortUrl("status")">
                                <span class="header-text">Status</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("score")" href="@BuildSortUrl("score")">
                                <span class="header-text">Score</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (hasBottles)
                    {
                        foreach (var bottle in Model.Bottles)
                        {
                            var subAppellation = string.IsNullOrWhiteSpace(bottle.SubAppellation) ? null : bottle.SubAppellation;
                            var appellation = string.IsNullOrWhiteSpace(bottle.Appellation) ? null : bottle.Appellation;
                            var display = "—";
                            if (!string.IsNullOrEmpty(subAppellation) && !string.IsNullOrEmpty(appellation) && !string.Equals(subAppellation, appellation, StringComparison.OrdinalIgnoreCase))
                            {
                                display = $"{subAppellation} ({appellation})";
                            }
                            else if (!string.IsNullOrEmpty(subAppellation))
                            {
                                display = subAppellation;
                            }
                            else if (!string.IsNullOrEmpty(appellation))
                            {
                                display = appellation;
                            }
                            <tr class="group-row"
                                data-group-id="@bottle.WineVintageId"
                                data-wine-id="@bottle.WineId"
                                data-sub-appellation-id="@(bottle.SubAppellationId?.ToString() ?? string.Empty)"
                                data-appellation-id="@(bottle.AppellationId?.ToString() ?? string.Empty)"
                                tabindex="0"
                                role="button"
                                aria-controls="details-table">
                                <td class="summary-wine">@bottle.WineName</td>
                                <td class="summary-appellation">@display</td>
                                <td class="summary-vintage">@bottle.Vintage</td>
                                <td class="summary-bottles" data-field="bottle-count">@bottle.BottleCount</td>
                                <td class="summary-color">@bottle.Color</td>
                                <td class="summary-status"><span class="status-pill @bottle.StatusCssClass" data-field="status">@bottle.StatusLabel</span></td>
                                <td class="summary-score" data-field="score">@(bottle.AverageScore.HasValue ? bottle.AverageScore.Value.ToString("0.0") : "—")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr class="crud-table__empty-row empty-row">
                            <td colspan="7">No bottles yet. Add your first wine above to get started.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </text>
    };

    var bottleDetailsTable = new CrudTableTemplateModel
    {
        DataTableKey = "details",
        TitleContent = @<text>
            <h2 id="details-title" class="crud-table__title">Bottles</h2>
            <p id="details-subtitle" class="crud-table__description"></p>
        </text>,
        HeaderContent = _ => bottleHeaderContent,
        BodyContent = @<text>
            <div id="details-message" class="details-message" role="status"></div>
            <table class="details-table crud-table__table" id="details-table">
                <thead>
                    <tr class="header-row crud-table__header-row">
                        <th scope="col">Bottle Location</th>
                        <th scope="col">Price</th>
                        <th scope="col">Avg Score</th>
                        <th scope="col">Enjoyed at</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody id="details-table-body">
                    <tr class="empty-row">
                        <td colspan="5">Select a wine group to see its bottles.</td>
                    </tr>
                </tbody>
            </table>
        </text>
    };
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body class="wine-app">
    @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
    <main class="inventory-shell">
        @await Html.PartialAsync("_WineSurferPageHeader", new WineSurferPageHeaderModel("Wine Inventory"))
        <form method="get" class="filters">
            <label>
                Status
                <select name="status">
                    @foreach (var option in Model.StatusOptions)
                    {
                        var isSelected = string.Equals(option.Value, Model.Status, StringComparison.OrdinalIgnoreCase) ||
                                         (string.IsNullOrEmpty(option.Value) && string.Equals(Model.Status, "all", StringComparison.OrdinalIgnoreCase));
                        <option value="@option.Value" selected="@(isSelected ? "selected" : null)">@option.Label</option>
                    }
                </select>
            </label>
            <label>
                Color
                <select name="color">
                    @foreach (var option in Model.ColorOptions)
                    {
                        var currentColor = Model.Color ?? string.Empty;
                        var isSelected = string.Equals(option.Value, currentColor, StringComparison.OrdinalIgnoreCase);
                        <option value="@option.Value" selected="@(isSelected ? "selected" : null)">@option.Label</option>
                    }
                </select>
            </label>
            <label>
                Search
                <input type="text" name="search" value="@Model.Search" placeholder="Wine, appellation, vintage" />
            </label>
            <input type="hidden" name="sortField" value="@Model.SortField" />
            <input type="hidden" name="sortDir" value="@Model.SortDirection" />
            <button type="submit">Apply</button>
        </form>

        @if (!hasBottles)
        {
            <div class="no-results wine-card-hover wine-card-hover--prominent">No bottles match the current filters.</div>
        }

        @await Html.PartialAsync("_CrudTableTemplate", yourCellarTable)
        <div class="inventory-add-overlay" id="inventory-add-overlay" hidden>
            <div class="inventory-add-popover" id="inventory-add-popover" role="dialog" aria-modal="true" aria-labelledby="inventory-add-title">
                <h3 id="inventory-add-title">Add Wine to Inventory</h3>
                <p class="inventory-add-intro">Choose an existing wine and vintage to add a bottle to your cellar.</p>
                <form class="inventory-add-form">
                    <label class="inventory-add-field">
                        <span class="inventory-add-label">Wine</span>
                        <select class="inventory-add-wine" aria-label="Wine">
                            <option value="">Select a wine</option>
                        </select>
                    </label>
                    <p class="inventory-add-summary" aria-live="polite">Select a wine to see its appellation and color.</p>
                    <label class="inventory-add-field">
                        <span class="inventory-add-label">Vintage</span>
                        <input type="number" class="inventory-add-vintage" min="1900" max="2100" placeholder="Year" aria-label="Vintage" />
                    </label>
                    <p class="inventory-add-vintage-hint" aria-live="polite">Pick a wine to view existing vintages.</p>
                    <p class="inventory-add-error" role="alert" aria-hidden="true"></p>
                    <div class="inventory-add-actions">
                        <button type="button" class="crud-table__action-button secondary inventory-add-cancel">Cancel</button>
                        <button type="submit" class="crud-table__action-button inventory-add-submit">Add Wine</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="inventory-add-overlay" id="drink-bottle-overlay" hidden>
            <div class="inventory-add-popover drink-bottle-popover" id="drink-bottle-popover" role="dialog" aria-modal="true" aria-labelledby="drink-bottle-title">
                <h3 id="drink-bottle-title" class="drink-bottle-title">Drink Bottle</h3>
                <p class="inventory-add-intro drink-bottle-intro">Record when and how you enjoyed this bottle.</p>
                <form class="drink-bottle-form">
                    <label class="inventory-add-field">
                        <span class="inventory-add-label">Date</span>
                        <input type="date" class="drink-bottle-date" aria-label="Drinking date" required />
                    </label>
                    <label class="inventory-add-field">
                        <span class="inventory-add-label">Score</span>
                        <input type="number" class="drink-bottle-score" min="0" max="10" step="0.1" placeholder="0-10" aria-label="Score" />
                    </label>
                    <label class="inventory-add-field">
                        <span class="inventory-add-label">Tasting Note</span>
                        <textarea class="drink-bottle-note" rows="4" aria-label="Tasting note" required></textarea>
                    </label>
                    <p class="inventory-add-error drink-bottle-error" role="alert" aria-hidden="true"></p>
                    <div class="inventory-add-actions drink-bottle-actions">
                        <button type="button" class="crud-table__action-button secondary drink-bottle-cancel">Cancel</button>
                        <button type="submit" class="crud-table__action-button drink-bottle-submit">Drink Bottle</button>
                    </div>
                </form>
            </div>
        </div>

        @await Html.PartialAsync("_CrudTableTemplate", bottleDetailsTable)
    </main>
    <script src="/js/wine-inventory-tables.js"></script>
</body>
</html>
