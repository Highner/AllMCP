@model AllMCPSolution.Controllers.WineInventoryViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Generic
@using System.Globalization
@using System.Linq
@using System.Text.Encodings.Web
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    string BuildSortUrl(string field)
    {
        var nextDir = string.Equals(Model.SortField, field, StringComparison.OrdinalIgnoreCase) &&
                      !string.Equals(Model.SortDirection, "desc", StringComparison.OrdinalIgnoreCase)
            ? "desc"
            : "asc";

        var parameters = new Dictionary<string, string?>
        {
            ["status"] = string.Equals(Model.Status, "all", StringComparison.OrdinalIgnoreCase) ? null : Model.Status,
            ["search"] = string.IsNullOrWhiteSpace(Model.Search) ? null : Model.Search,
            ["sortField"] = field,
            ["sortDir"] = nextDir
        };

        var filtered = parameters
            .Where(kvp => !string.IsNullOrWhiteSpace(kvp.Value))
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value!);

        return QueryHelpers.AddQueryString("/wine-manager", filtered);
    }

    bool IsSorted(string field) => string.Equals(Model.SortField, field, StringComparison.OrdinalIgnoreCase);

    string SortStateClass(string field)
    {
        if (!IsSorted(field))
        {
            return string.Empty;
        }

        return string.Equals(Model.SortDirection, "desc", StringComparison.OrdinalIgnoreCase) ? "sorted-desc" : "sorted-asc";
    }

    var hasBottles = Model.Bottles.Any();
    var hasLocations = Model.Locations.Any();
    var topBarModel = ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel
        ?? WineSurferTopBarModel.Empty(currentPath);
    var bottleHeaderContent = await Html.PartialAsync("_BottleDetailsHeaderControls");
    ViewData["WineSurferPageTitle"] = "Wine Inventory";

    var headerFilterValue = HtmlEncoder.Default.Encode(Model.Search ?? string.Empty);
    var yourCellarTable = new CrudTableTemplateModel
    {
        TitleContent = _ => Html.PartialAsync("_InventorySectionHeader", new InventorySectionHeaderModel
        {
            Title = "Your Cellar",
            AdditionalCssClass = "location-header--table",
            Actions = _ => new HtmlString($@"
                <div class=""inventory-section-header__filter"">
                    <label class=""sr-only"" for=""your-cellar-filter"">Filter your cellar</label>
                    <input type=""search""
                           id=""your-cellar-filter""
                           class=""input inventory-section-header__filter-input""
                           placeholder=""Filter wines""
                           autocomplete=""off""
                           value=""{headerFilterValue}""
                           data-inventory-header-filter-input />
                </div>
                <button type=""button"" class=""wine-surfer-button wine-surfer-button--orange inventory-add-trigger"" data-add-wine-trigger=""inventory"">Add wine</button>
            ")
        }).GetAwaiter().GetResult(),
        DataTableKey = "summary",
        BackgroundCssClass = "crud-table crud-table--bare",
        BodyCssClass = "crud-table__body crud-table__body--bare",
        BodyContent = @<text>
            <table id="inventory-table" class="inventory-table inventory-table--grouped crud-table__table">
                <thead>
                    <tr class="header-row crud-table__header-row">
                        <th class="summary-header summary-header--wine">
                            <a class="sort-header @SortStateClass("wine")" href="@BuildSortUrl("wine")">
                                <span class="header-text">Wine</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th class="summary-header summary-header--region">
                            <a class="sort-header @SortStateClass("region")" href="@BuildSortUrl("region")">
                                <span class="header-text">Region</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th class="summary-header summary-header--appellation">
                            <a class="sort-header @SortStateClass("appellation")" href="@BuildSortUrl("appellation")">
                                <span class="header-text">Appellation</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th class="summary-header summary-header--bottles">
                            <span class="header-text">Bottles</span>
                        </th>
                        <th class="summary-header summary-header--color">
                            <a class="sort-header @SortStateClass("color")" href="@BuildSortUrl("color")">
                                <span class="header-text">Color</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th class="summary-header summary-header--status">
                            <a class="sort-header @SortStateClass("status")" href="@BuildSortUrl("status")">
                                <span class="header-text">Status</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th class="summary-header summary-header--score">
                            <a class="sort-header @SortStateClass("score")" href="@BuildSortUrl("score")">
                                <span class="header-text">Score</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (hasBottles)
                    {
                        foreach (var bottle in Model.Bottles)
                        {
                            var subAppellation = string.IsNullOrWhiteSpace(bottle.SubAppellation) ? null : bottle.SubAppellation;
                            var appellation = string.IsNullOrWhiteSpace(bottle.Appellation) ? null : bottle.Appellation;
                            var region = string.IsNullOrWhiteSpace(bottle.Region) ? null : bottle.Region;
                            var display = "—";
                            var regionDisplay = region ?? "—";
                            var groupingAppellation = string.Empty;
                            var groupingRegion = region ?? string.Empty;
                            if (!string.IsNullOrEmpty(subAppellation) && !string.IsNullOrEmpty(appellation) && !string.Equals(subAppellation, appellation, StringComparison.OrdinalIgnoreCase))
                            {
                                display = $"{subAppellation} ({appellation})";
                                groupingAppellation = display;
                            }
                            else if (!string.IsNullOrEmpty(subAppellation))
                            {
                                display = subAppellation;
                                groupingAppellation = subAppellation;
                            }
                            else if (!string.IsNullOrEmpty(appellation))
                            {
                                display = appellation;
                                groupingAppellation = appellation;
                            }
                            var groupingVintage = string.Empty; // wine-level rows have no single vintage
                            var groupingColor = bottle.Color ?? string.Empty;
                            var groupingStatus = bottle.StatusLabel ?? string.Empty;
                            <tr class="group-row"
                                data-inventory-row
                                data-wine-id="@bottle.WineId"
                                data-sub-appellation-id="@(bottle.SubAppellationId?.ToString() ?? string.Empty)"
                                data-appellation-id="@(bottle.AppellationId?.ToString() ?? string.Empty)"
                                data-summary-wine="@bottle.WineName"
                                data-summary-region="@groupingRegion"
                                data-summary-appellation="@groupingAppellation"
                                data-summary-color="@groupingColor"
                                data-summary-status="@groupingStatus"
                                tabindex="0"
                                role="button"
                                aria-expanded="false">
                                <td class="summary-wine">@bottle.WineName</td>
                                <td class="summary-region">@regionDisplay</td>
                                <td class="summary-appellation">@display</td>
                                <td class="summary-bottles" data-field="bottle-count">
                                    <span aria-hidden="true">@bottle.AvailableBottleCount/@bottle.BottleCount</span>
                                    <span class="sr-only">@bottle.AvailableBottleCount bottles available of a total of @bottle.BottleCount</span>
                                </td>
                                <td class="summary-color">@bottle.Color</td>
                                <td class="summary-status"><span class="status-pill @bottle.StatusCssClass" data-field="status">@bottle.StatusLabel</span></td>
                                <td class="summary-score" data-field="score">@(bottle.AverageScore.HasValue ? bottle.AverageScore.Value.ToString("0.0") : "—")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr class="crud-table__empty-row empty-row">
                            <td colspan="7">No bottles yet. Add your first wine above to get started.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </text>
    };

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shared-ui.css" />
    <script defer src="/js/pwa.js"></script>
</head>
<body class="wine-app wine-app--with-bottom-nav">
    @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
    <main class="inventory-shell">
        <div class="inventory-layout">
            <div class="inventory-left">
                <section id="inventory-locations"
                         class="inventory-locations"
                         data-current-user-id="@Model.CurrentUserId">
                    @(Html.PartialAsync("_InventorySectionHeader", new InventorySectionHeaderModel
                    {
                        Title = "Storage",
                        Actions = _ => new HtmlString("<button type=\"button\" class=\"wine-surfer-button wine-surfer-button--orange\" data-location-add>Add location</button>")
                    }).GetAwaiter().GetResult())
            <div class="location-message" data-location-message hidden aria-live="polite"></div>
            <div class="location-grid" data-location-list>
                <article class="wine-card wine-surface wine-surface-border wine-card-hover location-card location-card--create"
                         data-location-create hidden>
                    <form class="location-edit-form" data-location-create-form>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Location name</span>
                            <input type="text"
                                   class="location-edit-input"
                                   data-location-input
                                   placeholder="e.g., Main Cellar"
                                   maxlength="128" />
                        </label>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Capacity (optional)</span>
                            <input type="number"
                                   class="location-edit-input"
                                   data-location-capacity-input
                                   placeholder="Leave blank for unlimited"
                                   min="0"
                                   max="10000"
                                   inputmode="numeric" />
                            <span class="location-edit-hint">How many bottles fit in this location.</span>
                        </label>
                        <div class="location-edit-actions">
                            <button type="button" class="wine-surfer-button" data-location-cancel>Cancel</button>
                            <button type="submit" class="wine-surfer-button wine-surfer-button--orange" data-location-submit>Create</button>
                        </div>
                        <p class="location-edit-error" data-location-error aria-live="polite" aria-hidden="true"></p>
                    </form>
                </article>
                @foreach (var location in Model.Locations)
                {
                    var bottleLabel = $"{location.BottleCount} bottle{(location.BottleCount == 1 ? string.Empty : "s")}";
                    var hasCapacity = location.Capacity.HasValue && location.Capacity.Value >= 0;
                    var capacityValue = location.Capacity ?? 0;
                    var highlightClass = Model.HasActiveFilters && Model.HighlightedLocationIds.Contains(location.Id)
                        ? " location-card--highlight"
                        : string.Empty;
                    var remainingCapacity = hasCapacity ? capacityValue - location.BottleCount : 0;
                    string statusLabel;
                    if (location.BottleCount > 0)
                    {
                        var summary = $"{location.CellaredBottleCount} cellared · {location.DrunkBottleCount} enjoyed";
                        if (hasCapacity)
                        {
                            var capacitySummary = remainingCapacity > 0
                                ? $"{remainingCapacity} open slot{(remainingCapacity == 1 ? string.Empty : "s")} remaining"
                                : remainingCapacity == 0
                                    ? "At capacity"
                                    : $"Over capacity by {Math.Abs(remainingCapacity)} bottle{(Math.Abs(remainingCapacity) == 1 ? string.Empty : "s")}";
                            statusLabel = $"{summary} · {capacitySummary}";
                        }
                        else
                        {
                            statusLabel = summary;
                        }
                    }
                    else if (hasCapacity)
                    {
                        var capacitySummary = remainingCapacity > 0
                            ? $"{remainingCapacity} open slot{(remainingCapacity == 1 ? string.Empty : "s")} available."
                            : remainingCapacity == 0
                                ? "At capacity."
                                : $"Over capacity by {Math.Abs(remainingCapacity)} bottle{(Math.Abs(remainingCapacity) == 1 ? string.Empty : "s")}.";
                        statusLabel = $"Capacity {capacityValue} bottle{(capacityValue == 1 ? string.Empty : "s")}. {capacitySummary}".Trim();
                    }
                    else
                    {
                        statusLabel = "No bottles stored here yet.";
                    }
                    var fillIndicatorClass = hasCapacity ? string.Empty : " location-fill-indicator--no-capacity";
                    int fillPercentValue;
                    if (hasCapacity)
                    {
                        var baseRatio = capacityValue <= 0
                            ? (location.BottleCount > 0 ? 1d : 0d)
                            : (double)location.BottleCount / capacityValue;
                        var clampedRatio = Math.Max(0d, Math.Min(1d, baseRatio));
                        fillPercentValue = (int)Math.Round(clampedRatio * 100, MidpointRounding.AwayFromZero);
                        if (remainingCapacity < 0)
                        {
                            fillIndicatorClass += " location-fill-indicator--over";
                        }
                    }
                    else
                    {
                        fillPercentValue = location.BottleCount > 0 ? 100 : 0;
                    }

                    var fillPercentStyle = hasCapacity
                        ? $"{Math.Max(0, Math.Min(100, fillPercentValue)).ToString(CultureInfo.InvariantCulture)}%"
                        : "0%";
                    var fillPercentLabel = hasCapacity
                        ? $"{fillPercentValue}% full"
                        : "Capacity not set";
                    string fillSummaryLabel;
                    if (hasCapacity)
                    {
                        fillSummaryLabel = remainingCapacity > 0
                            ? $"{remainingCapacity} open"
                            : remainingCapacity == 0
                                ? "At capacity"
                                : $"Over by {Math.Abs(remainingCapacity)}";
                    }
                    else
                    {
                        fillSummaryLabel = location.BottleCount > 0
                            ? $"{location.CellaredBottleCount} cellared · {location.DrunkBottleCount} enjoyed"
                            : "Add a capacity to track fill";
                    }
                    <article class="wine-card wine-surface wine-surface-border wine-card-hover location-card@highlightClass"
                             data-location-card
                             data-location-id="@location.Id"
                             data-location-name="@location.Name"
                             data-location-capacity="@(location.Capacity?.ToString() ?? string.Empty)"
                             data-bottle-count="@location.BottleCount"
                             data-unique-count="@location.UniqueWineCount"
                             data-cellared-count="@location.CellaredBottleCount"
                             data-drunk-count="@location.DrunkBottleCount">
                        <div class="location-card-view" data-location-view>
                            <div class="wine-card__header location-card-header">
                                <div class="location-card-text">
                                    <h3 class="wine-card__title location-card-name" data-location-name>@location.Name</h3>
                                    <p class="wine-card__subtitle location-card-subtitle">
                                        <span data-location-bottle-count>@bottleLabel</span>
                                    </p>
                                </div>
                                @{
                                    var actionMenuTriggerLabel = string.IsNullOrWhiteSpace(location.Name)
                                        ? "Open storage location actions"
                                        : $"Open actions for {location.Name}";
                                    var actionMenuLabel = string.IsNullOrWhiteSpace(location.Name)
                                        ? "Storage location actions"
                                        : $"{location.Name} actions";
                                    var actionMenuId = $"location-actions-menu-{location.Id}";
                                    var editAttributes = new Dictionary<string, string>
                                    {
                                        ["data-location-edit"] = string.Empty
                                    };
                                    var deleteAttributes = new Dictionary<string, string>
                                    {
                                        ["data-location-delete"] = string.Empty
                                    };
                                    var editOption = new ActionMenuButtonEditOption("Edit", editAttributes);
                                    var placeholderDeleteOption = new ActionMenuButtonDeleteOption(
                                        Label: "Delete",
                                        FormAction: "#",
                                        HiddenFields: Array.Empty<KeyValuePair<string, string>>(),
                                        ConfirmMessage: null,
                                        ButtonCssClass: null,
                                        FormCssClass: null,
                                        IncludeAntiforgery: false);
                                    var deleteItem = new ActionMenuButtonItem(
                                        ActionMenuButtonItemKind.Button,
                                        "Delete",
                                        ButtonCssClass: "action-menu__button--danger",
                                        Attributes: deleteAttributes);
                                    var menuModel = new ActionMenuButtonModel(
                                        MenuId: actionMenuId,
                                        TriggerAriaLabel: actionMenuTriggerLabel,
                                        MenuLabel: actionMenuLabel,
                                        Edit: editOption,
                                        Delete: placeholderDeleteOption,
                                        AdditionalItems: new List<ActionMenuButtonItem> { deleteItem },
                                        ShowDelete: false);
                                }
                                <div class="wine-card__actions location-card-actions">
                                    @await Html.PartialAsync("_ActionMenuButton", menuModel)
                                </div>
                            </div>
                            <div class="location-card-status">
                                <div class="location-fill-indicator@fillIndicatorClass" data-location-fill-indicator>
                                    <div class="location-fill-track">
                                        <div class="location-fill-bar" data-location-fill-bar style="width: @fillPercentStyle;"></div>
                                    </div>
                                    <div class="location-fill-meta">
                                        <span class="location-fill-percent" data-location-fill-percent>@fillPercentLabel</span>
                                        <span class="location-fill-remaining" data-location-fill-remaining>@fillSummaryLabel</span>
                                    </div>
                                </div>
                                <p class="wine-card__description location-card-description visually-hidden" data-location-description>@statusLabel</p>
                            </div>
                        </div>
                        <form class="location-edit-form" data-location-edit-form hidden>
                            <label class="location-edit-label">
                                <span class="wine-card__meta">Location name</span>
                                <input type="text"
                                       class="location-edit-input"
                                       data-location-input
                                       value="@location.Name"
                                       maxlength="128"
                                       required />
                            </label>
                            <label class="location-edit-label">
                                <span class="wine-card__meta">Capacity (optional)</span>
                                <input type="number"
                                       class="location-edit-input"
                                       data-location-capacity-input
                                       value="@(location.Capacity?.ToString() ?? string.Empty)"
                                       placeholder="Leave blank for unlimited"
                                       min="0"
                                       max="10000"
                                       inputmode="numeric" />
                                <span class="location-edit-hint">Use whole numbers only.</span>
                            </label>
                            <div class="location-edit-actions">
                                <button type="button" class="wine-surfer-button" data-location-cancel>Cancel</button>
                                <button type="submit" class="wine-surfer-button wine-surfer-button--orange" data-location-submit>Save</button>
                            </div>
                            <p class="location-edit-error" data-location-error aria-live="polite" aria-hidden="true"></p>
                        </form>
                    </article>
                }
            </div>
            <article class="wine-card wine-surface wine-surface-border wine-card-hover location-empty" data-location-empty @(hasLocations ? "hidden" : null)>
                <p>No storage locations yet. Create your first location to start organizing your cellar.</p>
            </article>
            <template id="inventory-location-template">
                <article class="wine-card wine-surface wine-surface-border wine-card-hover location-card"
                         data-location-card
                         data-location-id=""
                         data-location-name=""
                         data-location-capacity=""
                         data-bottle-count="0"
                         data-unique-count="0"
                         data-cellared-count="0"
                         data-drunk-count="0">
                    <div class="location-card-view" data-location-view>
                        <div class="wine-card__header location-card-header">
                            <div class="location-card-text">
                                <h3 class="wine-card__title location-card-name" data-location-name></h3>
                                <p class="wine-card__subtitle location-card-subtitle">
                                    <span data-location-bottle-count></span>
                                </p>
                            </div>
                            @{
                                var templateMenuTriggerLabel = "Open storage location actions";
                                var templateMenuLabel = "Storage location actions";
                                var templateMenuId = "location-actions-menu-template";
                                var templateEditAttributes = new Dictionary<string, string>
                                {
                                    ["data-location-edit"] = string.Empty
                                };
                                var templateDeleteAttributes = new Dictionary<string, string>
                                {
                                    ["data-location-delete"] = string.Empty
                                };
                                var templateEditOption = new ActionMenuButtonEditOption("Edit", templateEditAttributes);
                                var templateDeleteOption = new ActionMenuButtonDeleteOption(
                                    Label: "Delete",
                                    FormAction: "#",
                                    HiddenFields: Array.Empty<KeyValuePair<string, string>>(),
                                    ConfirmMessage: null,
                                    ButtonCssClass: null,
                                    FormCssClass: null,
                                    IncludeAntiforgery: false);
                                var templateDeleteItem = new ActionMenuButtonItem(
                                    ActionMenuButtonItemKind.Button,
                                    "Delete",
                                    ButtonCssClass: "action-menu__button--danger",
                                    Attributes: templateDeleteAttributes);
                                var templateMenuModel = new ActionMenuButtonModel(
                                    MenuId: templateMenuId,
                                    TriggerAriaLabel: templateMenuTriggerLabel,
                                    MenuLabel: templateMenuLabel,
                                    Edit: templateEditOption,
                                    Delete: templateDeleteOption,
                                    AdditionalItems: new List<ActionMenuButtonItem> { templateDeleteItem },
                                    ShowDelete: false);
                            }
                            <div class="wine-card__actions location-card-actions">
                                @await Html.PartialAsync("_ActionMenuButton", templateMenuModel)
                            </div>
                        </div>
                        <div class="location-card-status">
                            <div class="location-fill-indicator location-fill-indicator--no-capacity" data-location-fill-indicator>
                                <div class="location-fill-track">
                                    <div class="location-fill-bar" data-location-fill-bar style="width: 0%;"></div>
                                </div>
                                <div class="location-fill-meta">
                                    <span class="location-fill-percent" data-location-fill-percent>Capacity not set</span>
                                    <span class="location-fill-remaining" data-location-fill-remaining>Add a capacity to track fill</span>
                                </div>
                            </div>
                            <p class="wine-card__description location-card-description visually-hidden" data-location-description></p>
                        </div>
                    </div>
                    <form class="location-edit-form" data-location-edit-form hidden>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Location name</span>
                            <input type="text" class="location-edit-input" data-location-input maxlength="128" required />
                        </label>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Capacity (optional)</span>
                            <input type="number"
                                   class="location-edit-input"
                                   data-location-capacity-input
                                   placeholder="Leave blank for unlimited"
                                   min="0"
                                   max="10000"
                                   inputmode="numeric" />
                            <span class="location-edit-hint">Use whole numbers only.</span>
                        </label>
                        <div class="location-edit-actions">
                            <button type="button" class="sisterhood-button sisterhood-button--ghost" data-location-cancel>Cancel</button>
                            <button type="submit" class="sisterhood-button sisterhood-button--primary" data-location-submit>Save</button>
                        </div>
                        <p class="location-edit-error" data-location-error aria-live="polite" aria-hidden="true"></p>
                    </form>
                </article>
            </template>
                </section>

            </div>

            <form method="get" class="filters" hidden>
                <input type="hidden"
                       name="status"
                       value="@(string.IsNullOrWhiteSpace(Model.Status) ? "all" : Model.Status)"
                       data-default-value="all" />
                <input type="hidden"
                       name="search"
                       value="@(Model.Search ?? string.Empty)"
                       data-default-value="" />
                <input type="hidden"
                       name="sortField"
                       value="@(Model.SortField ?? "wine")"
                       data-default-value="wine" />
                <input type="hidden"
                       name="sortDir"
                       value="@(Model.SortDirection ?? "asc")"
                       data-default-value="asc" />
            </form>

            <div class="inventory-right">
                @if (!hasBottles)
                {
                    <div class="no-results wine-card-hover wine-card-hover--prominent">No bottles match the current filters.</div>
                }

                <div id="inventory-view" class="inventory-view" aria-hidden="false">
                    @await Html.PartialAsync("_CrudTableTemplate", yourCellarTable)
                </div>
            </div>
        </div>



        @await Html.PartialAsync("_WineInventoryVintageInlineTable")

        @await Html.PartialAsync("_InventoryAddModal", Model.InventoryAddModal)

        @await Html.PartialAsync("_BottleManagementModal", BottleManagementModalViewModel.Default)

        @await Html.PartialAsync("_DrinkBottleModal", AllMCPSolution.Models.DrinkBottleModalViewModel.Default)
    </main>
    @await Html.PartialAsync("_WineSurferBottomNav", Context?.Request?.Path.Value)
    <script src="/js/drink-bottle-modal.js"></script>
    <script src="/js/inventory-add-modal.js"></script>
    <script src="/js/wine-inventory-tables.js"></script>
</body>
</html>
