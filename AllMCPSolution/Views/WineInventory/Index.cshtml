@model AllMCPSolution.Controllers.WineInventoryViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Generic
@using System.Linq
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    string BuildSortUrl(string field)
    {
        var nextDir = string.Equals(Model.SortField, field, StringComparison.OrdinalIgnoreCase) &&
                      !string.Equals(Model.SortDirection, "desc", StringComparison.OrdinalIgnoreCase)
            ? "desc"
            : "asc";

        var parameters = new Dictionary<string, string?>
        {
            ["status"] = string.Equals(Model.Status, "all", StringComparison.OrdinalIgnoreCase) ? null : Model.Status,
            ["color"] = string.IsNullOrWhiteSpace(Model.Color) ? null : Model.Color,
            ["search"] = string.IsNullOrWhiteSpace(Model.Search) ? null : Model.Search,
            ["sortField"] = field,
            ["sortDir"] = nextDir
        };

        var filtered = parameters
            .Where(kvp => !string.IsNullOrWhiteSpace(kvp.Value))
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value!);

        return QueryHelpers.AddQueryString("/wine-manager", filtered);
    }

    bool IsSorted(string field) => string.Equals(Model.SortField, field, StringComparison.OrdinalIgnoreCase);

    string SortStateClass(string field)
    {
        if (!IsSorted(field))
        {
            return string.Empty;
        }

        return string.Equals(Model.SortDirection, "desc", StringComparison.OrdinalIgnoreCase) ? "sorted-desc" : "sorted-asc";
    }

    var hasBottles = Model.Bottles.Any();
    var hasLocations = Model.Locations.Any();
    var topBarModel = ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel
        ?? WineSurferTopBarModel.Empty(currentPath);
    var bottleHeaderContent = await Html.PartialAsync("_BottleDetailsHeaderControls");
    ViewData["WineSurferPageTitle"] = "Wine Inventory";

    var yourCellarTable = new CrudTableTemplateModel
    {
        Title = "Your Cellar",
        DataTableKey = "summary",
        HeaderContent = @<text>
            <button type="button" class="sisterhood-button inventory-add-trigger" data-add-wine-trigger>Add wine</button>
        </text>,
        BodyContent = @<text>
            <table id="inventory-table" class="inventory-table crud-table__table">
                <thead>
                    <tr class="header-row crud-table__header-row">
                        <th>
                            <a class="sort-header @SortStateClass("wine")" href="@BuildSortUrl("wine")">
                                <span class="header-text">Wine</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("appellation")" href="@BuildSortUrl("appellation")">
                                <span class="header-text">Appellation</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("vintage")" href="@BuildSortUrl("vintage")">
                                <span class="header-text">Vintage</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <span class="header-text">Bottles</span>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("color")" href="@BuildSortUrl("color")">
                                <span class="header-text">Color</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("status")" href="@BuildSortUrl("status")">
                                <span class="header-text">Status</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                        <th>
                            <a class="sort-header @SortStateClass("score")" href="@BuildSortUrl("score")">
                                <span class="header-text">Score</span>
                                <span class="sort-icon" aria-hidden="true"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (hasBottles)
                    {
                        foreach (var bottle in Model.Bottles)
                        {
                            var subAppellation = string.IsNullOrWhiteSpace(bottle.SubAppellation) ? null : bottle.SubAppellation;
                            var appellation = string.IsNullOrWhiteSpace(bottle.Appellation) ? null : bottle.Appellation;
                            var display = "—";
                            if (!string.IsNullOrEmpty(subAppellation) && !string.IsNullOrEmpty(appellation) && !string.Equals(subAppellation, appellation, StringComparison.OrdinalIgnoreCase))
                            {
                                display = $"{subAppellation} ({appellation})";
                            }
                            else if (!string.IsNullOrEmpty(subAppellation))
                            {
                                display = subAppellation;
                            }
                            else if (!string.IsNullOrEmpty(appellation))
                            {
                                display = appellation;
                            }
                            <tr class="group-row"
                                data-group-id="@bottle.WineVintageId"
                                data-wine-id="@bottle.WineId"
                                data-sub-appellation-id="@(bottle.SubAppellationId?.ToString() ?? string.Empty)"
                                data-appellation-id="@(bottle.AppellationId?.ToString() ?? string.Empty)"
                                tabindex="0"
                                role="button"
                                aria-controls="details-table">
                                <td class="summary-wine">@bottle.WineName</td>
                                <td class="summary-appellation">@display</td>
                                <td class="summary-vintage">@bottle.Vintage</td>
                                <td class="summary-bottles" data-field="bottle-count">@bottle.BottleCount</td>
                                <td class="summary-color">@bottle.Color</td>
                                <td class="summary-status"><span class="status-pill @bottle.StatusCssClass" data-field="status">@bottle.StatusLabel</span></td>
                                <td class="summary-score" data-field="score">@(bottle.AverageScore.HasValue ? bottle.AverageScore.Value.ToString("0.0") : "—")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr class="crud-table__empty-row empty-row">
                            <td colspan="7">No bottles yet. Add your first wine above to get started.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </text>
    };

    var bottleDetailsTable = new CrudTableTemplateModel
    {
        DataTableKey = "details",
        TitleContent = @<text>
            <div class="details-header-main">
                <div class="details-header-titles">
                    <h2 id="details-title" class="crud-table__title">Bottles</h2>
                    <p id="details-subtitle" class="crud-table__description"></p>
                </div>
                <button type="button" id="details-close-button" class="details-close-button" aria-label="Close bottle details">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </text>,
        HeaderContent = @<text>
            @bottleHeaderContent
        </text>,
        BodyContent = @<text>
            <div id="details-message" class="details-message" role="status"></div>
            <table class="details-table crud-table__table" id="details-table">
                <thead>
                    <tr class="header-row crud-table__header-row">
                        <th scope="col">Bottle Location</th>
                        <th scope="col">Price</th>
                        <th scope="col">Avg Score</th>
                        <th scope="col">Enjoyed at</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody id="details-table-body">
                    <tr class="empty-row">
                        <td colspan="5">Select a wine group to see its bottles.</td>
                    </tr>
                </tbody>
            </table>
        </text>
    };
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body class="wine-app">
    @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
    <main class="inventory-shell">
        <form method="get" class="filters">
            <label>
                Status
                <select name="status" data-default-value="all">
                    @foreach (var option in Model.StatusOptions)
                    {
                        var isSelected = string.Equals(option.Value, Model.Status, StringComparison.OrdinalIgnoreCase) ||
                                         (string.IsNullOrEmpty(option.Value) && string.Equals(Model.Status, "all", StringComparison.OrdinalIgnoreCase));
                        <option value="@option.Value" selected="@(isSelected ? "selected" : null)">@option.Label</option>
                    }
                </select>
            </label>
            <label>
                Color
                <select name="color" data-default-value="">
                    @foreach (var option in Model.ColorOptions)
                    {
                        var currentColor = Model.Color ?? string.Empty;
                        var isSelected = string.Equals(option.Value, currentColor, StringComparison.OrdinalIgnoreCase);
                        <option value="@option.Value" selected="@(isSelected ? "selected" : null)">@option.Label</option>
                    }
                </select>
            </label>
            <label>
                Search
                <input type="text" name="search" value="@Model.Search" placeholder="Wine, appellation, vintage" data-default-value="" />
            </label>
            <input type="hidden" name="sortField" value="@Model.SortField" data-default-value="wine" />
            <input type="hidden" name="sortDir" value="@Model.SortDirection" data-default-value="asc" />
            <button type="submit">Apply</button>
            <button type="button" class="secondary filters__clear-button" data-clear-filters>Clear filters</button>
        </form>

        <section id="inventory-locations"
                 class="inventory-locations"
                 data-current-user-id="@Model.CurrentUserId">
            <div class="location-header">
                <div class="location-header-text">
                    <h2 class="location-title">Storage Locations</h2>
                    <p class="location-description">Keep track of where every bottle lives across your cellar.</p>
                </div>
                <button type="button" class="sisterhood-button" data-location-add>Add location</button>
            </div>
            <div class="location-message" data-location-message hidden aria-live="polite"></div>
            <div class="location-grid" data-location-list>
                <article class="wine-card wine-surface wine-surface-border wine-card-hover location-card location-card--create"
                         data-location-create hidden>
                    <form class="location-edit-form" data-location-create-form>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Location name</span>
                            <input type="text"
                                   class="location-edit-input"
                                   data-location-input
                                   placeholder="e.g., Main Cellar"
                                   maxlength="128" />
                        </label>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Capacity (optional)</span>
                            <input type="number"
                                   class="location-edit-input"
                                   data-location-capacity-input
                                   placeholder="Leave blank for unlimited"
                                   min="0"
                                   max="10000"
                                   inputmode="numeric" />
                            <span class="location-edit-hint">How many bottles fit in this location.</span>
                        </label>
                        <div class="location-edit-actions">
                            <button type="button" class="sisterhood-button sisterhood-button--ghost" data-location-cancel>Cancel</button>
                            <button type="submit" class="sisterhood-button" data-location-submit>Create</button>
                        </div>
                        <p class="location-edit-error" data-location-error aria-live="polite" aria-hidden="true"></p>
                    </form>
                </article>
                @foreach (var location in Model.Locations)
                {
                    var bottleLabel = $"{location.BottleCount} bottle{(location.BottleCount == 1 ? string.Empty : "s")}";
                    var uniqueLabel = location.UniqueWineCount > 0
                        ? $"· {location.UniqueWineCount} unique wine{(location.UniqueWineCount == 1 ? string.Empty : "s")}" : string.Empty;
                    var hasCapacity = location.Capacity.HasValue && location.Capacity.Value >= 0;
                    var capacityValue = location.Capacity ?? 0;
                    var capacityLabel = hasCapacity
                        ? $"· Capacity: {capacityValue}"
                        : string.Empty;
                    var highlightClass = Model.HasActiveFilters && Model.HighlightedLocationIds.Contains(location.Id)
                        ? " location-card--highlight"
                        : string.Empty;
                    var remainingCapacity = hasCapacity ? capacityValue - location.BottleCount : 0;
                    string statusLabel;
                    if (location.BottleCount > 0)
                    {
                        var summary = $"{location.CellaredBottleCount} cellared · {location.DrunkBottleCount} enjoyed";
                        if (hasCapacity)
                        {
                            var capacitySummary = remainingCapacity > 0
                                ? $"{remainingCapacity} open slot{(remainingCapacity == 1 ? string.Empty : "s")} remaining"
                                : remainingCapacity == 0
                                    ? "At capacity"
                                    : $"Over capacity by {Math.Abs(remainingCapacity)} bottle{(Math.Abs(remainingCapacity) == 1 ? string.Empty : "s")}";
                            statusLabel = $"{summary} · {capacitySummary}";
                        }
                        else
                        {
                            statusLabel = summary;
                        }
                    }
                    else if (hasCapacity)
                    {
                        var capacitySummary = remainingCapacity > 0
                            ? $"{remainingCapacity} open slot{(remainingCapacity == 1 ? string.Empty : "s")} available."
                            : remainingCapacity == 0
                                ? "At capacity."
                                : $"Over capacity by {Math.Abs(remainingCapacity)} bottle{(Math.Abs(remainingCapacity) == 1 ? string.Empty : "s")}.";
                        statusLabel = $"Capacity {capacityValue} bottle{(capacityValue == 1 ? string.Empty : "s")}. {capacitySummary}".Trim();
                    }
                    else
                    {
                        statusLabel = "No bottles stored here yet.";
                        capacityLabel = string.Empty;
                    }
                    <article class="wine-card wine-surface wine-surface-border wine-card-hover location-card@highlightClass"
                             data-location-card
                             data-location-id="@location.Id"
                             data-location-name="@location.Name"
                             data-location-capacity="@(location.Capacity?.ToString() ?? string.Empty)"
                             data-bottle-count="@location.BottleCount"
                             data-unique-count="@location.UniqueWineCount"
                             data-cellared-count="@location.CellaredBottleCount"
                             data-drunk-count="@location.DrunkBottleCount">
                        <div class="location-card-view" data-location-view>
                            <div class="wine-card__header location-card-header">
                                <div class="location-card-text">
                                    <h3 class="wine-card__title location-card-name" data-location-name>@location.Name</h3>
                                    <p class="wine-card__subtitle location-card-subtitle">
                                        <span data-location-bottle-count>@bottleLabel</span>
                                        <span data-location-wine-count>@uniqueLabel</span>
                                        <span data-location-capacity>@capacityLabel</span>
                                    </p>
                                </div>
                                <div class="wine-card__actions location-card-actions">
                                    <button type="button" class="sisterhood-button" data-location-edit>Rename</button>
                                    <button type="button" class="sisterhood-button sisterhood-button--ghost-danger" data-location-delete>Delete</button>
                                </div>
                            </div>
                            <p class="wine-card__description location-card-description" data-location-description>@statusLabel</p>
                        </div>
                        <form class="location-edit-form" data-location-edit-form hidden>
                            <label class="location-edit-label">
                                <span class="wine-card__meta">Location name</span>
                                <input type="text"
                                       class="location-edit-input"
                                       data-location-input
                                       value="@location.Name"
                                       maxlength="128"
                                       required />
                            </label>
                            <label class="location-edit-label">
                                <span class="wine-card__meta">Capacity (optional)</span>
                                <input type="number"
                                       class="location-edit-input"
                                       data-location-capacity-input
                                       value="@(location.Capacity?.ToString() ?? string.Empty)"
                                       placeholder="Leave blank for unlimited"
                                       min="0"
                                       max="10000"
                                       inputmode="numeric" />
                                <span class="location-edit-hint">Use whole numbers only.</span>
                            </label>
                            <div class="location-edit-actions">
                                <button type="button" class="sisterhood-button sisterhood-button--ghost" data-location-cancel>Cancel</button>
                                <button type="submit" class="sisterhood-button sisterhood-button--primary" data-location-submit>Save</button>
                            </div>
                            <p class="location-edit-error" data-location-error aria-live="polite" aria-hidden="true"></p>
                        </form>
                    </article>
                }
            </div>
            <article class="wine-card wine-surface wine-surface-border wine-card-hover location-empty" data-location-empty @(hasLocations ? "hidden" : null)>
                <p>No storage locations yet. Create your first location to start organizing your cellar.</p>
            </article>
            <template id="inventory-location-template">
                <article class="wine-card wine-surface wine-surface-border wine-card-hover location-card"
                         data-location-card
                         data-location-id=""
                         data-location-name=""
                         data-location-capacity=""
                         data-bottle-count="0"
                         data-unique-count="0"
                         data-cellared-count="0"
                         data-drunk-count="0">
                    <div class="location-card-view" data-location-view>
                        <div class="wine-card__header location-card-header">
                            <div class="location-card-text">
                                <h3 class="wine-card__title location-card-name" data-location-name></h3>
                                <p class="wine-card__subtitle location-card-subtitle">
                                    <span data-location-bottle-count></span>
                                    <span data-location-wine-count></span>
                                    <span data-location-capacity></span>
                                </p>
                            </div>
                            <div class="wine-card__actions location-card-actions">
                                <button type="button" class="sisterhood-button" data-location-edit>Rename</button>
                                <button type="button" class="sisterhood-button sisterhood-button--ghost-danger" data-location-delete>Delete</button>
                            </div>
                        </div>
                        <p class="wine-card__description location-card-description" data-location-description></p>
                    </div>
                    <form class="location-edit-form" data-location-edit-form hidden>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Location name</span>
                            <input type="text" class="location-edit-input" data-location-input maxlength="128" required />
                        </label>
                        <label class="location-edit-label">
                            <span class="wine-card__meta">Capacity (optional)</span>
                            <input type="number"
                                   class="location-edit-input"
                                   data-location-capacity-input
                                   placeholder="Leave blank for unlimited"
                                   min="0"
                                   max="10000"
                                   inputmode="numeric" />
                            <span class="location-edit-hint">Use whole numbers only.</span>
                        </label>
                        <div class="location-edit-actions">
                            <button type="button" class="sisterhood-button sisterhood-button--ghost" data-location-cancel>Cancel</button>
                            <button type="submit" class="sisterhood-button sisterhood-button--primary" data-location-submit>Save</button>
                        </div>
                        <p class="location-edit-error" data-location-error aria-live="polite" aria-hidden="true"></p>
                    </form>
                </article>
            </template>
        </section>

        @if (!hasBottles)
        {
            <div class="no-results wine-card-hover wine-card-hover--prominent">No bottles match the current filters.</div>
        }

        <div id="inventory-view" class="inventory-view" aria-hidden="false">
            @await Html.PartialAsync("_CrudTableTemplate", yourCellarTable)
        </div>
        @await Html.PartialAsync("_InventoryAddModal")

        @await Html.PartialAsync("_DrinkBottleModal", AllMCPSolution.Models.DrinkBottleModalViewModel.Default)

        <div id="details-view" class="details-panel" hidden aria-hidden="true">
            @await Html.PartialAsync("_CrudTableTemplate", bottleDetailsTable)
        </div>
    </main>
    <script src="/js/wine-inventory-tables.js"></script>
</body>
</html>
