@model AllMCPSolution.Controllers.WineSurferSisterhoodsViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer Â· Sisterhoods</title>
    <style>
        :root {
            color-scheme: dark;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: radial-gradient(circle at top, rgba(244, 241, 234, 0.08), transparent 60%), #050505;
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
        }

        .top-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 24px 32px;
            position: sticky;
            top: 0;
            background: rgba(5, 5, 5, 0.92);
            backdrop-filter: blur(8px);
            border-bottom: 1px solid rgba(244, 241, 234, 0.08);
            z-index: 10;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
            letter-spacing: 4px;
            text-transform: uppercase;
            font-weight: 600;
            font-size: 20px;
        }

        .burger {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.15);
            background: rgba(244, 241, 234, 0.05);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .burger span {
            position: relative;
            width: 20px;
            height: 2px;
            background: #f4f1ea;
            display: block;
        }

        .burger span::before,
        .burger span::after {
            content: "";
            position: absolute;
            left: 0;
            width: 100%;
            height: 2px;
            background: #f4f1ea;
            transition: transform 0.2s ease;
        }

        .burger span::before {
            transform: translateY(-6px);
        }

        .burger span::after {
            transform: translateY(6px);
        }

        .burger.active span {
            background: transparent;
        }

        .burger.active span::before {
            transform: rotate(45deg);
        }

        .burger.active span::after {
            transform: rotate(-45deg);
        }

        .menu-panel {
            position: absolute;
            top: 76px;
            right: 32px;
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 16px;
            padding: 20px;
            min-width: 220px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.45);
            display: none;
        }

        .menu-panel.open {
            display: block;
        }

        .menu-panel a {
            display: block;
            padding: 12px 16px;
            border-radius: 10px;
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-size: 12px;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .menu-panel a:hover {
            background: rgba(244, 241, 234, 0.12);
            transform: translateX(4px);
        }

        main {
            flex: 1;
            padding: 80px 24px 60px;
            display: flex;
            flex-direction: column;
            gap: 48px;
            align-items: center;
        }

        h1 {
            font-size: clamp(40px, 6vw, 88px);
            margin: 0;
            letter-spacing: 10px;
            text-transform: uppercase;
            text-align: center;
        }

        .lead {
            max-width: 720px;
            text-align: center;
            font-size: 18px;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.78);
        }

        .sisterhood-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
            gap: 28px;
            width: min(1040px, 100%);
        }

        .sisterhood-card {
            background: linear-gradient(160deg, rgba(244, 241, 234, 0.06), rgba(244, 241, 234, 0.02));
            border: 1px solid rgba(244, 241, 234, 0.08);
            border-radius: 18px;
            padding: 28px;
            display: flex;
            flex-direction: column;
            gap: 16px;
            position: relative;
            overflow: hidden;
        }

        .sisterhood-card::after {
            content: "";
            position: absolute;
            inset: 0;
            pointer-events: none;
            background: radial-gradient(circle at top right, rgba(244, 241, 234, 0.12), transparent 55%);
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .sisterhood-card:hover::after {
            opacity: 1;
        }

        .sisterhood-name {
            text-transform: uppercase;
            letter-spacing: 6px;
            font-weight: 600;
            font-size: 16px;
        }

        .sisterhood-description {
            margin: 0;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.78);
        }

        .sisterhood-members {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .empty-state {
            width: min(880px, 100%);
            border-radius: 18px;
            padding: 36px;
            border: 1px solid rgba(244, 241, 234, 0.08);
            background: linear-gradient(150deg, rgba(244, 241, 234, 0.08), rgba(244, 241, 234, 0.02));
            text-align: center;
            display: flex;
            flex-direction: column;
            gap: 12px;
            color: rgba(244, 241, 234, 0.78);
        }

        .empty-state h2 {
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 6px;
            font-size: 18px;
            color: #f4f1ea;
        }

        .empty-state p {
            margin: 0;
            line-height: 1.6;
        }

        .cta-card {
            width: min(880px, 100%);
            border-radius: 22px;
            padding: 40px;
            background: linear-gradient(130deg, rgba(244, 241, 234, 0.12), rgba(63, 12, 12, 0.45));
            border: 1px solid rgba(244, 241, 234, 0.1);
            display: flex;
            flex-direction: column;
            gap: 20px;
            text-align: center;
        }

        .cta-card h2 {
            margin: 0;
            font-size: 28px;
            letter-spacing: 6px;
            text-transform: uppercase;
        }

        .cta-card p {
            margin: 0;
            color: rgba(244, 241, 234, 0.78);
            line-height: 1.6;
        }

        .cta-card a {
            align-self: center;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 14px 26px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.24);
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 2px;
            text-transform: uppercase;
            font-size: 13px;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .cta-card a:hover {
            background: rgba(244, 241, 234, 0.15);
            transform: translateY(-2px);
        }

        .action-bar {
            margin-top: 24px;
            display: flex;
            justify-content: center;
        }

        .primary-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 12px 24px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.28);
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
            font-size: 13px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .primary-button:hover {
            background: rgba(244, 241, 234, 0.18);
            transform: translateY(-1px);
        }

        .status-banner {
            margin-top: 24px;
            padding: 14px 18px;
            border-radius: 14px;
            font-size: 14px;
            letter-spacing: 1px;
            text-transform: uppercase;
        }

        .status-banner.success {
            background: rgba(51, 133, 107, 0.16);
            border: 1px solid rgba(51, 133, 107, 0.35);
        }

        .status-banner.error {
            background: rgba(133, 51, 65, 0.16);
            border: 1px solid rgba(133, 51, 65, 0.35);
        }

        .create-sisterhood-form {
            margin-top: 24px;
            width: min(720px, 100%);
            border-radius: 18px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
            padding: 24px;
            display: none;
            flex-direction: column;
            gap: 18px;
        }

        .create-sisterhood-form.open {
            display: flex;
        }

        .form-grid {
            display: grid;
            gap: 16px;
        }

        .form-field {
            display: flex;
            flex-direction: column;
            gap: 6px;
            text-align: left;
        }

        .form-field label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .form-field input,
        .form-field textarea,
        .invite-form input {
            padding: 10px 12px;
            border-radius: 10px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: rgba(12, 12, 12, 0.55);
            color: #f4f1ea;
            font-size: 14px;
            font-family: inherit;
        }

        .form-field textarea {
            min-height: 96px;
            resize: vertical;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .secondary-button,
        .danger-button,
        .inline-form button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: transparent;
            color: #f4f1ea;
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, opacity 0.2s ease;
        }

        .secondary-button:hover,
        .inline-form button:hover {
            background: rgba(244, 241, 234, 0.12);
        }

        .danger-button {
            border-color: rgba(181, 65, 65, 0.45);
            color: #f6dcdc;
        }

        .danger-button:hover {
            background: rgba(181, 65, 65, 0.25);
        }

        .sisterhood-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 12px;
        }

        .member-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .member-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 12px;
            padding: 10px 12px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.04);
        }

        .member-identity {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .member-name {
            font-size: 14px;
            letter-spacing: 1px;
        }

        .member-actions {
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .inline-form {
            margin: 0;
        }

        .inline-form button {
            padding: 6px 12px;
            font-size: 11px;
            letter-spacing: 1.5px;
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 999px;
            font-size: 10px;
            letter-spacing: 2px;
            text-transform: uppercase;
            border: 1px solid rgba(244, 241, 234, 0.25);
            color: rgba(244, 241, 234, 0.8);
        }

        .badge.admin {
            border-color: rgba(126, 216, 182, 0.45);
            color: #c0f5de;
        }

        .badge.you {
            border-color: rgba(244, 241, 234, 0.45);
            color: #f4f1ea;
        }

        .invite-form {
            margin-top: 18px;
            display: grid;
            gap: 12px;
        }

        .invite-form label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .invite-form .invite-actions {
            display: flex;
            justify-content: flex-end;
        }

        .sisterhood-card footer {
            margin-top: 8px;
        }

        @@media (max-width: 768px) {
            .top-bar {
                padding: 18px 20px;
            }

            .brand {
                font-size: 16px;
                letter-spacing: 3px;
            }

            main {
                padding-top: 60px;
            }

            h1 {
                letter-spacing: 6px;
            }
        }
    </style>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body>
    @await Html.PartialAsync("_WineSurferTopBar", Context.Request.Path.Value ?? string.Empty)
    <main>
        <section>
            <h1>Sisterhoods</h1>
            @{
                var sanitizedDisplayName = string.IsNullOrWhiteSpace(Model.DisplayName) ? null : Model.DisplayName;
                var hasMembership = Model.Sisterhoods.Count > 0;
                string leadMessage;
                if (Model.IsAuthenticated && hasMembership)
                {
                    var prefix = sanitizedDisplayName is null ? "You&#39;re" : $"{sanitizedDisplayName}, you&#39;re";
                    leadMessage = $"{prefix} currently connected with these sisterhoods. Stay close to your fellow members and explore what&#39;s next together.";
                }
                else if (Model.IsAuthenticated)
                {
                    var subject = sanitizedDisplayName ?? "You";
                    leadMessage = $"{subject} haven&#39;t joined any sisterhoods yet. Discover the communities shaping tomorrow&#39;s wine world and find your next circle.";
                }
                else
                {
                    leadMessage = "Across continents and cultures, our Sisterhoods gather to share knowledge, amplify underrepresented voices, and craft cellars that celebrate every story in the vineyard. Explore the communities shaping tomorrow&#39;s wine world.";
                }
            }
            <p class="lead">@leadMessage</p>

            @if (!string.IsNullOrWhiteSpace(Model.StatusMessage))
            {
                <div class="status-banner success" role="status">@Model.StatusMessage</div>
            }

            @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <div class="status-banner error" role="alert">@Model.ErrorMessage</div>
            }

            @if (Model.IsAuthenticated)
            {
                <div class="action-bar">
                    <button type="button" class="primary-button" data-sisterhood-create-toggle>Create Sisterhood</button>
                </div>
                <form method="post" action="@Url.Action("CreateSisterhood", "WineSurfer")" class="create-sisterhood-form@(Model.ErrorMessage != null ? " open" : string.Empty)" data-sisterhood-create-form>
                    @Html.AntiForgeryToken()
                    <div class="form-grid">
                        <div class="form-field">
                            <label for="sisterhood-name">Name</label>
                            <input id="sisterhood-name" name="Name" type="text" maxlength="256" required placeholder="Give your sisterhood a name" />
                        </div>
                        <div class="form-field">
                            <label for="sisterhood-description">Description</label>
                            <textarea id="sisterhood-description" name="Description" maxlength="1024" placeholder="Share the vision for this community (optional)"></textarea>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="secondary-button">Create</button>
                    </div>
                </form>
            }
        </section>
        <section class="sisterhood-grid" aria-label="Wine Surfer sisterhood communities">
            @if (Model.Sisterhoods.Count > 0)
            {
                foreach (var sisterhood in Model.Sisterhoods)
                {
                    <article class="sisterhood-card">
                        <div class="sisterhood-header">
                            <div>
                                <h2 class="sisterhood-name">@sisterhood.Name</h2>
                                <p class="sisterhood-members">
                                    @sisterhood.MemberCount @((sisterhood.MemberCount == 1) ? "member" : "members")
                                    @if (sisterhood.CanManage)
                                    {
                                        <span class="badge admin" title="You manage this sisterhood">Admin</span>
                                    }
                                </p>
                            </div>
                            @if (sisterhood.CanManage)
                            {
                                <form method="post" action="@Url.Action("DeleteSisterhood", "WineSurfer")" class="inline-form" onsubmit="return confirm('Delete this sisterhood? This cannot be undone.');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                    <button type="submit" class="danger-button">Delete</button>
                                </form>
                            }
                        </div>
                        @if (!string.IsNullOrWhiteSpace(sisterhood.Description))
                        {
                            <p class="sisterhood-description">@sisterhood.Description</p>
                        }

                        @if (sisterhood.Members.Count > 0)
                        {
                            <ul class="member-list">
                                @foreach (var member in sisterhood.Members)
                                {
                                    <li>
                                        <div class="member-identity">
                                            <span class="member-name">@member.DisplayName</span>
                                            @if (member.IsAdmin)
                                            {
                                                <span class="badge admin">Admin</span>
                                            }
                                            @if (member.IsCurrentUser)
                                            {
                                                <span class="badge you">You</span>
                                            }
                                        </div>
                                        @if (sisterhood.CanManage && !member.IsCurrentUser)
                                        {
                                            <div class="member-actions">
                                                <form method="post" action="@Url.Action("UpdateSisterhoodAdmin", "WineSurfer")" class="inline-form">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                    <input type="hidden" name="UserId" value="@member.Id" />
                                                    <input type="hidden" name="MakeAdmin" value="@(member.IsAdmin ? "false" : "true")" />
                                                    <button type="submit" class="secondary-button">@(member.IsAdmin ? "Remove Admin" : "Make Admin")</button>
                                                </form>
                                                <form method="post" action="@Url.Action("RemoveSisterhoodMember", "WineSurfer")" class="inline-form" onsubmit="return confirm('Remove @member.DisplayName.Replace("'", "\\'") from this sisterhood?');">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                    <input type="hidden" name="UserId" value="@member.Id" />
                                                    <button type="submit" class="danger-button">Remove</button>
                                                </form>
                                            </div>
                                        }
                                    </li>
                                }
                            </ul>
                        }

                        @if (sisterhood.CanManage)
                        {
                            <form method="post" action="@Url.Action("InviteSisterhoodMember", "WineSurfer")" class="invite-form" data-sisterhood-invite-form>
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                <input type="hidden" name="UserId" value="" data-sisterhood-invite-user-id />
                                <label for="invite-member-@sisterhood.Id">Invite a Wine Surfer</label>
                                <input id="invite-member-@sisterhood.Id" name="MemberName" type="text" list="sisterhood-user-options" placeholder="Start typing a name" autocomplete="off" />
                                <div class="invite-actions">
                                    <button type="submit" class="secondary-button">Invite</button>
                                </div>
                            </form>
                        }
                    </article>
                }
            }
            else
            {
                <div class="empty-state" role="status">
                    <h2>@(Model.IsAuthenticated ? "No sisterhoods yet" : "Sign in to see your sisterhoods")</h2>
                    <p>
                        @(Model.IsAuthenticated
                            ? "When you join a sisterhood, it will appear here with quick insight into the community."
                            : "Authenticate to discover the sisterhoods you're connected to and explore tailored communities.")
                    </p>
                </div>
            }
        </section>
        <datalist id="sisterhood-user-options"></datalist>
        <section class="cta-card">
            <h2>Join the Wave</h2>
            <p>Bring your guild, tasting group, or collective into the Wine Surfer Sisterhoods network. Share events, co-create cellar maps, and leave no voice untasted.</p>
            <a href="/wine-surfer">Return to Wine Surfer</a>
        </section>
    </main>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const toggleButton = document.querySelector('[data-sisterhood-create-toggle]');
        const createForm = document.querySelector('[data-sisterhood-create-form]');

        if (toggleButton && createForm) {
            toggleButton.addEventListener('click', () => {
                createForm.classList.toggle('open');
            });
        }

        const inviteForms = document.querySelectorAll('form[data-sisterhood-invite-form]');
        if (inviteForms.length === 0) {
            return;
        }

        fetch('/wine-surfer/users')
            .then(response => response.ok ? response.json() : [])
            .then(users => {
                const dataList = document.getElementById('sisterhood-user-options');
                if (!dataList) {
                    return;
                }

                const userMap = new Map();
                users.forEach(user => {
                    if (!user?.name || !user?.id) {
                        return;
                    }

                    const option = document.createElement('option');
                    option.value = user.name;
                    if (user.tasteProfile) {
                        option.label = `${user.name} Â· ${user.tasteProfile}`;
                    }
                    option.dataset.userId = user.id;
                    dataList.appendChild(option);
                    userMap.set(user.name.toLowerCase(), user.id);
                });

                inviteForms.forEach(form => {
                    const input = form.querySelector('input[name="MemberName"]');
                    const hidden = form.querySelector('input[name="UserId"][data-sisterhood-invite-user-id]');
                    if (!input || !hidden) {
                        return;
                    }

                    const syncHiddenValue = () => {
                        const raw = input.value?.trim().toLowerCase();
                        if (raw && userMap.has(raw)) {
                            hidden.value = userMap.get(raw);
                        } else {
                            hidden.value = '';
                        }
                    };

                    input.addEventListener('change', syncHiddenValue);
                    input.addEventListener('blur', syncHiddenValue);
                });
            })
            .catch(() => { /* Non-blocking hint failure */ });
    });
</script>
</body>
</html>
