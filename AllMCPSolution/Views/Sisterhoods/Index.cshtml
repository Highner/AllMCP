@model AllMCPSolution.Controllers.WineSurferSisterhoodsViewModel
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@using Microsoft.AspNetCore.Html
@using System.Collections.Generic
@using System.Linq
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    var pendingInvitations = Model.IncomingInvitations
        .Where(invitation => invitation.Status == AllMCPSolution.Models.SisterhoodInvitationStatus.Pending)
        .ToList();
    var topBarModel = (ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel)
        ?? WineSurferTopBarModel.CreateFromSisterhoodData(
            currentPath,
            Model.IncomingInvitations,
            Model.SentInvitationNotifications,
            displayName: Model.DisplayName,
            isAdmin: Model.IsAdmin);
    ViewData["WineSurferPageTitle"] = "Sisterhoods";
}

@functions {
    private static DateTime NormalizeDateTime(DateTime value)
    {
        return value.Kind switch
        {
            DateTimeKind.Utc => value.ToLocalTime(),
            DateTimeKind.Unspecified => DateTime.SpecifyKind(value, DateTimeKind.Local),
            _ => value
        };
    }

    private static DateTime? NormalizeDateTime(DateTime? value)
    {
        return value.HasValue ? NormalizeDateTime(value.Value) : (DateTime?)null;
    }

    private static string FormatSipSessionSchedule(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("f");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("D") ?? "Schedule TBD";
    }

    private static string FormatSipSessionDateValue(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("yyyy-MM-dd");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("yyyy-MM-dd") ?? string.Empty;
    }

    private static string FormatSipSessionTimeValue(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        return localDateTime.HasValue ? localDateTime.Value.ToString("HH:mm") : string.Empty;
    }

    private static bool IsPastSipSession(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value < DateTime.Now;
        }

        var localDate = NormalizeDateTime(session.Date);
        if (localDate.HasValue)
        {
            return localDate.Value.Date < DateTime.Today;
        }

        return false;
    }

    private static string FormatSipSessionPastDateLabel(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("MMM d, yyyy");
        }

        var localDate = NormalizeDateTime(session.Date);
        if (localDate.HasValue)
        {
            return localDate.Value.ToString("MMM d, yyyy");
        }

        return "Schedule TBD";
    }

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer Â· Sisterhoods</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shared-ui.css" />
    <script defer src="/js/pwa.js"></script>
    <script defer src="/js/sip-session-modal.js"></script>
    <style>
        /* Sisterhood card split layout */
        .sisterhood-card__grid { display: grid; grid-template-columns: 1fr; gap: 16px; }
        .sisterhood-card__left, .sisterhood-card__right { min-width: 0; }
        @@media (min-width: 900px) {
            .sisterhood-card__grid { grid-template-columns: 1fr 1fr; align-items: start; }
        }
        /* Ensure top header/description remain full width within the card by placing grid only around body sections */
        :root {
            color-scheme: dark;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
        }

        body.no-scroll {
            overflow: hidden;
        }

        .top-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 24px 32px;
            position: sticky;
            top: 0;
            background: rgba(5, 5, 5, 0.92);
            backdrop-filter: blur(8px);
            border-bottom: 1px solid rgba(244, 241, 234, 0.08);
            z-index: 10;
            margin-left: calc(var(--wine-surfer-left-gutter, 0px) * -1);
            width: calc(100% + var(--wine-surfer-left-gutter, 0px));
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
            letter-spacing: 4px;
            text-transform: uppercase;
            font-weight: 600;
            font-size: 20px;
        }

        .top-bar-actions {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .notification-shell {
            position: relative;
            display: flex;
            align-items: center;
        }

        .top-bar-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 15px;
            font-weight: 600;
            letter-spacing: 1px;
            color: #f4f1ea;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease, transform 0.2s ease;
        }

        .top-bar-avatar:hover,
        .top-bar-avatar:focus-visible,
        .top-bar-avatar.active {
            background: rgba(244, 241, 234, 0.16);
            border-color: rgba(244, 241, 234, 0.4);
            outline: none;
        }

        .top-bar-avatar:focus-visible {
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.35);
        }

        .notification-badge {
            position: absolute;
            top: -4px;
            right: -6px;
            min-width: 18px;
            height: 18px;
            padding: 0 5px;
            border-radius: 999px;
            background: #f96b70;
            color: #050505;
            font-size: 11px;
            font-weight: 700;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .notification-panel {
            position: absolute;
            top: calc(100% + 14px);
            right: 0;
            width: min(300px, 80vw);
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.12);
            border-radius: 16px;
            padding: 18px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.55);
            display: none;
            z-index: 20;
        }

        .notification-panel.open {
            display: block;
        }

        .notification-heading {
            margin: 0 0 12px;
            font-size: 12px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.75);
        }

        .notification-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .notification-section {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-bottom: 16px;
        }

        .notification-section:last-of-type {
            margin-bottom: 0;
        }

        .notification-subheading {
            margin: 0;
            font-size: 11px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .notification-item {
            position: relative;
            margin: 0;
        }

        .notification-link {
            display: flex;
            flex-direction: column;
            gap: 4px;
            padding: 12px 38px 12px 14px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.05);
            color: #f4f1ea;
            text-decoration: none;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .notification-dismiss {
            position: absolute;
            top: 6px;
            right: 6px;
            width: 26px;
            height: 26px;
            border: none;
            border-radius: 999px;
            background: transparent;
            color: rgba(244, 241, 234, 0.65);
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            line-height: 1;
            transition: background 0.2s ease, color 0.2s ease;
        }

        .notification-dismiss:hover,
        .notification-dismiss:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.95);
            outline: none;
        }

        .notification-dismiss:focus-visible {
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.35);
        }

        .notification-link:hover,
        .notification-link:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            transform: translateY(-1px);
            outline: none;
        }

        .notification-title {
            font-size: 13px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            font-weight: 600;
        }

        .notification-meta {
            font-size: 12px;
            color: rgba(244, 241, 234, 0.75);
            letter-spacing: 1.2px;
        }

        .notification-tag {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 2px 8px;
            border-radius: 999px;
            font-size: 11px;
            letter-spacing: 1.1px;
            text-transform: uppercase;
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.9);
            width: fit-content;
        }

        .notification-empty {
            margin: 0 0 12px;
            font-size: 12px;
            letter-spacing: 1.3px;
            color: rgba(244, 241, 234, 0.65);
        }

        .notification-footer {
            margin-top: 14px;
            display: flex;
            justify-content: flex-end;
        }

        .notification-footer a {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 14px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            text-decoration: none;
            font-size: 11px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .notification-footer a:hover,
        .notification-footer a:focus-visible {
            background: rgba(244, 241, 234, 0.16);
            border-color: rgba(244, 241, 234, 0.4);
            outline: none;
        }

        .burger {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.15);
            background: rgba(244, 241, 234, 0.05);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .burger span {
            position: relative;
            width: 20px;
            height: 2px;
            background: #f4f1ea;
            display: block;
        }

        .burger span::before,
        .burger span::after {
            content: "";
            position: absolute;
            left: 0;
            width: 100%;
            height: 2px;
            background: #f4f1ea;
            transition: transform 0.2s ease;
        }

        .burger span::before {
            transform: translateY(-6px);
        }

        .burger span::after {
            transform: translateY(6px);
        }

        .burger.active span {
            background: transparent;
        }

        .burger.active span::before {
            transform: rotate(45deg);
        }

        .burger.active span::after {
            transform: rotate(-45deg);
        }

        .menu-panel {
            position: absolute;
            top: 76px;
            right: 32px;
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 16px;
            padding: 20px;
            min-width: 220px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.45);
            display: none;
        }

        .menu-panel.open {
            display: block;
        }

        .menu-panel a {
            display: block;
            padding: 12px 16px;
            border-radius: 10px;
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-size: 12px;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .menu-panel a:hover {
            background: rgba(244, 241, 234, 0.12);
            transform: translateX(4px);
        }

        .invitation-section {
            width: min(1040px, 100%);
            border-radius: 20px;
            padding: 28px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .invitation-section-header {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .invitation-section-header h2 {
            margin: 0;
            font-size: 18px;
            text-transform: uppercase;
            letter-spacing: 4px;
        }

        .invitation-section-header p {
            margin: 0;
            color: rgba(244, 241, 234, 0.65);
            font-size: 14px;
        }

        .invitation-card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .invitation-card {
            min-height: 0;
        }

        .invitation-card-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            gap: 12px;
        }

        .invitation-card-title {
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 5px;
            font-size: 15px;
        }

        .invitation-status {
            padding: 4px 10px;
            border-radius: 999px;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            border: 1px solid rgba(244, 241, 234, 0.18);
        }

        .invitation-status.pending {
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
        }

        .invitation-status.accepted {
            background: rgba(65, 160, 108, 0.16);
            border-color: rgba(65, 160, 108, 0.35);
            color: #9fe3c1;
        }

        .invitation-status.declined {
            background: rgba(214, 104, 86, 0.16);
            border-color: rgba(214, 104, 86, 0.35);
            color: #f3b0a3;
        }

        .invitation-description {
            margin: 0;
            color: rgba(244, 241, 234, 0.72);
            line-height: 1.55;
        }

        .invitation-email {
            margin: 0;
            font-size: 14px;
            color: rgba(244, 241, 234, 0.72);
        }

        .invitation-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            font-size: 11px;
        }

        .invitation-tag {
            padding: 4px 10px;
            border-radius: 999px;
            letter-spacing: 1px;
            text-transform: uppercase;
            background: rgba(244, 241, 234, 0.08);
            color: rgba(244, 241, 234, 0.82);
        }

        .invitation-tag.account {
            background: rgba(86, 152, 214, 0.18);
            color: #b7d8ff;
        }

        .invitation-tag.email {
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.82);
        }

        .invitation-updated {
            margin: 0;
            font-size: 12px;
            color: rgba(244, 241, 234, 0.55);
        }

        .invitation-response {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.7);
        }

        .invitation-card-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .sisterhood-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 28px;
            width: min(1040px, 100%);
        }

        .sisterhood-name {
            text-transform: uppercase;
            letter-spacing: 6px;
            font-weight: 600;
            font-size: 16px;
        }

        .sisterhood-description {
            margin: 0;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.78);
        }

        .sisterhood-members {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .pending-invite-count {
            margin-left: 6px;
            font-size: 11px;
            letter-spacing: 1.5px;
            color: rgba(244, 241, 234, 0.55);
        }


        .create-sisterhood-form {
            margin-top: 24px;
            width: min(720px, 100%);
            border-radius: 18px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
            padding: 24px;
            display: none;
            flex-direction: column;
            gap: 18px;
        }

        .create-sisterhood-form.open {
            display: flex;
        }

        .edit-sisterhood-form {
            margin-top: 8px;
            border-radius: 16px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.03);
            padding: 20px;
            display: none;
            flex-direction: column;
            gap: 16px;
        }

        .edit-sisterhood-form.open {
            display: flex;
        }

        .form-grid {
            display: grid;
            gap: 16px;
        }

        .form-field {
            display: flex;
            flex-direction: column;
            gap: 6px;
            text-align: left;
        }

        .form-field label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .form-field input,
        .form-field textarea,
        .invite-form input {
            padding: 10px 12px;
            border-radius: 10px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: rgba(12, 12, 12, 0.55);
            color: #f4f1ea;
            font-size: 14px;
            font-family: inherit;
        }

        .form-field textarea {
            min-height: 96px;
            resize: vertical;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .sisterhood-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 12px;
        }

        .sisterhood-actions {
            display: inline-flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .member-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .member-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 12px;
            padding: 10px 12px;
            border-radius: 12px;
            border: 1px solid var(--wine-surface-border);
            background: rgba(244, 241, 234, 0.04);
        }

        .member-identity {
            display: flex;
            align-items: center;
            gap: 10px;
            flex: 1;
        }

        .member-avatar {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            font-size: 14px;
            font-weight: 600;
            letter-spacing: 1px;
        }

        .member-details {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .member-badges {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 6px;
        }

        .member-name {
            font-size: 14px;
            letter-spacing: 1px;
        }

        .member-actions {
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .sip-session-section {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-top: 0;
        }

        .sip-session-section-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        /* Ensure consistent bottom spacing beneath headers in the left column (e.g., Members) */
        .sisterhood-card__left .sip-session-section-header {
            margin-bottom: 12px;
        }

        /* Unified, borderless header toolbar for section titles and optional actions */
        .sisterhood-toolbar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
            min-height: 44px; /* uniform height to accommodate an action button */
        }

        .sip-session-title {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .sip-session-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .sip-session-card--past {
            flex-direction: row;
            flex-wrap: nowrap;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
            padding: 12px 16px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.08);
            background: rgba(244, 241, 234, 0.03);
        }

        .sip-session-card--past .sip-session-name {
            margin: 0;
            font-size: 16px;
            letter-spacing: 3px;
        }

        .sip-session-past-name {
            display: inline-flex;
            align-items: center;
            flex: 1 1 auto;
            min-width: 0;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 3px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .sip-session-past-date {
            display: inline-flex;
            align-items: center;
            flex: 0 0 auto;
            font-size: 12px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
            white-space: nowrap;
        }

        @@media (max-width: 600px) {
            .sip-session-card--past {
                flex-wrap: wrap;
                align-items: flex-start;
                gap: 6px;
            }

            .sip-session-past-name,
            .sip-session-past-date {
                white-space: normal;
            }
        }

        .sip-session-item {
            border-radius: 14px;
            border: 1px solid rgba(244, 241, 234, 0.08);
            background: rgba(244, 241, 234, 0.04);
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .sip-session-item-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            gap: 12px;
        }

        .sip-session-info {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .sip-session-bottle-item {
            position: relative;
            padding-left: 18px;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .sip-session-bottle-item::before {
            content: "";
            position: absolute;
            left: 2px;
            top: 12px;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: rgba(244, 241, 234, 0.55);
        }

        .sip-session-bottle-info {
            display: flex;
            flex-wrap: wrap;
            align-items: baseline;
            gap: 6px;
            font-size: 13px;
            line-height: 1.5;
        }

        .sip-session-bottle-label {
            flex: 0 1 auto;
            min-width: 0;
            font-weight: 500;
            color: rgba(244, 241, 234, 0.88);
        }

        .sip-session-bottle-status {
            font-size: 11px;
            letter-spacing: 1.2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.55);
        }

        .sip-session-bottle-scores {
            display: inline-flex;
            flex-wrap: wrap;
            align-items: baseline;
            gap: 8px;
            font-size: 11px;
            color: rgba(244, 241, 234, 0.7);
        }

        .sip-session-bottle-score {
            display: inline-flex;
            align-items: baseline;
            gap: 4px;
        }

        .sip-session-bottle-score-label {
            text-transform: uppercase;
            letter-spacing: 1.2px;
            font-size: 10px;
            color: rgba(244, 241, 234, 0.55);
        }

        .sip-session-bottle-score-value {
            font-weight: 600;
            color: rgba(244, 241, 234, 0.88);
        }

        .sip-session-bottle-score-divider {
            color: rgba(244, 241, 234, 0.35);
        }

        .sip-session-bottle-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
        }

        .sip-session-bottle-actions form {
            margin: 0;
        }

        .sip-session-bottle-drink-form {
            display: inline-flex;
        }

        .sip-session-bottle-action-button {
            padding: 4px 10px;
            font-size: 10px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
        }

        .sip-session-bottle-action-button:disabled {
            opacity: 0.5;
        }

        .sip-session-bottle-remove-button {
            color: #f96b70;
        }

        .sip-session-actions {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            flex-wrap: wrap;
        }

        .sip-session-contribute {
            display: flex;
            justify-content: flex-end;
        }

        .sip-session-contribute .sisterhood-button {
            width: auto;
        }

        .sip-session-edit-region {
            margin-top: 16px;
        }

        .sip-session-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
            border-radius: 14px;
            border: 1px dashed rgba(244, 241, 234, 0.18);
            background: rgba(244, 241, 234, 0.03);
            padding: 16px;
        }

        .sip-session-form label {
            font-size: 12px;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .sip-session-form input[type="text"],
        .sip-session-form input[type="date"],
        .sip-session-form input[type="time"],
        .sip-session-form textarea {
            width: 100%;
            padding: 10px 12px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.16);
            background: rgba(244, 241, 234, 0.06);
            color: #f4f1ea;
            font-size: 14px;
        }

        .sip-session-form textarea {
            min-height: 80px;
            resize: vertical;
        }

        .sip-session-form input[type="text"]:focus,
        .sip-session-form input[type="date"]:focus,
        .sip-session-form input[type="time"]:focus,
        .sip-session-form textarea:focus {
            outline: none;
            border-color: rgba(244, 241, 234, 0.3);
            background: rgba(244, 241, 234, 0.12);
        }

        .sip-session-form-actions {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .sip-session-delete-section {
            margin-top: 18px;
            padding-top: 14px;
            border-top: 1px solid rgba(244, 241, 234, 0.16);
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .sip-session-delete-hint {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.65);
        }

        .sip-session-delete-form {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .contribute-modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(5, 5, 5, 0.72);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 24px;
            z-index: 50;
            backdrop-filter: blur(6px);
        }

        .contribute-modal-backdrop[hidden] {
            display: none;
        }

        .contribute-modal {
            background: rgba(12, 12, 12, 0.96);
            border-radius: 16px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            width: min(520px, 100%);
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            box-shadow: 0 25px 60px rgba(0, 0, 0, 0.45);
        }

        .contribute-modal__header {
            padding: 20px 24px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        .contribute-modal__title {
            margin: 0;
            font-size: 16px;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .contribute-modal__body {
            padding: 0;
        }

        .contribute-modal__form {
            display: flex;
            flex-direction: column;
            gap: 16px;
            padding: 24px;
            flex: 1;
        }

        .contribute-modal__hint {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.75);
        }

        .contribute-modal__list {
            flex: 1;
            overflow-y: auto;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
            padding: 12px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .contribute-modal__list ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .contribute-modal__option label {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 10px;
            border-radius: 10px;
            transition: background 0.2s ease;
            cursor: pointer;
        }

        .contribute-modal__option label:hover,
        .contribute-modal__option label:focus-within {
            background: rgba(244, 241, 234, 0.08);
        }

        .contribute-modal__option input[type="checkbox"] {
            width: 16px;
            height: 16px;
            accent-color: #c086f2;
        }

        .contribute-modal__option[data-disabled] label {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .contribute-modal__option[data-disabled] label:hover,
        .contribute-modal__option[data-disabled] label:focus-within {
            background: transparent;
        }

        .contribute-modal__empty {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.72);
        }

        .contribute-modal__actions {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 12px;
            padding-top: 8px;
        }

        .sip-session-edit-modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(5, 5, 5, 0.72);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 24px;
            z-index: 55;
            backdrop-filter: blur(6px);
        }

        .sip-session-edit-modal-backdrop[hidden] {
            display: none;
        }

        .sip-session-edit-modal {
            background: rgba(12, 12, 12, 0.96);
            border-radius: 16px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            width: min(540px, 100%);
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            box-shadow: 0 25px 60px rgba(0, 0, 0, 0.45);
            overflow: hidden;
        }

        .sip-session-edit-modal__header {
            padding: 20px 24px 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            gap: 0;
            padding-right: 64px;
            border-bottom: 1px solid rgba(244, 241, 234, 0.12);
        }

        .sip-session-edit-modal__close {
            position: absolute;
            top: 16px;
            right: 20px;
        }

        .sip-session-edit-modal__title {
            margin: 0;
            font-size: 16px;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .sip-session-edit-modal__body {
            padding: 24px;
            overflow-y: auto;
            max-height: calc(90vh - 100px);
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .sip-session-edit-modal__body .sip-session-form {
            border: none;
            padding: 0;
            background: transparent;
            box-shadow: none;
        }

        .sip-session-edit-modal__body .sip-session-form .sip-session-form-actions {
            justify-content: flex-end;
        }

        .sip-session-rate-modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(5, 5, 5, 0.72);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 24px;
            z-index: 60;
            backdrop-filter: blur(6px);
        }

        .sip-session-rate-modal-backdrop[hidden] {
            display: none;
        }

        .sip-session-rate-modal {
            width: min(460px, 100%);
            max-height: 90vh;
            background: rgba(12, 12, 12, 0.96);
            border-radius: 16px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            box-shadow: 0 24px 55px rgba(0, 0, 0, 0.45);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .sip-session-rate-modal__header {
            padding: 20px 24px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
            border-bottom: 1px solid rgba(244, 241, 234, 0.12);
        }

        .sip-session-rate-modal__title {
            margin: 0;
            font-size: 16px;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .sip-session-rate-modal__body {
            padding: 0;
        }

        .sip-session-rate-modal__form {
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .sip-session-rate-modal__form label {
            font-size: 12px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.72);
        }

        .sip-session-rate-modal__form textarea,
        .sip-session-rate-modal__form input[type="number"] {
            width: 100%;
            padding: 10px 12px;
            border-radius: 10px;
            border: 1px solid rgba(244, 241, 234, 0.14);
            background: rgba(244, 241, 234, 0.05);
            color: #f4f1ea;
            font-family: inherit;
            font-size: 14px;
        }

        .sip-session-rate-modal__form textarea:focus,
        .sip-session-rate-modal__form input[type="number"]:focus {
            outline: none;
            border-color: rgba(244, 241, 234, 0.4);
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.12);
        }

        .sip-session-rate-modal__form textarea {
            min-height: 140px;
            resize: vertical;
        }

        .sip-session-rate-modal__form input[type="number"] {
            appearance: textfield;
        }

        .sip-session-rate-modal__form input[type="number"]::-webkit-outer-spin-button,
        .sip-session-rate-modal__form input[type="number"]::-webkit-inner-spin-button {
            margin: 0;
            appearance: none;
        }

        .sip-session-rate-modal__hint {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.75);
        }

        .sip-session-rate-modal__footnote {
            margin: -8px 0 0;
            font-size: 11px;
            color: rgba(244, 241, 234, 0.55);
        }

        .sip-session-rate-modal__actions {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 12px;
        }

        .pending-invitations {
            margin-top: 18px;
            padding: 16px;
            border-radius: 14px;
            background: rgba(244, 241, 234, 0.04);
            border: 1px solid rgba(244, 241, 234, 0.08);
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .pending-invitations-header {
            display: flex;
            align-items: baseline;
            justify-content: space-between;
            gap: 12px;
        }

        .pending-invitations-title {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .pending-invitations-count {
            font-size: 11px;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.5);
        }

        .pending-invitations-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .pending-invitations-item {
            padding: 10px 12px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.03);
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .pending-invite-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 12px;
        }

        .pending-invite-email {
            font-size: 13px;
            letter-spacing: 1px;
        }

        .pending-invite-status {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .pending-invite-updated {
            font-size: 11px;
            letter-spacing: 1.5px;
            color: rgba(244, 241, 234, 0.55);
        }

        .pending-invite-actions {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 6px;
            margin-top: 4px;
        }

        .pending-invite-actions .sisterhood-button {
            align-self: flex-start;
        }

        .pending-invite-actions .invite-feedback {
            flex-basis: 100%;
            margin: 0;
        }


        .inline-form {
            margin: 0;
            display: inline;
        }

        .badge,
        .wine-card__badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 999px;
            font-size: 10px;
            letter-spacing: 2px;
            text-transform: uppercase;
            border: 1px solid rgba(244, 241, 234, 0.25);
            color: rgba(244, 241, 234, 0.8);
        }

        .badge.admin,
        .wine-card__badge.admin {
            border-color: rgba(126, 216, 182, 0.45);
            color: #c0f5de;
        }

        .badge.you,
        .wine-card__badge.you {
            border-color: rgba(244, 241, 234, 0.45);
            color: #f4f1ea;
        }

        .invite-form {
            margin-top: 18px;
            display: grid;
            gap: 12px;
        }

        .invite-form label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .invite-form .invite-actions {
            display: flex;
            justify-content: flex-end;
        }

        .invite-form .invite-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        .invite-feedback {
            font-size: 13px;
            letter-spacing: 0.5px;
            color: rgba(244, 241, 234, 0.72);
            min-height: 1.2em;
        }

        .invite-feedback[hidden] {
            display: none;
        }

        .invite-feedback.is-success {
            color: #b5f5dc;
        }

        .invite-feedback.is-error {
            color: #f7a4b6;
        }

        .invite-feedback.is-mailto {
            color: #f9e27d;
        }

        .invite-feedback.is-pending {
            color: rgba(244, 241, 234, 0.6);
        }

        .sisterhood-card footer {
            margin-top: 8px;
        }

        @@media (max-width: 768px) {
            .top-bar {
                padding: 18px 20px;
                gap: 12px;
            }

            .brand {
                font-size: 16px;
                letter-spacing: 3px;
            }

            .top-bar-actions {
                width: 100%;
                justify-content: space-between;
            }

            .sisterhood-grid {
                width: 100%;
                gap: 20px;
            }

            .create-sisterhood-form,
            .pending-invitations {
                padding: 20px;
            }
        }

        @@media (max-width: 640px) {
            .top-bar {
                flex-direction: column;
                align-items: stretch;
            }

            .top-bar-actions {
                justify-content: flex-end;
            }

            .sisterhood-card {
                padding: 20px;
            }

            .sisterhood-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 16px;
            }

            .sisterhood-actions {
                display: flex;
                flex-direction: column;
                width: 100%;
                gap: 10px;
            }

            .sisterhood-actions .inline-form {
                display: block;
                width: 100%;
            }

            .sisterhood-actions .sisterhood-button {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body class="wine-app wine-app--with-bottom-nav">
    @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
    <main class="wine-surfer-layout">
        <section>
            @{
                var sanitizedDisplayName = string.IsNullOrWhiteSpace(Model.DisplayName) ? null : Model.DisplayName;
                var hasMembership = Model.Sisterhoods.Count > 0;
                string leadMessage;
                if (Model.IsAuthenticated && hasMembership)
                {
                    // Removed verbose lead text for members with existing sisterhoods per issue requirement
                    leadMessage = null;
                }
                else if (Model.IsAuthenticated)
                {
                    var subject = sanitizedDisplayName ?? "You";
                    leadMessage = $"{subject} haven't joined any sisterhoods yet. Discover the communities shaping tomorrow's wine world and find your next circle.";
                }
                else
                {
                    leadMessage = "Across continents and cultures, our Sisterhoods gather to share knowledge, amplify underrepresented voices, and craft cellars that celebrate every story in the vineyard. Explore the communities shaping tomorrow's wine world.";
                }
            }
            @if (!string.IsNullOrWhiteSpace(leadMessage))
            {
                <p class="lead">@leadMessage</p>
            }

            @if (!string.IsNullOrWhiteSpace(Model.StatusMessage))
            {
                <div class="status-banner success" role="status">@Model.StatusMessage</div>
            }

            @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <div class="status-banner error" role="alert">@Model.ErrorMessage</div>
            }

            @if (Model.IsAuthenticated)
            {
                <div class="action-bar">
                    <button type="button" class="sisterhood-button" data-sisterhood-create-toggle>Create Sisterhood</button>
                </div>
                <form method="post" action="@Url.Action("CreateSisterhood", "WineSurfer")" class="create-sisterhood-form@(Model.ErrorMessage != null ? " open" : string.Empty)" data-sisterhood-create-form>
                    @Html.AntiForgeryToken()
                    <div class="form-grid">
                        <div class="form-field">
                            <label for="sisterhood-name">Name</label>
                            <input id="sisterhood-name" name="Name" type="text" maxlength="256" required placeholder="Give your sisterhood a name" />
                        </div>
                        <div class="form-field">
                            <label for="sisterhood-description">Description</label>
                            <textarea id="sisterhood-description" name="Description" maxlength="1024" placeholder="Share the vision for this community (optional)"></textarea>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="sisterhood-button">Create</button>
                    </div>
                </form>
            }
        </section>
        @{
            var openInvitations = Model.IncomingInvitations
                .Where(invitation => invitation.Status == AllMCPSolution.Models.SisterhoodInvitationStatus.Pending)
                .ToList();
        }
        @if (openInvitations.Count > 0)
        {
            var acceptAction = Url.Action("AcceptSisterhoodInvitation", "WineSurfer");
            var declineAction = Url.Action("DeclineSisterhoodInvitation", "WineSurfer");
            var deleteAction = Url.Action("DeleteSisterhoodInvitation", "WineSurfer");
            <section class="invitation-section wine-surface wine-surface-border" aria-label="Sisterhood invitations awaiting your response">
                <div class="invitation-section-header">
                    <h2>Invitations waiting for you</h2>
                    <p>Respond to join a sisterhood or decline to clear the invite. You can remove invitations whenever you like.</p>
                </div>
                <div class="invitation-card-grid">
                    @foreach (var invitation in openInvitations)
                    {
                        var statusClass = invitation.Status.ToString().ToLowerInvariant();
                        var isPending = invitation.Status == AllMCPSolution.Models.SisterhoodInvitationStatus.Pending;
                        var responseMessage = invitation.Status switch
                        {
                            AllMCPSolution.Models.SisterhoodInvitationStatus.Accepted => "You accepted this invitation.",
                            AllMCPSolution.Models.SisterhoodInvitationStatus.Declined => "You declined this invitation.",
                            _ => ""
                        };
                        var updatedLocal = invitation.UpdatedAtUtc.ToLocalTime();
                        var createdLocal = invitation.CreatedAtUtc.ToLocalTime();
                        <article class="invitation-card wine-card wine-surface wine-surface-border wine-card-hover" data-invitation-card data-invitation-id="@invitation.Id">
                            <div class="invitation-card-header wine-card__header">
                                <h3 class="invitation-card-title wine-card__title">@invitation.SisterhoodName</h3>
                                <span class="invitation-status wine-card__badge @statusClass">@invitation.Status</span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(invitation.SisterhoodDescription))
                            {
                                <p class="invitation-description wine-card__description">@invitation.SisterhoodDescription</p>
                            }
                            <p class="invitation-email wine-card__meta">Invited as <strong>@invitation.InviteeEmail</strong></p>
                            <div class="invitation-tags wine-card__tags">
                                @if (invitation.MatchesUserId)
                                {
                                    <span class="invitation-tag wine-card__tag account">Linked to your account</span>
                                }
                                else if (invitation.MatchesEmail)
                                {
                                    <span class="invitation-tag wine-card__tag email">Email match</span>
                                }
                            </div>
                            <p class="invitation-updated wine-card__meta" title="@($"Sent {createdLocal:f}")">Updated @updatedLocal.ToString("g")</p>
                            @if (!string.IsNullOrEmpty(responseMessage))
                            {
                                <p class="invitation-response wine-card__meta">@responseMessage</p>
                            }
                            <div class="invitation-card-actions wine-card__actions">
                                @if (isPending)
                                {
                                    <form method="post" action="@(acceptAction ?? string.Empty)" class="inline-form">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="InvitationId" value="@invitation.Id" />
                                        <button type="submit" class="sisterhood-button sisterhood-button--primary">Accept</button>
                                    </form>
                                    <form method="post" action="@(declineAction ?? string.Empty)" class="inline-form">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="InvitationId" value="@invitation.Id" />
                                        <button type="submit" class="sisterhood-button">Decline</button>
                                    </form>
                                }
                                <form method="post" action="@(deleteAction ?? string.Empty)" class="inline-form" onsubmit="return confirm('Remove this invitation?');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="InvitationId" value="@invitation.Id" />
                                    <button type="submit" class="sisterhood-button sisterhood-button--ghost-danger">Delete invitation</button>
                                </form>
                            </div>
                        </article>
                    }
                </div>
            </section>
        }
        <section class="sisterhood-grid" aria-label="Wine Surfer sisterhood communities">
            @if (Model.Sisterhoods.Count > 0)
            {
                foreach (var sisterhood in Model.Sisterhoods)
                {
                    var isCurrentUserMember = Model.CurrentUserId.HasValue && sisterhood.Members.Any(member => member.IsCurrentUser);
                    var leaveConfirmName = isCurrentUserMember
                        ? (string.IsNullOrWhiteSpace(sisterhood.Name)
                            ? "this sisterhood"
                            : sisterhood.Name.Replace("'", "\\'"))
                        : null;
                    var hasActions = sisterhood.CanManage || isCurrentUserMember;

                    <article class="sisterhood-card wine-card wine-surface wine-surface-border wine-card-hover" data-sisterhood-card data-sisterhood-id="@sisterhood.Id">
                        <div class="sisterhood-header wine-card__header">
                            <div>
                                <h2 class="sisterhood-name wine-card__title">@sisterhood.Name</h2>
                                <p class="sisterhood-members wine-card__subtitle">
                                    @sisterhood.MemberCount @((sisterhood.MemberCount == 1) ? "member" : "members")
                                    @if (sisterhood.PendingInvitations.Count > 0)
                                    {
                                        <span class="pending-invite-count wine-card__meta">Â· @sisterhood.PendingInvitations.Count pending invite@((sisterhood.PendingInvitations.Count == 1) ? string.Empty : "s")</span>
                                    }
                                    @if (sisterhood.CanManage)
                                    {
                                        <span class="badge admin wine-card__badge" title="You manage this sisterhood">Admin</span>
                                    }
                                </p>
                            </div>
                            @if (hasActions)
                            {
                                <div class="sisterhood-actions wine-card__actions">
                                    @if (sisterhood.CanManage)
                                    {
                                        <button type="button"
                                                class="sisterhood-button"
                                                data-sisterhood-edit-toggle="@sisterhood.Id"
                                                aria-expanded="false"
                                                aria-controls="edit-sisterhood-form-@sisterhood.Id">
                                            Edit
                                        </button>
                                        <form method="post" action="@Url.Action("DeleteSisterhood", "WineSurfer")" class="inline-form" onsubmit="return confirm('Delete this sisterhood? This cannot be undone.');">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                            <button type="submit" class="sisterhood-button sisterhood-button--danger">Delete</button>
                                        </form>
                                    }
                                    @if (isCurrentUserMember && leaveConfirmName is not null)
                                    {
                                        <form method="post"
                                              action="@Url.Action("RemoveSisterhoodMember", "WineSurfer")"
                                              class="inline-form"
                                              onsubmit="return confirm('Leave @leaveConfirmName?');">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                            <input type="hidden" name="UserId" value="@Model.CurrentUserId" />
                                            <button type="submit" class="sisterhood-button sisterhood-button--ghost-danger">Leave sisterhood</button>
                                        </form>
                                    }
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrWhiteSpace(sisterhood.Description))
                        {
                            <p class="sisterhood-description wine-card__description">@sisterhood.Description</p>
                        }

                        @if (sisterhood.CanManage)
                        {
                            <form method="post"
                                  action="@Url.Action("UpdateSisterhoodDetails", "WineSurfer")"
                                  class="edit-sisterhood-form"
                                  data-sisterhood-edit-form
                                  data-sisterhood-id="@sisterhood.Id"
                                  id="edit-sisterhood-form-@sisterhood.Id">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                <div class="form-grid">
                                    <div class="form-field">
                                        <label for="edit-name-@sisterhood.Id">Name</label>
                                        <input id="edit-name-@sisterhood.Id"
                                               name="Name"
                                               type="text"
                                               value="@sisterhood.Name"
                                               maxlength="256"
                                               minlength="2"
                                               required />
                                    </div>
                                    <div class="form-field">
                                        <label for="edit-description-@sisterhood.Id">Description</label>
                                        <textarea id="edit-description-@sisterhood.Id"
                                                  name="Description"
                                                  maxlength="1024">@(sisterhood.Description ?? string.Empty)</textarea>
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <button type="submit" class="sisterhood-button">Save changes</button>
                                    <button type="button" class="sisterhood-button sisterhood-button--ghost" data-sisterhood-edit-cancel data-sisterhood-id="@sisterhood.Id">Cancel</button>
                                </div>
                            </form>
                        }

                        <div class="sisterhood-card__grid">
                        <div class="sisterhood-card__left">
                        @if (sisterhood.Members.Count > 0)
                        {
                            <div class="sip-session-section-header sisterhood-toolbar">
                                <span class="sip-session-title">Members</span>
                            </div>
                            <ul class="member-list">
                                @foreach (var member in sisterhood.Members)
                                {
                                    <li>
                                        @{ var avatarLabel = string.IsNullOrWhiteSpace(member.DisplayName) ? "Member avatar" : $"Avatar for {member.DisplayName}"; }
                                            <div class="member-identity">
                                                <span class="member-avatar" role="img" aria-label="@avatarLabel">@member.AvatarLetter</span>
                                                <div class="member-details">
                                                    <span class="member-name">@member.DisplayName</span>
                                                    @if (member.IsAdmin || member.IsCurrentUser)
                                                    {
                                                        <div class="member-badges">
                                                            @if (member.IsAdmin)
                                                            {
                                                                <span class="badge admin wine-card__badge">Admin</span>
                                                            }
                                                            @if (member.IsCurrentUser)
                                                            {
                                                                <span class="badge you wine-card__badge">You</span>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                        </div>
                                        @if (sisterhood.CanManage && !member.IsCurrentUser)
                                        {
                                            <div class="member-actions">
                                                <form method="post" action="@Url.Action("UpdateSisterhoodAdmin", "WineSurfer")" class="inline-form">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                    <input type="hidden" name="UserId" value="@member.Id" />
                                                    <input type="hidden" name="MakeAdmin" value="@(member.IsAdmin ? "false" : "true")" />
                                                    <button type="submit" class="sisterhood-button">@(member.IsAdmin ? "Remove Admin" : "Make Admin")</button>
                                                </form>
                                                @if (!member.IsAdmin)
                                                {
                                                    <form method="post" action="@Url.Action("RemoveSisterhoodMember", "WineSurfer")" class="inline-form" onsubmit="return confirm('Remove @member.DisplayName.Replace("'", "\\'") from this sisterhood?');">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                        <input type="hidden" name="UserId" value="@member.Id" />
                                                        <button type="submit" class="sisterhood-button sisterhood-button--danger">Remove</button>
                                                    </form>
                                                }
                                            </div>
                                        }
                                    </li>
                                }
                            </ul>
                        }

                        @if (sisterhood.CanManage && sisterhood.PendingInvitations.Count > 0)
                        {
                            <div class="pending-invitations" role="group" aria-label="Pending invitations">
                                <div class="pending-invitations-header">
                                    <span class="pending-invitations-title">Pending invitations</span>
                                    <span class="pending-invitations-count">@sisterhood.PendingInvitations.Count @((sisterhood.PendingInvitations.Count == 1) ? "invite" : "invites")</span>
                                </div>
                                @{
                                    var resendEndpoint = Url.Action("InviteSisterhoodMember", "WineSurfer");
                                    var removeEndpoint = Url.Action("RemovePendingSisterhoodInvitation", "WineSurfer");
                                }
                                @Html.AntiForgeryToken()
                                <ul class="pending-invitations-list">
                                    @foreach (var invitation in sisterhood.PendingInvitations)
                                    {
                                        var invitationLabel = string.IsNullOrWhiteSpace(invitation.InviteeName)
                                            ? invitation.Email
                                            : $"{invitation.InviteeName} Â· {invitation.Email}";
                                        <li class="pending-invitations-item" data-pending-invitation>
                                            <div class="pending-invite-row">
                                                <span class="pending-invite-email">@invitationLabel</span>
                                                <span class="pending-invite-status">@invitation.Status</span>
                                            </div>
                                            <span class="pending-invite-updated" data-pending-invite-updated>Updated @invitation.UpdatedAtUtc.ToLocalTime().ToString("g")</span>
                                            <div class="pending-invite-actions">
                                                <button type="button"
                                                        class="sisterhood-button"
                                                        data-resend-invite-button
                                                        data-endpoint="@(resendEndpoint ?? string.Empty)"
                                                        data-sisterhood-id="@sisterhood.Id"
                                                        data-invitation-email="@invitation.Email"
                                                        data-invitation-user-id="@(invitation.InviteeUserId?.ToString() ?? string.Empty)"
                                                        data-invitation-name="@(invitation.InviteeName ?? string.Empty)">Resend invitation mail</button>
                                                <button type="button"
                                                        class="sisterhood-button sisterhood-button--ghost-danger"
                                                        data-remove-invite-button
                                                        data-endpoint="@(removeEndpoint ?? string.Empty)"
                                                        data-sisterhood-id="@sisterhood.Id"
                                                        data-invitation-id="@invitation.Id"
                                                        data-invitation-label="@invitationLabel">Remove invitation</button>
                                                <p class="invite-feedback pending-invite-feedback" data-resend-invite-feedback aria-live="polite" hidden></p>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                        @if (sisterhood.CanManage)
                        {
                            <form method="post" action="@Url.Action("InviteSisterhoodMember", "WineSurfer")" class="invite-form" data-sisterhood-invite-form>
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                <input type="hidden" name="UserId" value="" data-sisterhood-invite-user-id />
                                <input type="hidden" name="MemberEmail" value="" data-sisterhood-invite-email />
                                <input type="hidden" name="IsEmail" value="false" data-sisterhood-invite-is-email />
                                <div class="invite-header sisterhood-toolbar">
                                    <label for="invite-member-@sisterhood.Id">Invite a Wine Surfer</label>
                                    <div class="invite-actions">
                                        <button type="submit" class="sisterhood-button">Invite</button>
                                    </div>
                                </div>
                                <div class="inventory-add-combobox sisterhood-invite-combobox" data-sisterhood-invite-combobox>
                                    <input id="invite-member-@sisterhood.Id"
                                           name="MemberName"
                                           type="search"
                                           class="inventory-add-wine-search sisterhood-invite-input"
                                           placeholder="Start typing a name or email"
                                           autocomplete="off"
                                           spellcheck="false"
                                           role="combobox"
                                           aria-autocomplete="list"
                                           aria-expanded="false"
                                           aria-controls="invite-results-@sisterhood.Id" />
                                    <div class="inventory-add-wine-results"
                                         id="invite-results-@sisterhood.Id"
                                         data-sisterhood-invite-results
                                         role="listbox"
                                         aria-label="Matching Wine Surfers">
                                        <ul class="inventory-add-wine-options" data-sisterhood-invite-options></ul>
                                    </div>
                                </div>
                                <p class="invite-feedback" data-sisterhood-invite-feedback aria-live="polite" hidden></p>
                            </form>
                        }

                        </div>
                        <div class="sisterhood-card__right">
                        <section class="sip-session-section">
                            @{ var createContainerId = $"sip-session-create-container-{sisterhood.Id}"; }
                            <div class="sip-session-section-header sisterhood-toolbar">
                                <span class="sip-session-title">Sip sessions</span>
                                @if (sisterhood.CanManage)
                                {
                                    <button type="button"
                                            class="sisterhood-button"
                                            data-sip-session-create-toggle
                                            data-sip-session-create-title="Create sip session"
                                            data-sip-session-create-close-label="Cancel"
                                            aria-expanded="false"
                                            aria-controls="@createContainerId">
                                        Create sip session
                                    </button>
                                }
                            </div>
                            @if (sisterhood.SipSessions.Count > 0)
                            {
                                var orderedSipSessions = sisterhood.SipSessions
                                    .Where(session => !IsPastSipSession(session))
                                    .Concat(sisterhood.SipSessions.Where(session => IsPastSipSession(session)))
                                    .ToList();

                                <ul class="sip-session-list">
                                    @foreach (var session in orderedSipSessions)
                                    {
                                        var editContainerId = $"sip-session-edit-container-{session.Id}";
                                        var scheduledDateValue = FormatSipSessionDateValue(session);
                                        var scheduledTimeValue = FormatSipSessionTimeValue(session);
                                        var sessionUrl = Url.Action("Index", "SipSession", new { sipSessionId = session.Id })
                                            ?? $"/wine-surfer/sessions/{session.Id:D}";
                                        var ariaLabel = $"Sip session: {session.Name}";
                                        var isPastSession = IsPastSipSession(session);
                                        string? pastDateLabel = null;
                                        if (isPastSession)
                                        {
                                            pastDateLabel = FormatSipSessionPastDateLabel(session);
                                            if (!string.IsNullOrWhiteSpace(pastDateLabel) && !string.Equals(pastDateLabel, "Schedule TBD", StringComparison.OrdinalIgnoreCase))
                                            {
                                                ariaLabel = $"{ariaLabel} on {pastDateLabel}";
                                            }
                                        }

                                        var pastAttribute = isPastSession ? " data-sip-session-status=\"past\"" : string.Empty;
                                        <li data-sip-session-item id="sip-session-@session.Id"@Html.Raw(pastAttribute)>
                                            @if (isPastSession)
                                            {
                                                var compactDateLabel = string.IsNullOrWhiteSpace(pastDateLabel) ? "Schedule TBD" : pastDateLabel;
                                                <a class="sip-session-card wine-card wine-surface wine-surface-border wine-card-hover wine-surfer-card sip-session-card--past"
                                                   href="@sessionUrl"
                                                   aria-label="@ariaLabel">
                                                    <span class="sip-session-name sip-session-past-name">@session.Name</span>
                                                    <span class="sip-session-past-date">@compactDateLabel</span>
                                                </a>
                                            }
                                            else
                                            {
                                                var scheduleLabel = FormatSipSessionSchedule(session);
                                                var locationLabel = string.IsNullOrWhiteSpace(session.Location) ? "Location TBD" : session.Location;
                                                var hostLabel = string.IsNullOrWhiteSpace(sisterhood.Name) ? null : sisterhood.Name;
                                                var cardModel = new WineSurferSipSessionCardModel(
                                                    session,
                                                    scheduleLabel,
                                                    locationLabel,
                                                    sessionUrl,
                                                    ariaLabel,
                                                    hostLabel);
                                                @await Html.PartialAsync("_WineSurferSipSessionCard", cardModel)
                                            }
                                            @if (sisterhood.CanManage)
                                            {
                                                var deleteModel = new SipSessionModalDeleteModel(
                                                    Action: Url.Action("DeleteSipSession", "WineSurfer") ?? "/wine-surfer/sisterhoods/sessions/delete",
                                                    ButtonLabel: "Delete sip session",
                                                    ReturnUrl: Url.Action("Index", "WineSurfer") ?? "/wine-surfer");
                                                var editTemplateModel = new SipSessionModalTemplateModel(
                                                    Kind: SipSessionModalKind.Edit,
                                                    ContainerId: editContainerId,
                                                    InputIdPrefix: $"sip-session-edit-{session.Id}",
                                                    FormAction: Url.Action("UpdateSipSession", "WineSurfer"),
                                                    SubmitButtonLabel: "Save changes",
                                                    SisterhoodId: sisterhood.Id,
                                                    SipSessionId: session.Id,
                                                    Name: session.Name,
                                                    ScheduledDateValue: scheduledDateValue,
                                                    ScheduledTimeValue: scheduledTimeValue,
                                                    Location: session.Location,
                                                    Description: session.Description,
                                                    Delete: deleteModel);
                                                @await Html.PartialAsync("_SipSessionModalRegion", editTemplateModel)
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="sip-session-empty">No sip sessions planned yet.</p>
                            }

                            @if (sisterhood.CanManage)
                            {
                                var templateModel = new SipSessionModalTemplateModel(
                                    Kind: SipSessionModalKind.Create,
                                    ContainerId: createContainerId,
                                    InputIdPrefix: $"sip-session-create-{sisterhood.Id}",
                                    SisterhoodId: sisterhood.Id,
                                    SubmitButtonLabel: "Create session",
                                    CancelButtonLabel: "Cancel");
                                @await Html.PartialAsync("_SipSessionModalRegion", templateModel)
                            }
                        </section>
                        </div>
                        </div>
                </article>
            }
            }
            else
            {
                <div class="empty-state wine-surface--prominent wine-surface-border wine-card-hover wine-card-hover--prominent" role="status">
                    <h2>@(Model.IsAuthenticated ? "No sisterhoods yet" : "Sign in to see your sisterhoods")</h2>
                    <p>
                        @(Model.IsAuthenticated
                            ? "When you join a sisterhood, it will appear here with quick insight into the community."
                            : "Authenticate to discover the sisterhoods you're connected to and explore tailored communities.")
                    </p>
                </div>
            }
        </section>
    </main>
    @await Html.PartialAsync("_SipSessionEditModalShell")
    @{ var contributeModal = new WineSurferModalShell
        {
            BackdropCssClass = "contribute-modal-backdrop wine-surfer-modal-backdrop",
            BackdropAttributes = new Dictionary<string, string?>
            {
                ["data-contribute-modal"] = null,
                ["hidden"] = null,
                ["aria-hidden"] = "true"
            },
            DialogCssClass = "contribute-modal wine-surfer-modal",
            DialogAttributes = new Dictionary<string, string?>
            {
                ["aria-labelledby"] = "contribute-modal-title"
            },
            HeaderCssClass = "contribute-modal__header wine-surfer-modal__header",
            Title = "Contribute bottles",
            TitleCssClass = "contribute-modal__title wine-surfer-modal__title",
            TitleElementId = "contribute-modal-title",
            CloseButtonCssClass = "wine-surfer-modal__close contribute-modal__close",
            CloseButtonLabel = "Close contribute bottles dialog",
            CloseButtonAttributes = new Dictionary<string, string?>
            {
                ["data-contribute-close"] = null
            },
            BodyCssClass = "contribute-modal__body wine-surfer-modal__body",
            BodyContent = @<form method="post"
                  action="@Url.Action("ContributeSipSessionBottles", "WineSurfer")"
                  class="contribute-modal__form"
                  data-contribute-form>
                @Html.AntiForgeryToken()
                <input type="hidden" name="SisterhoodId" data-contribute-sisterhood />
                <input type="hidden" name="SipSessionId" data-contribute-session />
                <p class="contribute-modal__hint">Select the bottles you'd like to add to this sip session.</p>
                <div class="contribute-modal__list" role="group" aria-labelledby="contribute-modal-title">
                    <p class="contribute-modal__empty" data-contribute-empty @(Model.AvailableBottles.Count > 0 ? "hidden" : null)>No bottles available to contribute right now.</p>
                    @if (Model.AvailableBottles.Count > 0)
                    {
                        <ul>
                            @foreach (var bottle in Model.AvailableBottles)
                            {
                                var inputId = $"contribute-bottle-{bottle.Id:N}";
                                <li class="contribute-modal__option" data-bottle-option>
                                    <label for="@inputId">
                                        <input id="@inputId" type="checkbox" name="BottleIds" value="@bottle.Id" />
                                        <span>@bottle.Label</span>
                                    </label>
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="contribute-modal__actions">
                    <button type="submit" class="sisterhood-button" data-contribute-submit @(Model.AvailableBottles.Count == 0 ? "disabled" : null)>Add to sip session</button>
                    <button type="button" class="sisterhood-button sisterhood-button--ghost" data-contribute-close>Cancel</button>
                </div>
            </form>
        }; }
    @await Html.PartialAsync("_WineSurferModalShell", contributeModal)
    @{ var rateModal = new WineSurferModalShell
        {
            BackdropCssClass = "sip-session-rate-modal-backdrop wine-surfer-modal-backdrop",
            BackdropAttributes = new Dictionary<string, string?>
            {
                ["data-sip-session-rate-modal"] = null,
                ["hidden"] = null,
                ["aria-hidden"] = "true"
            },
            DialogCssClass = "sip-session-rate-modal wine-surfer-modal",
            DialogAttributes = new Dictionary<string, string?>
            {
                ["aria-labelledby"] = "sip-session-rate-modal-title"
            },
            HeaderCssClass = "sip-session-rate-modal__header wine-surfer-modal__header",
            Title = "Add tasting note",
            TitleCssClass = "sip-session-rate-modal__title wine-surfer-modal__title",
            TitleElementId = "sip-session-rate-modal-title",
            TitleAttributes = new Dictionary<string, string?>
            {
                ["data-sip-session-rate-title"] = null
            },
            CloseButtonCssClass = "wine-surfer-modal__close sip-session-rate-modal__close",
            CloseButtonLabel = "Close tasting note dialog",
            CloseButtonAttributes = new Dictionary<string, string?>
            {
                ["data-sip-session-rate-close"] = null
            },
            BodyCssClass = "sip-session-rate-modal__body wine-surfer-modal__body",
            BodyContent = @<form method="post"
                  action="@Url.Action("RateSipSessionBottle", "WineSurfer")"
                  class="sip-session-rate-modal__form"
                  data-sip-session-rate-form>
                @Html.AntiForgeryToken()
                <input type="hidden" name="SisterhoodId" data-rate-sisterhood />
                <input type="hidden" name="SipSessionId" data-rate-session />
                <input type="hidden" name="BottleId" data-rate-bottle />
                <input type="hidden" name="NoteId" data-rate-note-id />
                <p class="sip-session-rate-modal__hint" data-rate-bottle-label>Share your tasting note for this bottle.</p>
                <label for="sip-session-rate-note">Tasting note</label>
                <textarea id="sip-session-rate-note"
                          name="Note"
                          maxlength="2048"
                          rows="6"
                          data-rate-note
                          required></textarea>
                <label for="sip-session-rate-score">Score (0-10)</label>
                <input id="sip-session-rate-score"
                       name="Score"
                       type="number"
                       min="0"
                       max="10"
                       step="0.1"
                       data-rate-score
                       inputmode="decimal" />
                <p class="sip-session-rate-modal__footnote">Score is optionalâleave it blank to skip.</p>
                <div class="sip-session-rate-modal__actions">
                    <button type="submit" class="sisterhood-button" data-rate-submit>Save note</button>
                    <button type="submit"
                            class="sisterhood-button sisterhood-button--ghost-danger"
                            data-rate-delete
                            formaction="@Url.Action("DeleteSipSessionBottleNote", "WineSurfer")"
                            formmethod="post"
                            formnovalidate
                            hidden
                            disabled>
                        Delete tasting note
                    </button>
                    <button type="button" class="sisterhood-button sisterhood-button--ghost" data-sip-session-rate-close>Cancel</button>
                </div>
            </form>
        }; }
    @await Html.PartialAsync("_WineSurferModalShell", rateModal)
    @await Html.PartialAsync("_WineSurferBottomNav", Context?.Request?.Path.Value)
<script>
    document.addEventListener('DOMContentLoaded', () => {
        let closeRateModal = null;
        let isRateModalOpen = () => false;
        let closeContributeModal = null;
        let isContributeModalOpen = () => false;

        const contributeModal = document.querySelector('[data-contribute-modal]');
        if (contributeModal) {
            const form = contributeModal.querySelector('[data-contribute-form]');
            const sisterhoodField = form?.querySelector('[data-contribute-sisterhood]');
            const sessionField = form?.querySelector('[data-contribute-session]');
            const submitButton = form?.querySelector('[data-contribute-submit]');
            const emptyState = contributeModal.querySelector('[data-contribute-empty]');
            const closeButtons = contributeModal.querySelectorAll('[data-contribute-close]');
            const openButtons = document.querySelectorAll('[data-contribute-trigger]');
            const checkboxNodes = form?.querySelectorAll('input[type="checkbox"][name="BottleIds"]') ?? [];
            const optionNodes = form?.querySelectorAll('[data-bottle-option]') ?? [];

            const checkboxes = Array.from(checkboxNodes);
            const options = Array.from(optionNodes);
            let lastEnabledCount = checkboxes.filter(box => !box.disabled).length;
            let lastTriggerButton = null;

            const updateSubmitState = () => {
                if (!submitButton) {
                    return;
                }

                if (lastEnabledCount === 0) {
                    submitButton.disabled = true;
                    return;
                }

                const anyChecked = checkboxes.some(box => !box.disabled && box.checked);
                submitButton.disabled = !anyChecked;
            };

            const toggleScrollLock = (disable) => {
                if (disable) {
                    document.body.classList.add('no-scroll');
                } else {
                    document.body.classList.remove('no-scroll');
                }
            };

            const resetOptionState = () => {
                checkboxes.forEach(box => {
                    box.checked = false;
                    box.disabled = false;
                });
                options.forEach(option => option.removeAttribute('data-disabled'));
                lastEnabledCount = checkboxes.length;
                updateSubmitState();
            };

            const applySessionBottleState = (sessionBottleIds) => {
                let enabledCount = 0;
                checkboxes.forEach(box => {
                    const valueKey = box.value?.trim().toLowerCase() ?? '';
                    const shouldDisable = valueKey && sessionBottleIds.has(valueKey);
                    box.checked = false;
                    box.disabled = shouldDisable;

                    const option = box.closest('[data-bottle-option]');
                    if (option) {
                        if (shouldDisable) {
                            option.setAttribute('data-disabled', 'true');
                        } else {
                            option.removeAttribute('data-disabled');
                            enabledCount += 1;
                        }
                    }
                });

                if (emptyState) {
                    if (enabledCount === 0) {
                        emptyState.removeAttribute('hidden');
                    } else {
                        emptyState.setAttribute('hidden', '');
                    }
                }

                lastEnabledCount = enabledCount;
                updateSubmitState();
                return enabledCount;
            };

            const focusInitialControl = (enabledCount) => {
                if (enabledCount > 0) {
                    const firstEnabled = checkboxes.find(box => !box.disabled);
                    if (firstEnabled) {
                        window.requestAnimationFrame(() => firstEnabled.focus());
                        return;
                    }
                }

                const fallback = submitButton && !submitButton.disabled
                    ? submitButton
                    : closeButtons[0];

                if (fallback) {
                    window.requestAnimationFrame(() => fallback.focus());
                }
            };

            const openModal = (context) => {
                if (!form || !sisterhoodField || !sessionField) {
                    return;
                }

                const { sisterhoodId, sessionId, bottleIds } = context;
                sisterhoodField.value = sisterhoodId ?? '';
                sessionField.value = sessionId ?? '';

                const normalized = bottleIds.map(id => id.trim().toLowerCase()).filter(Boolean);
                const sessionBottleIds = new Set(normalized);
                const enabledCount = applySessionBottleState(sessionBottleIds);

                contributeModal.removeAttribute('hidden');
                contributeModal.setAttribute('aria-hidden', 'false');
                toggleScrollLock(true);
                focusInitialControl(enabledCount);
            };

            const closeModal = () => {
                if (!form) {
                    return;
                }

                contributeModal.setAttribute('hidden', '');
                contributeModal.setAttribute('aria-hidden', 'true');
                toggleScrollLock(false);
                form.reset();
                resetOptionState();

                if (emptyState && !emptyState.hasAttribute('hidden') && checkboxes.length > 0) {
                    emptyState.setAttribute('hidden', '');
                }

                if (lastTriggerButton) {
                    const trigger = lastTriggerButton;
                    lastTriggerButton = null;
                    window.requestAnimationFrame(() => trigger.focus());
                }
            };

            closeContributeModal = closeModal;
            isContributeModalOpen = () => !contributeModal.hasAttribute('hidden');

            openButtons.forEach(button => {
                button.addEventListener('click', () => {
                    lastTriggerButton = button;
                    const sisterhoodId = button.getAttribute('data-sisterhood-id') ?? '';
                    const sessionId = button.getAttribute('data-sip-session-id') ?? '';
                    const rawBottleIds = button.getAttribute('data-session-bottle-ids') ?? '';
                    const bottleIds = rawBottleIds.split(',').map(id => id.trim()).filter(id => id.length > 0);

                    openModal({ sisterhoodId, sessionId, bottleIds });
                });
            });

            closeButtons.forEach(button => {
                button.addEventListener('click', closeModal);
            });

            checkboxes.forEach(box => {
                box.addEventListener('change', () => {
                    updateSubmitState();
                });
            });

            contributeModal.addEventListener('click', event => {
                if (event.target === contributeModal) {
                    closeModal();
                }
            });

            updateSubmitState();
        }

        const rateModal = document.querySelector('[data-sip-session-rate-modal]');
        if (rateModal) {
            const form = rateModal.querySelector('[data-sip-session-rate-form]');
            const closeButtons = rateModal.querySelectorAll('[data-sip-session-rate-close]');
            const openButtons = document.querySelectorAll('[data-sip-session-rate-trigger]');
            const sisterhoodField = form?.querySelector('[data-rate-sisterhood]');
            const sessionField = form?.querySelector('[data-rate-session]');
            const bottleField = form?.querySelector('[data-rate-bottle]');
            const noteField = form?.querySelector('[data-rate-note]');
            const scoreField = form?.querySelector('[data-rate-score]');
            const noteIdField = form?.querySelector('[data-rate-note-id]');
            const labelElement = rateModal.querySelector('[data-rate-bottle-label]');
            const submitButton = form?.querySelector('[data-rate-submit]');
            const titleElement = rateModal.querySelector('[data-sip-session-rate-title]');
            const deleteButton = form?.querySelector('[data-rate-delete]');
            let lastTrigger = null;

            const openRateModal = (context) => {
                if (!form || !sisterhoodField || !sessionField || !bottleField || !noteField) {
                    return;
                }

                form.reset();
                sisterhoodField.value = context.sisterhoodId ?? '';
                sessionField.value = context.sessionId ?? '';
                bottleField.value = context.bottleId ?? '';
                noteField.value = context.note ?? '';

                if (noteIdField) {
                    noteIdField.value = context.noteId ?? '';
                }

                if (scoreField) {
                    scoreField.value = context.score ?? '';
                }

                if (labelElement) {
                    labelElement.textContent = context.label
                        ? `Tasting note for ${context.label}`
                        : 'Share your tasting note for this bottle.';
                }

                if (titleElement) {
                    if (context.hasExisting) {
                        titleElement.textContent = context.label
                            ? `Update tasting note Â· ${context.label}`
                            : 'Update tasting note';
                    } else {
                        titleElement.textContent = context.label
                            ? `Add tasting note Â· ${context.label}`
                            : 'Add tasting note';
                    }
                }

                if (submitButton) {
                    submitButton.textContent = context.hasExisting ? 'Update note' : 'Save note';
                }

                if (deleteButton) {
                    if (context.noteId) {
                        deleteButton.hidden = false;
                        deleteButton.removeAttribute('disabled');
                    } else {
                        deleteButton.hidden = true;
                        deleteButton.setAttribute('disabled', '');
                    }
                }

                rateModal.removeAttribute('hidden');
                rateModal.setAttribute('aria-hidden', 'false');
                document.body.classList.add('no-scroll');

                window.requestAnimationFrame(() => noteField.focus());
            };

            const closeRateModalInternal = () => {
                if (!form) {
                    return;
                }

                rateModal.setAttribute('hidden', '');
                rateModal.setAttribute('aria-hidden', 'true');
                document.body.classList.remove('no-scroll');
                form.reset();

                if (deleteButton) {
                    deleteButton.hidden = true;
                    deleteButton.setAttribute('disabled', '');
                }

                if (lastTrigger) {
                    const trigger = lastTrigger;
                    lastTrigger = null;
                    window.requestAnimationFrame(() => trigger.focus());
                }
            };

            closeRateModal = closeRateModalInternal;
            isRateModalOpen = () => !rateModal.hasAttribute('hidden');

            closeButtons.forEach(button => {
                button.addEventListener('click', () => {
                    closeRateModalInternal();
                });
            });

            rateModal.addEventListener('click', event => {
                if (event.target === rateModal) {
                    closeRateModalInternal();
                }
            });

            openButtons.forEach(button => {
                button.addEventListener('click', () => {
                    lastTrigger = button;
                    const sisterhoodId = button.getAttribute('data-sisterhood-id') ?? '';
                    const sessionId = button.getAttribute('data-sip-session-id') ?? '';
                    const bottleId = button.getAttribute('data-bottle-id') ?? '';
                    const label = button.getAttribute('data-bottle-label') ?? '';
                    const noteId = button.getAttribute('data-rate-note-id') ?? '';
                    const note = button.getAttribute('data-rate-existing-note') ?? '';
                    const score = button.getAttribute('data-rate-existing-score') ?? '';
                    const normalizedNoteId = noteId.trim();
                    const normalizedScore = score.trim();
                    const hasExisting = normalizedNoteId.length > 0 || note.trim().length > 0 || normalizedScore.length > 0;

                    openRateModal({
                        sisterhoodId,
                        sessionId,
                        bottleId,
                        label,
                        noteId: normalizedNoteId,
                        note,
                        score: normalizedScore,
                        hasExisting
                    });
                });
            });

            if (deleteButton) {
                deleteButton.addEventListener('click', event => {
                    if (deleteButton.disabled) {
                        event.preventDefault();
                        return;
                    }

                    if (!window.confirm('Delete this tasting note?')) {
                        event.preventDefault();
                    }
                });
            }

            // Ensure submit uses a clean, unquoted endpoint and returns JSON
            if (form) {
                form.addEventListener('submit', async (event) => {
                    try {
                        event.preventDefault();
                        if (!form.checkValidity()) {
                            form.reportValidity?.();
                            return;
                        }
                        let action = (form.getAttribute('action') ?? '').trim();
                        if (!action) {
                            form.submit();
                            return;
                        }
                        if ((action.startsWith('"') && action.endsWith('"')) || (action.startsWith("'") && action.endsWith("'"))) {
                            action = action.slice(1, -1);
                        }
                        const formData = new FormData(form);
                        const response = await fetch(action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            credentials: 'same-origin'
                        });
                        const contentType = response.headers.get('content-type') ?? '';
                        if (!contentType.includes('application/json')) {
                            window.location.assign(action);
                            return;
                        }
                        const payload = await response.json();
                        if (!response.ok || !payload?.success) {
                            const errorMessage = payload?.message ?? 'We could not save that tasting note. Please try again.';
                            window.alert(errorMessage);
                            return;
                        }
                        if (typeof closeRateModal === 'function') {
                            closeRateModal();
                        }
                        window.location.reload();
                    } catch (error) {
                        window.alert('We could not save that tasting note. Please try again.');
                    }
                });
            }
        }

        const toggleButton = document.querySelector('[data-sisterhood-create-toggle]');
        const createForm = document.querySelector('[data-sisterhood-create-form]');

        if (toggleButton && createForm) {
            toggleButton.addEventListener('click', () => {
                createForm.classList.toggle('open');
            });
        }

        const editForms = new Map();
        const editToggles = new Map();

        document.querySelectorAll('[data-sisterhood-edit-form]').forEach(form => {
            const sisterhoodId = form.getAttribute('data-sisterhood-id');
            if (!sisterhoodId) {
                return;
            }

            editForms.set(sisterhoodId, form);
        });

        document.querySelectorAll('[data-sisterhood-edit-toggle]').forEach(button => {
            const sisterhoodId = button.getAttribute('data-sisterhood-edit-toggle');
            if (!sisterhoodId) {
                return;
            }

            editToggles.set(sisterhoodId, button);

            button.addEventListener('click', () => {
                const form = editForms.get(sisterhoodId);
                if (!form) {
                    return;
                }

                const isOpen = form.classList.toggle('open');
                button.setAttribute('aria-expanded', isOpen ? 'true' : 'false');

                if (isOpen) {
                    const nameField = form.querySelector('input[name="Name"]');
                    window.requestAnimationFrame(() => nameField?.focus());
                }
            });
        });

        document.querySelectorAll('[data-sisterhood-edit-cancel]').forEach(cancelButton => {
            const sisterhoodId = cancelButton.getAttribute('data-sisterhood-id');
            if (!sisterhoodId) {
                return;
            }

            cancelButton.addEventListener('click', () => {
                const form = editForms.get(sisterhoodId);
                if (!form) {
                    return;
                }

                form.reset();
                form.classList.remove('open');

                const toggle = editToggles.get(sisterhoodId);
                toggle?.setAttribute('aria-expanded', 'false');
            });
        });

        const inviteForms = document.querySelectorAll('form[data-sisterhood-invite-form]');
        const userMap = new Map();
        const syncByForm = new WeakMap();
        const resultsByForm = new WeakMap();
        const renderByForm = new WeakMap();
        const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
        const inviteSearchCache = new Map();
        const inviteSearchConfig = {
            endpoint: '/wine-surfer/users',
            debounceMs: 500,
            minLength: 3
        };
        let inviteSearchTimerId = null;
        let inviteSearchAbortController = null;
        let inviteSearchCurrentTerm = '';
        let inviteSearchCurrentForm = null;

        const toTrimmedString = (value) => typeof value === 'string' ? value.trim() : '';
        const registerUserLookup = (value, userId) => {
            const lookupKey = toTrimmedString(value).toLowerCase();
            if (lookupKey) {
                userMap.set(lookupKey, userId);
            }
        };
        const setInviteResultsVisibility = (form, visible) => {
            const state = resultsByForm.get(form);
            if (!state) {
                return;
            }

            if (typeof state.setVisibility === 'function') {
                state.setVisibility(visible);
                return;
            }

            if (visible && state.list && state.list.childElementCount > 0) {
                state.container?.setAttribute('data-visible', 'true');
                state.input?.setAttribute('aria-expanded', 'true');
            } else {
                state.container?.removeAttribute('data-visible');
                state.input?.setAttribute('aria-expanded', 'false');
            }
        };
        const updateInviteUserOptions = (form, users) => {
            userMap.clear();

            const render = renderByForm.get(form);
            if (typeof render === 'function') {
                render(Array.isArray(users) ? users : []);
            }

            inviteForms.forEach(existingForm => {
                const sync = syncByForm.get(existingForm);
                if (typeof sync === 'function') {
                    sync();
                }
            });
        };
        const scheduleInviteUserSearch = (form, rawValue) => {
            const trimmed = (rawValue ?? '').trim();
            inviteSearchCurrentTerm = trimmed;
            inviteSearchCurrentForm = form;

            if (inviteSearchTimerId) {
                window.clearTimeout(inviteSearchTimerId);
                inviteSearchTimerId = null;
            }

            if (inviteSearchAbortController) {
                inviteSearchAbortController.abort();
                inviteSearchAbortController = null;
            }

            if (trimmed.length < inviteSearchConfig.minLength) {
                updateInviteUserOptions(form, []);
                return;
            }

            const cacheKey = trimmed.toLowerCase();
            if (inviteSearchCache.has(cacheKey)) {
                if (inviteSearchCurrentForm === form && inviteSearchCurrentTerm === trimmed) {
                    updateInviteUserOptions(form, inviteSearchCache.get(cacheKey));
                }
                return;
            }

            inviteSearchTimerId = window.setTimeout(async () => {
                inviteSearchTimerId = null;
                const controller = new AbortController();
                inviteSearchAbortController = controller;

                try {
                    const url = new URL(inviteSearchConfig.endpoint, window.location.origin);
                    url.searchParams.set('query', trimmed);

                    const response = await fetch(url.toString(), {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        },
                        credentials: 'same-origin',
                        signal: controller.signal
                    });

                    if (!response.ok) {
                        return;
                    }

                    const contentType = response.headers.get('content-type') ?? '';
                    if (!contentType.includes('application/json')) {
                        return;
                    }

                    const payload = await response.json();
                    if (!Array.isArray(payload)) {
                        return;
                    }

                    inviteSearchCache.set(cacheKey, payload);

                    if (inviteSearchCurrentForm !== form || inviteSearchCurrentTerm !== trimmed) {
                        return;
                    }

                    updateInviteUserOptions(form, payload);
                } catch (error) {
                    if (!controller.signal.aborted) {
                        /* Non-blocking lookup failure */
                    }
                } finally {
                    if (inviteSearchAbortController === controller) {
                        inviteSearchAbortController = null;
                    }
                }
            }, inviteSearchConfig.debounceMs);
        };

        const setUpInviteForm = (form) => {
            const input = form.querySelector('input[name="MemberName"]');
            const userIdField = form.querySelector('input[name="UserId"][data-sisterhood-invite-user-id]');
            const emailField = form.querySelector('input[name="MemberEmail"][data-sisterhood-invite-email]');
            const isEmailField = form.querySelector('input[name="IsEmail"][data-sisterhood-invite-is-email]');
            const feedback = form.querySelector('[data-sisterhood-invite-feedback]');
            const submitButton = form.querySelector('button[type="submit"]');
            const combobox = form.querySelector('[data-sisterhood-invite-combobox]');
            const resultsContainer = combobox?.querySelector('[data-sisterhood-invite-results]');
            const optionsList = combobox?.querySelector('[data-sisterhood-invite-options]');

            if (!input || !userIdField || !emailField || !isEmailField) {
                return;
            }

            const setResultsVisibility = (visible) => {
                if (!resultsContainer) {
                    return;
                }

                if (visible && optionsList && optionsList.childElementCount > 0) {
                    resultsContainer.setAttribute('data-visible', 'true');
                    input.setAttribute('aria-expanded', 'true');
                } else {
                    resultsContainer.removeAttribute('data-visible');
                    input.setAttribute('aria-expanded', 'false');
                }
            };

            resultsByForm.set(form, {
                container: resultsContainer || null,
                list: optionsList || null,
                input,
                setVisibility: setResultsVisibility
            });

            const clearResults = () => {
                if (optionsList) {
                    optionsList.innerHTML = '';
                }
            };

            const clearFeedback = () => {
                if (!feedback) {
                    return;
                }

                feedback.textContent = '';
                feedback.hidden = true;
                feedback.classList.remove('is-success', 'is-error', 'is-mailto', 'is-pending');
            };

            const setFeedback = (message, variant) => {
                if (!feedback) {
                    return;
                }

                feedback.textContent = message;
                feedback.hidden = false;
                feedback.classList.remove('is-success', 'is-error', 'is-mailto', 'is-pending');
                if (variant) {
                    feedback.classList.add(`is-${variant}`);
                }
            };

            const syncDerivedValues = () => {
                const raw = input.value ?? '';
                const trimmed = raw.trim();
                const lookupKey = trimmed.toLowerCase();

                if (lookupKey && userMap.has(lookupKey)) {
                    userIdField.value = userMap.get(lookupKey);
                } else {
                    userIdField.value = '';
                }

                if (trimmed && emailPattern.test(trimmed)) {
                    emailField.value = trimmed.toLowerCase();
                    isEmailField.value = 'true';
                } else {
                    emailField.value = '';
                    isEmailField.value = 'false';
                }
            };

            const renderInviteOptions = (users) => {
                clearResults();
                setResultsVisibility(false);

                if (!Array.isArray(users) || users.length === 0 || !optionsList) {
                    return;
                }

                users.forEach(user => {
                    if (!user?.id) {
                        return;
                    }

                    const name = toTrimmedString(user.name);
                    if (!name) {
                        return;
                    }

                    const email = toTrimmedString(user.email);
                    const tasteSummary = toTrimmedString(user.tasteProfileSummary) || toTrimmedString(user.tasteProfile);

                    const appendOption = (value, primaryText, metaParts) => {
                        const trimmedValue = toTrimmedString(value);
                        if (!trimmedValue) {
                            return;
                        }

                        registerUserLookup(trimmedValue, user.id);

                        const item = document.createElement('li');
                        const button = document.createElement('button');
                        button.type = 'button';
                        button.className = 'inventory-add-wine-option sisterhood-invite-option';
                        button.setAttribute('role', 'option');
                        button.dataset.userId = user.id;
                        button.dataset.inviteValue = trimmedValue;

                        const nameSpan = document.createElement('span');
                        nameSpan.className = 'inventory-add-wine-option__name';
                        nameSpan.textContent = primaryText;
                        button.appendChild(nameSpan);

                        metaParts.forEach(part => {
                            const trimmedPart = toTrimmedString(part);
                            if (!trimmedPart) {
                                return;
                            }

                            const metaSpan = document.createElement('span');
                            metaSpan.className = 'inventory-add-wine-option__meta';
                            metaSpan.textContent = trimmedPart;
                            button.appendChild(metaSpan);
                        });

                        button.addEventListener('click', () => {
                            input.value = trimmedValue;
                            syncDerivedValues();
                            clearFeedback();
                            setResultsVisibility(false);
                            window.setTimeout(() => {
                                input.focus();
                            }, 0);
                        });

                        item.appendChild(button);
                        optionsList.appendChild(item);
                    };

                    const descriptorParts = [];
                    if (email) {
                        descriptorParts.push(email);
                    }
                    if (tasteSummary) {
                        descriptorParts.push(tasteSummary);
                    }

                    appendOption(name, name, descriptorParts);

                    if (email && email.toLowerCase() !== name.toLowerCase()) {
                        const emailMetaParts = [name];
                        if (tasteSummary) {
                            emailMetaParts.push(tasteSummary);
                        }
                        appendOption(email, email, emailMetaParts);
                    } else if (email) {
                        registerUserLookup(email, user.id);
                    }
                });

                if (optionsList.childElementCount > 0) {
                    setResultsVisibility(true);
                }
            };

            renderByForm.set(form, renderInviteOptions);
            syncByForm.set(form, syncDerivedValues);

            input.addEventListener('input', () => {
                syncDerivedValues();
                clearFeedback();
                scheduleInviteUserSearch(form, input.value);
            });
            input.addEventListener('change', syncDerivedValues);
            input.addEventListener('focus', () => {
                if (optionsList && optionsList.childElementCount > 0) {
                    setResultsVisibility(true);
                }
            });
            input.addEventListener('keydown', event => {
                if (event.key === 'Escape') {
                    setResultsVisibility(false);
                }
            });
            input.addEventListener('blur', () => {
                syncDerivedValues();
                window.setTimeout(() => {
                    setResultsVisibility(false);
                }, 120);
            });

            renderInviteOptions([]);
            syncDerivedValues();

            form.addEventListener('submit', async event => {
                event.preventDefault();

                if (!form.checkValidity()) {
                    form.reportValidity?.();
                    return;
                }

                const action = form.getAttribute('action');
                if (!action) {
                    form.submit();
                    return;
                }

                const formData = new FormData(form);

                try {
                    if (submitButton) {
                        if (!submitButton.dataset.originalLabel) {
                            submitButton.dataset.originalLabel = submitButton.textContent?.trim() ?? '';
                        }
                        submitButton.disabled = true;
                        submitButton.textContent = 'Invitingâ¦';
                    }

                    setFeedback('Sending invitationâ¦', 'pending');

                    const response = await fetch(action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin'
                    });

                    const contentType = response.headers.get('content-type') ?? '';
                    const expectsJson = contentType.includes('application/json');
                    if (!expectsJson) {
                        window.location.assign(action);
                        return;
                    }

                    const payload = await response.json();

                    if (!response.ok || !payload?.success) {
                        const errorMessage = payload?.message ?? 'We could not send that invitation. Please try again.';
                        setFeedback(errorMessage, 'error');
                        return;
                    }

                    const baseMessage = typeof payload.message === 'string'
                        ? payload.message
                        : 'Invitation sent.';

                    let finalMessage = baseMessage;
                    let variant = 'success';
                    let shouldOpenMailClient = false;

                    if (payload.shouldLaunchMailClient && payload.mailtoLink) {
                        const fallbackTarget = payload.mailtoLink.replace(/^mailto:/i, '').split('?')[0];
                        const emailTarget = payload.inviteeEmail ?? fallbackTarget;
                        finalMessage = `${baseMessage} We opened your email client so you can reach ${emailTarget} directly.`;
                        variant = 'mailto';
                        shouldOpenMailClient = true;
                    }

                    setFeedback(finalMessage, variant);

                    if (shouldOpenMailClient) {
                        window.setTimeout(() => {
                            window.location.href = payload.mailtoLink;
                        }, 100);
                    }

                    input.value = '';
                    userIdField.value = '';
                    emailField.value = '';
                    isEmailField.value = 'false';
                    clearResults();
                    setResultsVisibility(false);
                } catch (error) {
                    setFeedback('We could not send that invitation. Please try again.', 'error');
                } finally {
                    if (submitButton) {
                        submitButton.disabled = false;
                        const originalLabel = submitButton.dataset.originalLabel ?? 'Invite';
                        submitButton.textContent = originalLabel || 'Invite';
                    }
                }
            });
        };

        if (inviteForms.length > 0) {
            inviteForms.forEach(form => {
                setUpInviteForm(form);
                setInviteResultsVisibility(form, false);
            });
        }

        document.addEventListener('click', event => {
            if (!(event.target instanceof Node)) {
                return;
            }

            inviteForms.forEach(form => {
                const combobox = form.querySelector('[data-sisterhood-invite-combobox]');
                if (!combobox || combobox.contains(event.target)) {
                    return;
                }

                setInviteResultsVisibility(form, false);
            });
        });

        const resendButtons = document.querySelectorAll('[data-resend-invite-button]');
        const removeInviteButtons = document.querySelectorAll('[data-remove-invite-button]');

        const setPendingInviteFeedback = (element, message, variant) => {
            if (!element) {
                return;
            }

            element.textContent = message ?? '';
            element.hidden = !message;
            element.classList.remove('is-success', 'is-error', 'is-mailto', 'is-pending');
            if (message && variant) {
                element.classList.add(`is-${variant}`);
            }
        };

        const findVerificationToken = (element) => {
            if (!element) {
                return null;
            }

            const card = element.closest('[data-sisterhood-card]');
            if (!card) {
                return null;
            }

            const tokenInput = card.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput?.value ?? null;
        };

        const formatUpdatedTimestamp = () => {
            try {
                return new Intl.DateTimeFormat(undefined, { dateStyle: 'short', timeStyle: 'short' }).format(new Date());
            } catch (error) {
                return new Date().toLocaleString();
            }
        };

        const formatPendingInviteCount = (count) => {
            return `${count} invite${count === 1 ? '' : 's'}`;
        };

        const updatePendingInviteSummary = (card, count) => {
            if (!card) {
                return;
            }

            const summary = card.querySelector('.pending-invite-count');
            if (!summary) {
                return;
            }

            if (count <= 0) {
                summary.remove();
                return;
            }

            summary.textContent = `Â· ${formatPendingInviteCount(count)}`;
        };

        resendButtons.forEach(button => {
            button.addEventListener('click', async () => {
                const endpoint = (button.dataset.endpoint ?? '').trim();
                const sisterhoodId = (button.dataset.sisterhoodId ?? '').trim();
                const invitationItem = button.closest('[data-pending-invitation]');
                const feedback = invitationItem?.querySelector('[data-resend-invite-feedback]');
                const updatedLabel = invitationItem?.querySelector('[data-pending-invite-updated]');

                if (!endpoint) {
                    setPendingInviteFeedback(feedback, 'We could not determine where to send that request.', 'error');
                    return;
                }

                if (!sisterhoodId) {
                    setPendingInviteFeedback(feedback, 'We could not determine which sisterhood to update.', 'error');
                    return;
                }

                const token = findVerificationToken(button);
                if (!token) {
                    setPendingInviteFeedback(feedback, 'We could not verify this request. Refresh and try again.', 'error');
                    return;
                }

                const userId = (button.dataset.invitationUserId ?? '').trim();
                const email = (button.dataset.invitationEmail ?? '').trim();
                const inviteeName = (button.dataset.invitationName ?? '').trim();

                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                formData.append('SisterhoodId', sisterhoodId);

                if (userId) {
                    formData.append('UserId', userId);
                } else if (email) {
                    formData.append('MemberEmail', email);
                    formData.append('IsEmail', 'true');
                    formData.append('MemberName', inviteeName || email);
                } else {
                    setPendingInviteFeedback(feedback, 'We could not determine who should receive that invitation.', 'error');
                    return;
                }

                if (!button.dataset.originalLabel) {
                    button.dataset.originalLabel = button.textContent?.trim() ?? '';
                }

                button.disabled = true;
                button.textContent = 'Resendingâ¦';
                setPendingInviteFeedback(feedback, 'Resending invitationâ¦', 'pending');

                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin'
                    });

                    const contentType = response.headers.get('content-type') ?? '';
                    if (!contentType.includes('application/json')) {
                        window.location.assign(endpoint);
                        return;
                    }

                    const payload = await response.json();
                    if (!response.ok || !payload?.success) {
                        const errorMessage = payload?.message ?? 'We could not resend that invitation. Please try again.';
                        setPendingInviteFeedback(feedback, errorMessage, 'error');
                        return;
                    }

                    const baseMessage = typeof payload.message === 'string'
                        ? payload.message
                        : 'Invitation sent.';

                    let finalMessage = baseMessage;
                    let variant = 'success';
                    let shouldOpenMailClient = false;

                    if (payload.shouldLaunchMailClient && payload.mailtoLink) {
                        const fallbackTarget = payload.mailtoLink.replace(/^mailto:/i, '').split('?')[0];
                        const emailTarget = payload.inviteeEmail ?? fallbackTarget;
                        finalMessage = `${baseMessage} We opened your email client so you can reach ${emailTarget} directly.`;
                        variant = 'mailto';
                        shouldOpenMailClient = true;
                    }

                    setPendingInviteFeedback(feedback, finalMessage, variant);

                    if (updatedLabel) {
                        updatedLabel.textContent = `Updated ${formatUpdatedTimestamp()}`;
                    }

                    if (shouldOpenMailClient) {
                        window.setTimeout(() => {
                            window.location.href = payload.mailtoLink;
                        }, 100);
                    }
                } catch (error) {
                    setPendingInviteFeedback(feedback, 'We could not resend that invitation. Please try again.', 'error');
                } finally {
                    button.disabled = false;
                    const originalLabel = button.dataset.originalLabel ?? 'Resend invitation mail';
                    button.textContent = originalLabel || 'Resend invitation mail';
                }
            });
        });

        removeInviteButtons.forEach(button => {
            button.addEventListener('click', async () => {
                const endpoint = (button.dataset.endpoint ?? '').trim();
                const invitationId = (button.dataset.invitationId ?? '').trim();
                const sisterhoodId = (button.dataset.sisterhoodId ?? '').trim();
                const invitationItem = button.closest('[data-pending-invitation]');
                if (!invitationItem) {
                    return;
                }

                const feedback = invitationItem.querySelector('[data-resend-invite-feedback]');
                const pendingContainer = invitationItem.closest('.pending-invitations');
                const card = button.closest('[data-sisterhood-card]');

                if (!endpoint) {
                    setPendingInviteFeedback(feedback, 'We could not determine where to send that request.', 'error');
                    return;
                }

                if (!invitationId) {
                    setPendingInviteFeedback(feedback, 'We could not determine which invitation to remove.', 'error');
                    return;
                }

                if (!sisterhoodId) {
                    setPendingInviteFeedback(feedback, 'We could not determine which sisterhood to update.', 'error');
                    return;
                }

                const token = findVerificationToken(button);
                if (!token) {
                    setPendingInviteFeedback(feedback, 'We could not verify this request. Refresh and try again.', 'error');
                    return;
                }

                const invitationLabel = (button.dataset.invitationLabel ?? '').trim();
                const confirmMessage = invitationLabel
                    ? `Remove the invitation for ${invitationLabel}?`
                    : 'Remove this invitation?';

                if (!window.confirm(confirmMessage)) {
                    return;
                }

                if (!button.dataset.originalLabel) {
                    button.dataset.originalLabel = button.textContent?.trim() ?? '';
                }

                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                formData.append('SisterhoodId', sisterhoodId);
                formData.append('InvitationId', invitationId);

                button.disabled = true;
                button.textContent = 'Removingâ¦';
                setPendingInviteFeedback(feedback, 'Removing invitationâ¦', 'pending');

                let shouldRestoreButton = true;

                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin'
                    });

                    const contentType = response.headers.get('content-type') ?? '';
                    if (!contentType.includes('application/json')) {
                        shouldRestoreButton = false;
                        window.location.assign(endpoint);
                        return;
                    }

                    const payload = await response.json();
                    if (!response.ok || !payload?.success) {
                        const errorMessage = payload?.message ?? 'We could not remove that invitation. Please try again.';
                        setPendingInviteFeedback(feedback, errorMessage, 'error');
                        return;
                    }

                    const successMessage = typeof payload.message === 'string'
                        ? payload.message
                        : 'Invitation removed.';

                    setPendingInviteFeedback(feedback, successMessage, 'success');
                    shouldRestoreButton = false;

                    window.setTimeout(() => {
                        invitationItem.remove();

                        const list = pendingContainer?.querySelector('.pending-invitations-list');
                        const remaining = list ? list.querySelectorAll('[data-pending-invitation]').length : 0;

                        if (remaining <= 0) {
                            pendingContainer?.remove();
                        } else {
                            const headerCount = pendingContainer?.querySelector('.pending-invitations-count');
                            if (headerCount) {
                                headerCount.textContent = formatPendingInviteCount(remaining);
                            }
                        }

                        updatePendingInviteSummary(card, remaining);
                    }, 400);
                } catch (error) {
                    setPendingInviteFeedback(feedback, 'We could not remove that invitation. Please try again.', 'error');
                } finally {
                    if (shouldRestoreButton) {
                        button.disabled = false;
                        const originalLabel = button.dataset.originalLabel ?? 'Remove invitation';
                        button.textContent = originalLabel || 'Remove invitation';
                    }
                }
            });
        });

        const editSessionButtons = document.querySelectorAll('[data-sip-session-edit-toggle]');

        editSessionButtons.forEach(button => {
            button.addEventListener('click', () => {
                const sipSessionModal = window.WineSurfer?.SipSessionModal;
                if (!sipSessionModal) {
                    return;
                }

                const item = button.closest('[data-sip-session-item]');
                if (!item) {
                    return;
                }

                const region = item.querySelector('[data-sip-session-edit-region]');
                if (!region) {
                    return;
                }

                const template = region.querySelector('template[data-sip-session-edit-template]');
                if (!template) {
                    return;
                }

                const sessionName = item.querySelector('.sip-session-name')?.textContent?.trim() ?? '';

                if (sipSessionModal.isOpen?.() && sipSessionModal.getActiveButton?.() === button) {
                    sipSessionModal.close();
                    return;
                }

                sipSessionModal.openFromTemplate(button, template, {
                    title: sessionName ? `Edit sip session Â· ${sessionName}` : 'Edit sip session',
                    closeLabel: 'Close edit'
                });
            });
        });

        document.addEventListener('keydown', event => {
            if (event.key !== 'Escape') {
                return;
            }

            if (typeof closeRateModal === 'function' && isRateModalOpen()) {
                closeRateModal();
                return;
            }

            const sipSessionModal = window.WineSurfer?.SipSessionModal;
            if (sipSessionModal?.isOpen?.()) {
                sipSessionModal.close();
                return;
            }

            if (typeof closeContributeModal === 'function' && isContributeModalOpen()) {
                closeContributeModal();
            }
        });
    });
</script>
</body>
</html>
