@model AllMCPSolution.Controllers.WineSurferSisterhoodsViewModel
@using AllMCPSolution.Controllers
@using System.Linq
@{
    Layout = null;
    var currentPath = Context.Request.Path.Value ?? string.Empty;
    var pendingInvitations = Model.IncomingInvitations
        .Where(invitation => invitation.Status == AllMCPSolution.Models.SisterhoodInvitationStatus.Pending)
        .ToList();
    var topBarModel = new WineSurferTopBarModel(currentPath, pendingInvitations);
}

@functions {
    private static DateTime NormalizeDateTime(DateTime value)
    {
        return value.Kind switch
        {
            DateTimeKind.Utc => value.ToLocalTime(),
            DateTimeKind.Unspecified => DateTime.SpecifyKind(value, DateTimeKind.Local),
            _ => value
        };
    }

    private static DateTime? NormalizeDateTime(DateTime? value)
    {
        return value.HasValue ? NormalizeDateTime(value.Value) : (DateTime?)null;
    }

    private static string FormatSipSessionSchedule(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        if (localDateTime.HasValue)
        {
            return localDateTime.Value.ToString("f");
        }

        var localDate = NormalizeDateTime(session.Date);
        return localDate?.ToString("D") ?? "Schedule TBD";
    }

    private static string FormatSipSessionInputValue(AllMCPSolution.Controllers.WineSurferSipSessionSummary session)
    {
        var localDateTime = NormalizeDateTime(session.ScheduledAtUtc);
        return localDateTime.HasValue ? localDateTime.Value.ToString("yyyy-MM-ddTHH:mm") : string.Empty;
    }

    private static string FormatTimestamp(DateTime value)
    {
        return NormalizeDateTime(value).ToString("g");
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Wine Surfer Â· Sisterhoods</title>
    <style>
        :root {
            color-scheme: dark;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: radial-gradient(circle at top, rgba(244, 241, 234, 0.08), transparent 60%), #050505;
            color: #f4f1ea;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
        }

        body.no-scroll {
            overflow: hidden;
        }

        .top-bar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 24px 32px;
            position: sticky;
            top: 0;
            background: rgba(5, 5, 5, 0.92);
            backdrop-filter: blur(8px);
            border-bottom: 1px solid rgba(244, 241, 234, 0.08);
            z-index: 10;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 12px;
            letter-spacing: 4px;
            text-transform: uppercase;
            font-weight: 600;
            font-size: 20px;
        }

        .top-bar-actions {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .notification-shell {
            position: relative;
            display: flex;
            align-items: center;
        }

        .top-bar-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 15px;
            font-weight: 600;
            letter-spacing: 1px;
            color: #f4f1ea;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease, transform 0.2s ease;
        }

        .top-bar-avatar:hover,
        .top-bar-avatar:focus-visible,
        .top-bar-avatar.active {
            background: rgba(244, 241, 234, 0.16);
            border-color: rgba(244, 241, 234, 0.4);
            outline: none;
        }

        .top-bar-avatar:focus-visible {
            box-shadow: 0 0 0 2px rgba(244, 241, 234, 0.35);
        }

        .notification-badge {
            position: absolute;
            top: -4px;
            right: -6px;
            min-width: 18px;
            height: 18px;
            padding: 0 5px;
            border-radius: 999px;
            background: #f96b70;
            color: #050505;
            font-size: 11px;
            font-weight: 700;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .notification-panel {
            position: absolute;
            top: calc(100% + 14px);
            right: 0;
            width: min(300px, 80vw);
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.12);
            border-radius: 16px;
            padding: 18px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.55);
            display: none;
            z-index: 20;
        }

        .notification-panel.open {
            display: block;
        }

        .notification-heading {
            margin: 0 0 12px;
            font-size: 12px;
            letter-spacing: 1.6px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.75);
        }

        .notification-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .notification-item {
            margin: 0;
        }

        .notification-link {
            display: flex;
            flex-direction: column;
            gap: 4px;
            padding: 12px 14px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.05);
            color: #f4f1ea;
            text-decoration: none;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .notification-link:hover,
        .notification-link:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            transform: translateY(-1px);
            outline: none;
        }

        .notification-title {
            font-size: 13px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            font-weight: 600;
        }

        .notification-meta {
            font-size: 12px;
            color: rgba(244, 241, 234, 0.75);
            letter-spacing: 1.2px;
        }

        .notification-tag {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 2px 8px;
            border-radius: 999px;
            font-size: 11px;
            letter-spacing: 1.1px;
            text-transform: uppercase;
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.9);
            width: fit-content;
        }

        .notification-empty {
            margin: 0 0 12px;
            font-size: 12px;
            letter-spacing: 1.3px;
            color: rgba(244, 241, 234, 0.65);
        }

        .notification-footer {
            margin-top: 14px;
            display: flex;
            justify-content: flex-end;
        }

        .notification-footer a {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 14px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.25);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            text-decoration: none;
            font-size: 11px;
            letter-spacing: 1.4px;
            text-transform: uppercase;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .notification-footer a:hover,
        .notification-footer a:focus-visible {
            background: rgba(244, 241, 234, 0.16);
            border-color: rgba(244, 241, 234, 0.4);
            outline: none;
        }

        .burger {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.15);
            background: rgba(244, 241, 234, 0.05);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s ease, border-color 0.2s ease;
        }

        .burger span {
            position: relative;
            width: 20px;
            height: 2px;
            background: #f4f1ea;
            display: block;
        }

        .burger span::before,
        .burger span::after {
            content: "";
            position: absolute;
            left: 0;
            width: 100%;
            height: 2px;
            background: #f4f1ea;
            transition: transform 0.2s ease;
        }

        .burger span::before {
            transform: translateY(-6px);
        }

        .burger span::after {
            transform: translateY(6px);
        }

        .burger.active span {
            background: transparent;
        }

        .burger.active span::before {
            transform: rotate(45deg);
        }

        .burger.active span::after {
            transform: rotate(-45deg);
        }

        .menu-panel {
            position: absolute;
            top: 76px;
            right: 32px;
            background: rgba(12, 12, 12, 0.95);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 16px;
            padding: 20px;
            min-width: 220px;
            box-shadow: 0 18px 50px rgba(0, 0, 0, 0.45);
            display: none;
        }

        .menu-panel.open {
            display: block;
        }

        .menu-panel a {
            display: block;
            padding: 12px 16px;
            border-radius: 10px;
            color: #f4f1ea;
            text-decoration: none;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-size: 12px;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .menu-panel a:hover {
            background: rgba(244, 241, 234, 0.12);
            transform: translateX(4px);
        }

        main {
            flex: 1;
            padding: 80px 24px 60px;
            display: flex;
            flex-direction: column;
            gap: 48px;
            align-items: center;
        }

        h1 {
            font-size: clamp(40px, 6vw, 88px);
            margin: 0;
            letter-spacing: 10px;
            text-transform: uppercase;
            text-align: center;
        }

        .lead {
            max-width: 720px;
            text-align: center;
            font-size: 18px;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.78);
        }

        .invitation-section {
            width: min(1040px, 100%);
            background: linear-gradient(160deg, rgba(244, 241, 234, 0.05), rgba(244, 241, 234, 0.02));
            border: 1px solid rgba(244, 241, 234, 0.08);
            border-radius: 20px;
            padding: 28px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .invitation-section-header {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .invitation-section-header h2 {
            margin: 0;
            font-size: 18px;
            text-transform: uppercase;
            letter-spacing: 4px;
        }

        .invitation-section-header p {
            margin: 0;
            color: rgba(244, 241, 234, 0.65);
            font-size: 14px;
        }

        .invitation-card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
        }

        .invitation-card {
            background: rgba(244, 241, 234, 0.05);
            border: 1px solid rgba(244, 241, 234, 0.1);
            border-radius: 18px;
            padding: 22px;
            display: flex;
            flex-direction: column;
            gap: 14px;
            min-height: 0;
        }

        .invitation-card-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            gap: 12px;
        }

        .invitation-card-title {
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 5px;
            font-size: 15px;
        }

        .invitation-status {
            padding: 4px 10px;
            border-radius: 999px;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            border: 1px solid rgba(244, 241, 234, 0.18);
        }

        .invitation-status.pending {
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
        }

        .invitation-status.accepted {
            background: rgba(65, 160, 108, 0.16);
            border-color: rgba(65, 160, 108, 0.35);
            color: #9fe3c1;
        }

        .invitation-status.declined {
            background: rgba(214, 104, 86, 0.16);
            border-color: rgba(214, 104, 86, 0.35);
            color: #f3b0a3;
        }

        .invitation-description {
            margin: 0;
            color: rgba(244, 241, 234, 0.72);
            line-height: 1.55;
        }

        .invitation-email {
            margin: 0;
            font-size: 14px;
            color: rgba(244, 241, 234, 0.72);
        }

        .invitation-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            font-size: 11px;
        }

        .invitation-tag {
            padding: 4px 10px;
            border-radius: 999px;
            letter-spacing: 1px;
            text-transform: uppercase;
            background: rgba(244, 241, 234, 0.08);
            color: rgba(244, 241, 234, 0.82);
        }

        .invitation-tag.account {
            background: rgba(86, 152, 214, 0.18);
            color: #b7d8ff;
        }

        .invitation-tag.email {
            background: rgba(244, 241, 234, 0.12);
            color: rgba(244, 241, 234, 0.82);
        }

        .invitation-updated {
            margin: 0;
            font-size: 12px;
            color: rgba(244, 241, 234, 0.55);
        }

        .invitation-response {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.7);
        }

        .invitation-card-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .ghost-button,
        .ghost-danger-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: 999px;
            background: transparent;
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, opacity 0.2s ease;
        }

        .ghost-button {
            border: 1px solid rgba(244, 241, 234, 0.18);
            color: rgba(244, 241, 234, 0.85);
        }

        .ghost-button:hover,
        .ghost-button:focus-visible {
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
        }

        .ghost-danger-button {
            border: 1px solid rgba(214, 104, 86, 0.45);
            color: #f3b0a3;
        }

        .ghost-danger-button:hover,
        .ghost-danger-button:focus-visible {
            background: rgba(214, 104, 86, 0.15);
            color: #ffd6cc;
        }

        .sisterhood-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 28px;
            width: min(1040px, 100%);
        }

        .sisterhood-card {
            background: linear-gradient(160deg, rgba(244, 241, 234, 0.06), rgba(244, 241, 234, 0.02));
            border: 1px solid rgba(244, 241, 234, 0.08);
            border-radius: 18px;
            padding: 28px;
            display: flex;
            flex-direction: column;
            gap: 16px;
            position: relative;
            overflow: hidden;
        }

        .sisterhood-card::after {
            content: "";
            position: absolute;
            inset: 0;
            pointer-events: none;
            background: radial-gradient(circle at top right, rgba(244, 241, 234, 0.12), transparent 55%);
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .sisterhood-card:hover::after {
            opacity: 1;
        }

        .sisterhood-name {
            text-transform: uppercase;
            letter-spacing: 6px;
            font-weight: 600;
            font-size: 16px;
        }

        .sisterhood-description {
            margin: 0;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.78);
        }

        .sisterhood-members {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .pending-invite-count {
            margin-left: 6px;
            font-size: 11px;
            letter-spacing: 1.5px;
            color: rgba(244, 241, 234, 0.55);
        }

        .empty-state {
            width: min(880px, 100%);
            border-radius: 18px;
            padding: 36px;
            border: 1px solid rgba(244, 241, 234, 0.08);
            background: linear-gradient(150deg, rgba(244, 241, 234, 0.08), rgba(244, 241, 234, 0.02));
            text-align: center;
            display: flex;
            flex-direction: column;
            gap: 12px;
            color: rgba(244, 241, 234, 0.78);
            margin: 0 auto;
        }

        .empty-state h2 {
            margin: 0;
            text-transform: uppercase;
            letter-spacing: 6px;
            font-size: 18px;
            color: #f4f1ea;
        }

        .empty-state p {
            margin: 0;
            line-height: 1.6;
        }
        .action-bar {
            margin-top: 24px;
            display: flex;
            justify-content: center;
        }

        .primary-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 12px 24px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.28);
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
            font-size: 13px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, transform 0.2s ease;
        }

        .primary-button:hover {
            background: rgba(244, 241, 234, 0.18);
            transform: translateY(-1px);
        }

        .status-banner {
            margin-top: 24px;
            padding: 14px 18px;
            border-radius: 14px;
            font-size: 14px;
            letter-spacing: 1px;
            text-transform: uppercase;
        }

        .status-banner.success {
            background: rgba(51, 133, 107, 0.16);
            border: 1px solid rgba(51, 133, 107, 0.35);
        }

        .status-banner.error {
            background: rgba(133, 51, 65, 0.16);
            border: 1px solid rgba(133, 51, 65, 0.35);
        }

        .create-sisterhood-form {
            margin-top: 24px;
            width: min(720px, 100%);
            border-radius: 18px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
            padding: 24px;
            display: none;
            flex-direction: column;
            gap: 18px;
        }

        .create-sisterhood-form.open {
            display: flex;
        }

        .edit-sisterhood-form {
            margin-top: 8px;
            border-radius: 16px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.03);
            padding: 20px;
            display: none;
            flex-direction: column;
            gap: 16px;
        }

        .edit-sisterhood-form.open {
            display: flex;
        }

        .form-grid {
            display: grid;
            gap: 16px;
        }

        .form-field {
            display: flex;
            flex-direction: column;
            gap: 6px;
            text-align: left;
        }

        .form-field label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .form-field input,
        .form-field textarea,
        .invite-form input {
            padding: 10px 12px;
            border-radius: 10px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: rgba(12, 12, 12, 0.55);
            color: #f4f1ea;
            font-size: 14px;
            font-family: inherit;
        }

        .form-field textarea {
            min-height: 96px;
            resize: vertical;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .secondary-button,
        .danger-button,
        .inline-form button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 8px 16px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: transparent;
            color: #f4f1ea;
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, opacity 0.2s ease;
        }

        .secondary-button:hover,
        .inline-form button:hover {
            background: rgba(244, 241, 234, 0.12);
        }

        .danger-button {
            border-color: rgba(181, 65, 65, 0.45);
            color: #f6dcdc;
        }

        .danger-button:hover {
            background: rgba(181, 65, 65, 0.25);
        }

        .sisterhood-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 12px;
        }

        .sisterhood-actions {
            display: inline-flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .member-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .member-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 12px;
            padding: 10px 12px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.04);
        }

        .member-identity {
            display: flex;
            align-items: center;
            gap: 10px;
            flex: 1;
        }

        .member-avatar {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: rgba(244, 241, 234, 0.08);
            color: #f4f1ea;
            font-size: 14px;
            font-weight: 600;
            letter-spacing: 1px;
        }

        .member-details {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .member-badges {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 6px;
        }

        .member-name {
            font-size: 14px;
            letter-spacing: 1px;
        }

        .member-actions {
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .sip-session-section {
            display: flex;
            flex-direction: column;
            gap: 14px;
            margin-top: 8px;
        }

        .sip-session-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        .sip-session-title {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .sip-session-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .sip-session-item {
            border-radius: 14px;
            border: 1px solid rgba(244, 241, 234, 0.08);
            background: rgba(244, 241, 234, 0.04);
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .sip-session-item-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            gap: 12px;
        }

        .sip-session-info {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .sip-session-name {
            margin: 0;
            font-size: 15px;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .sip-session-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            font-size: 12px;
            color: rgba(244, 241, 234, 0.6);
        }

        .sip-session-description {
            margin: 0;
            color: rgba(244, 241, 234, 0.78);
            line-height: 1.6;
        }

        .sip-session-bottles {
            margin: 4px 0 0;
            padding: 12px 16px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.1);
            background: rgba(244, 241, 234, 0.06);
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .sip-session-bottle-title {
            font-size: 11px;
            letter-spacing: 1.8px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.62);
        }

        .sip-session-bottle-list {
            margin: 0;
            padding-left: 18px;
            display: flex;
            flex-direction: column;
            gap: 4px;
            color: rgba(244, 241, 234, 0.85);
        }

        .sip-session-bottle-list li {
            font-size: 13px;
            line-height: 1.5;
        }

        .sip-session-actions {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            flex-wrap: wrap;
        }

        .sip-session-contribute {
            display: flex;
            justify-content: flex-end;
        }

        .sip-session-contribute .secondary-button {
            width: auto;
        }

        .sip-session-empty {
            font-size: 13px;
            color: rgba(244, 241, 234, 0.6);
        }

        .sip-session-edit-region {
            margin-top: 16px;
        }

        .sip-session-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
            border-radius: 14px;
            border: 1px dashed rgba(244, 241, 234, 0.18);
            background: rgba(244, 241, 234, 0.03);
            padding: 16px;
        }

        .sip-session-form label {
            font-size: 12px;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .sip-session-form input[type="text"],
        .sip-session-form input[type="datetime-local"],
        .sip-session-form textarea {
            width: 100%;
            padding: 10px 12px;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.16);
            background: rgba(244, 241, 234, 0.06);
            color: #f4f1ea;
            font-size: 14px;
        }

        .sip-session-form textarea {
            min-height: 80px;
            resize: vertical;
        }

        .sip-session-form input[type="text"]:focus,
        .sip-session-form input[type="datetime-local"]:focus,
        .sip-session-form textarea:focus {
            outline: none;
            border-color: rgba(244, 241, 234, 0.3);
            background: rgba(244, 241, 234, 0.12);
        }

        .sip-session-form-actions {
            display: inline-flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .ghost-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 10px 18px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.18);
            background: transparent;
            color: #f4f1ea;
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            cursor: pointer;
            transition: background 0.2s ease, opacity 0.2s ease;
        }

        .ghost-button:hover,
        .ghost-button:focus-visible {
            background: rgba(244, 241, 234, 0.12);
        }

        .contribute-modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(5, 5, 5, 0.72);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 24px;
            z-index: 50;
            backdrop-filter: blur(6px);
        }

        .contribute-modal-backdrop[hidden] {
            display: none;
        }

        .contribute-modal {
            background: rgba(12, 12, 12, 0.96);
            border-radius: 16px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            width: min(520px, 100%);
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            box-shadow: 0 25px 60px rgba(0, 0, 0, 0.45);
        }

        .contribute-modal__header {
            padding: 20px 24px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        .contribute-modal__title {
            margin: 0;
            font-size: 16px;
            letter-spacing: 3px;
            text-transform: uppercase;
        }

        .contribute-modal__form {
            display: flex;
            flex-direction: column;
            gap: 16px;
            padding: 0 24px 24px;
            flex: 1;
        }

        .contribute-modal__hint {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.75);
        }

        .contribute-modal__list {
            flex: 1;
            overflow-y: auto;
            border-radius: 12px;
            border: 1px solid rgba(244, 241, 234, 0.12);
            background: rgba(244, 241, 234, 0.04);
            padding: 12px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .contribute-modal__list ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .contribute-modal__option label {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 10px;
            border-radius: 10px;
            transition: background 0.2s ease;
            cursor: pointer;
        }

        .contribute-modal__option label:hover,
        .contribute-modal__option label:focus-within {
            background: rgba(244, 241, 234, 0.08);
        }

        .contribute-modal__option input[type="checkbox"] {
            width: 16px;
            height: 16px;
            accent-color: #c086f2;
        }

        .contribute-modal__option[data-disabled] label {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .contribute-modal__option[data-disabled] label:hover,
        .contribute-modal__option[data-disabled] label:focus-within {
            background: transparent;
        }

        .contribute-modal__empty {
            margin: 0;
            font-size: 13px;
            color: rgba(244, 241, 234, 0.72);
        }

        .contribute-modal__actions {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 12px;
            padding-top: 8px;
        }

        .pending-invitations {
            margin-top: 18px;
            padding: 16px;
            border-radius: 14px;
            background: rgba(244, 241, 234, 0.04);
            border: 1px solid rgba(244, 241, 234, 0.08);
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .pending-invitations-header {
            display: flex;
            align-items: baseline;
            justify-content: space-between;
            gap: 12px;
        }

        .pending-invitations-title {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .pending-invitations-count {
            font-size: 11px;
            letter-spacing: 1.5px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.5);
        }

        .pending-invitations-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .pending-invitations-item {
            padding: 10px 12px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.03);
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .pending-invite-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 12px;
        }

        .pending-invite-email {
            font-size: 13px;
            letter-spacing: 1px;
        }

        .pending-invite-status {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .pending-invite-updated {
            font-size: 11px;
            letter-spacing: 1.5px;
            color: rgba(244, 241, 234, 0.55);
        }

        .pending-invite-actions {
            display: grid;
            gap: 6px;
            margin-top: 4px;
        }

        .pending-invite-actions .secondary-button {
            justify-self: start;
            padding: 6px 12px;
            font-size: 11px;
            letter-spacing: 1.5px;
        }

        .pending-invite-actions .invite-feedback {
            margin: 0;
        }

        .sisterhood-favorite-region {
            margin: 14px 0;
            padding: 12px 14px;
            border-radius: 12px;
            background: rgba(244, 241, 234, 0.05);
            display: grid;
            gap: 4px;
        }

        .favorite-region-label {
            font-size: 10px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .favorite-region-name {
            font-size: 15px;
            letter-spacing: 1px;
        }

        .favorite-region-score {
            font-size: 11px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.65);
        }

        .inline-form {
            margin: 0;
        }

        .inline-form button {
            padding: 6px 12px;
            font-size: 11px;
            letter-spacing: 1.5px;
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 999px;
            font-size: 10px;
            letter-spacing: 2px;
            text-transform: uppercase;
            border: 1px solid rgba(244, 241, 234, 0.25);
            color: rgba(244, 241, 234, 0.8);
        }

        .badge.admin {
            border-color: rgba(126, 216, 182, 0.45);
            color: #c0f5de;
        }

        .badge.you {
            border-color: rgba(244, 241, 234, 0.45);
            color: #f4f1ea;
        }

        .invite-form {
            margin-top: 18px;
            display: grid;
            gap: 12px;
        }

        .invite-form label {
            font-size: 12px;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.7);
        }

        .invite-form .invite-actions {
            display: flex;
            justify-content: flex-end;
        }

        .invite-feedback {
            font-size: 13px;
            letter-spacing: 0.5px;
            color: rgba(244, 241, 234, 0.72);
            min-height: 1.2em;
        }

        .invite-feedback[hidden] {
            display: none;
        }

        .invite-feedback.is-success {
            color: #b5f5dc;
        }

        .invite-feedback.is-error {
            color: #f7a4b6;
        }

        .invite-feedback.is-mailto {
            color: #f9e27d;
        }

        .invite-feedback.is-pending {
            color: rgba(244, 241, 234, 0.6);
        }

        .sisterhood-card footer {
            margin-top: 8px;
        }

        @@media (max-width: 768px) {
            .top-bar {
                padding: 18px 20px;
            }

            .brand {
                font-size: 16px;
                letter-spacing: 3px;
            }

            main {
                padding-top: 60px;
            }

            h1 {
                letter-spacing: 6px;
            }
        }
    </style>
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
</head>
<body>
    @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
    <main>
        <section>
            <h1>Sisterhoods</h1>
            @{
                var sanitizedDisplayName = string.IsNullOrWhiteSpace(Model.DisplayName) ? null : Model.DisplayName;
                var hasMembership = Model.Sisterhoods.Count > 0;
                string leadMessage;
                if (Model.IsAuthenticated && hasMembership)
                {
                    var prefix = sanitizedDisplayName is null ? "You're" : $"{sanitizedDisplayName}, you're";
                    leadMessage = $"{prefix} currently connected with these sisterhoods. Stay close to your fellow members and explore what's next together.";
                }
                else if (Model.IsAuthenticated)
                {
                    var subject = sanitizedDisplayName ?? "You";
                    leadMessage = $"{subject} haven't joined any sisterhoods yet. Discover the communities shaping tomorrow's wine world and find your next circle.";
                }
                else
                {
                    leadMessage = "Across continents and cultures, our Sisterhoods gather to share knowledge, amplify underrepresented voices, and craft cellars that celebrate every story in the vineyard. Explore the communities shaping tomorrow's wine world.";
                }
            }
            <p class="lead">@leadMessage</p>

            @if (!string.IsNullOrWhiteSpace(Model.StatusMessage))
            {
                <div class="status-banner success" role="status">@Model.StatusMessage</div>
            }

            @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
            {
                <div class="status-banner error" role="alert">@Model.ErrorMessage</div>
            }

            @if (Model.IsAuthenticated)
            {
                <div class="action-bar">
                    <button type="button" class="primary-button" data-sisterhood-create-toggle>Create Sisterhood</button>
                </div>
                <form method="post" action="@Url.Action("CreateSisterhood", "WineSurfer")" class="create-sisterhood-form@(Model.ErrorMessage != null ? " open" : string.Empty)" data-sisterhood-create-form>
                    @Html.AntiForgeryToken()
                    <div class="form-grid">
                        <div class="form-field">
                            <label for="sisterhood-name">Name</label>
                            <input id="sisterhood-name" name="Name" type="text" maxlength="256" required placeholder="Give your sisterhood a name" />
                        </div>
                        <div class="form-field">
                            <label for="sisterhood-description">Description</label>
                            <textarea id="sisterhood-description" name="Description" maxlength="1024" placeholder="Share the vision for this community (optional)"></textarea>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="secondary-button">Create</button>
                    </div>
                </form>
            }
        </section>
        @{
            var openInvitations = Model.IncomingInvitations
                .Where(invitation => invitation.Status == AllMCPSolution.Models.SisterhoodInvitationStatus.Pending)
                .ToList();
        }
        @if (openInvitations.Count > 0)
        {
            var acceptAction = Url.Action("AcceptSisterhoodInvitation", "WineSurfer");
            var declineAction = Url.Action("DeclineSisterhoodInvitation", "WineSurfer");
            var deleteAction = Url.Action("DeleteSisterhoodInvitation", "WineSurfer");
            <section class="invitation-section" aria-label="Sisterhood invitations awaiting your response">
                <div class="invitation-section-header">
                    <h2>Invitations waiting for you</h2>
                    <p>Respond to join a sisterhood or decline to clear the invite. You can remove invitations whenever you like.</p>
                </div>
                <div class="invitation-card-grid">
                    @foreach (var invitation in openInvitations)
                    {
                        var statusClass = invitation.Status.ToString().ToLowerInvariant();
                        var isPending = invitation.Status == AllMCPSolution.Models.SisterhoodInvitationStatus.Pending;
                        var responseMessage = invitation.Status switch
                        {
                            AllMCPSolution.Models.SisterhoodInvitationStatus.Accepted => "You accepted this invitation.",
                            AllMCPSolution.Models.SisterhoodInvitationStatus.Declined => "You declined this invitation.",
                            _ => ""
                        };
                        var updatedLocal = invitation.UpdatedAtUtc.ToLocalTime();
                        var createdLocal = invitation.CreatedAtUtc.ToLocalTime();
                        <article class="invitation-card" data-invitation-card data-invitation-id="@invitation.Id">
                            <div class="invitation-card-header">
                                <h3 class="invitation-card-title">@invitation.SisterhoodName</h3>
                                <span class="invitation-status @statusClass">@invitation.Status</span>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(invitation.SisterhoodDescription))
                            {
                                <p class="invitation-description">@invitation.SisterhoodDescription</p>
                            }
                            <p class="invitation-email">Invited as <strong>@invitation.InviteeEmail</strong></p>
                            <div class="invitation-tags">
                                @if (invitation.MatchesUserId)
                                {
                                    <span class="invitation-tag account">Linked to your account</span>
                                }
                                else if (invitation.MatchesEmail)
                                {
                                    <span class="invitation-tag email">Email match</span>
                                }
                            </div>
                            <p class="invitation-updated" title="@($"Sent {createdLocal:f}")">Updated @updatedLocal.ToString("g")</p>
                            @if (!string.IsNullOrEmpty(responseMessage))
                            {
                                <p class="invitation-response">@responseMessage</p>
                            }
                            <div class="invitation-card-actions">
                                @if (isPending)
                                {
                                    <form method="post" action="@(acceptAction ?? string.Empty)" class="inline-form">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="InvitationId" value="@invitation.Id" />
                                        <button type="submit" class="primary-button">Accept</button>
                                    </form>
                                    <form method="post" action="@(declineAction ?? string.Empty)" class="inline-form">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="InvitationId" value="@invitation.Id" />
                                        <button type="submit" class="secondary-button">Decline</button>
                                    </form>
                                }
                                <form method="post" action="@(deleteAction ?? string.Empty)" class="inline-form" onsubmit="return confirm('Remove this invitation?');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="InvitationId" value="@invitation.Id" />
                                    <button type="submit" class="ghost-danger-button">Delete invitation</button>
                                </form>
                            </div>
                        </article>
                    }
                </div>
            </section>
        }
        <section class="sisterhood-grid" aria-label="Wine Surfer sisterhood communities">
            @if (Model.Sisterhoods.Count > 0)
            {
                foreach (var sisterhood in Model.Sisterhoods)
                {
                    <article class="sisterhood-card" data-sisterhood-card data-sisterhood-id="@sisterhood.Id">
                        <div class="sisterhood-header">
                            <div>
                                <h2 class="sisterhood-name">@sisterhood.Name</h2>
                                <p class="sisterhood-members">
                                    @sisterhood.MemberCount @((sisterhood.MemberCount == 1) ? "member" : "members")
                                    @if (sisterhood.PendingInvitations.Count > 0)
                                    {
                                        <span class="pending-invite-count">Â· @sisterhood.PendingInvitations.Count pending invite@((sisterhood.PendingInvitations.Count == 1) ? string.Empty : "s")</span>
                                    }
                                    @if (sisterhood.CanManage)
                                    {
                                        <span class="badge admin" title="You manage this sisterhood">Admin</span>
                                    }
                                </p>
                            </div>
                            @if (sisterhood.CanManage)
                            {
                                <div class="sisterhood-actions">
                                    <button type="button"
                                            class="secondary-button"
                                            data-sisterhood-edit-toggle="@sisterhood.Id"
                                            aria-expanded="false"
                                            aria-controls="edit-sisterhood-form-@sisterhood.Id">
                                        Edit
                                    </button>
                                    <form method="post" action="@Url.Action("DeleteSisterhood", "WineSurfer")" class="inline-form" onsubmit="return confirm('Delete this sisterhood? This cannot be undone.');">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                        <button type="submit" class="danger-button">Delete</button>
                                    </form>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrWhiteSpace(sisterhood.Description))
                        {
                            <p class="sisterhood-description">@sisterhood.Description</p>
                        }

                        @if (sisterhood.CanManage)
                        {
                            <form method="post"
                                  action="@Url.Action("UpdateSisterhoodDetails", "WineSurfer")"
                                  class="edit-sisterhood-form"
                                  data-sisterhood-edit-form
                                  data-sisterhood-id="@sisterhood.Id"
                                  id="edit-sisterhood-form-@sisterhood.Id">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                <div class="form-grid">
                                    <div class="form-field">
                                        <label for="edit-name-@sisterhood.Id">Name</label>
                                        <input id="edit-name-@sisterhood.Id"
                                               name="Name"
                                               type="text"
                                               value="@sisterhood.Name"
                                               maxlength="256"
                                               minlength="2"
                                               required />
                                    </div>
                                    <div class="form-field">
                                        <label for="edit-description-@sisterhood.Id">Description</label>
                                        <textarea id="edit-description-@sisterhood.Id"
                                                  name="Description"
                                                  maxlength="1024">@(sisterhood.Description ?? string.Empty)</textarea>
                                    </div>
                                </div>
                                <div class="form-actions">
                                    <button type="submit" class="secondary-button">Save changes</button>
                                    <button type="button" class="ghost-button" data-sisterhood-edit-cancel data-sisterhood-id="@sisterhood.Id">Cancel</button>
                                </div>
                            </form>
                        }

                        @if (sisterhood.FavoriteRegion != null)
                        {
                            var favorite = sisterhood.FavoriteRegion;
                            var favoriteRegionDisplay = string.IsNullOrWhiteSpace(favorite.CountryName)
                                ? favorite.Name
                                : $"{favorite.Name}, {favorite.CountryName}";
                            <div class="sisterhood-favorite-region" role="group" aria-label="Favorite region insight">
                                <span class="favorite-region-label">Favorite region</span>
                                <span class="favorite-region-name">@favoriteRegionDisplay</span>
                                <span class="favorite-region-score">Average score Â· @favorite.AverageScore.ToString("0.##")</span>
                            </div>
                        }

                        @if (sisterhood.Members.Count > 0)
                        {
                            <ul class="member-list">
                                @foreach (var member in sisterhood.Members)
                                {
                                    <li>
                                        @{ var avatarLabel = string.IsNullOrWhiteSpace(member.DisplayName) ? "Member avatar" : $"Avatar for {member.DisplayName}"; }
                                            <div class="member-identity">
                                                <span class="member-avatar" role="img" aria-label="@avatarLabel">@member.AvatarLetter</span>
                                                <div class="member-details">
                                                    <span class="member-name">@member.DisplayName</span>
                                                    @if (member.IsAdmin || member.IsCurrentUser)
                                                    {
                                                        <div class="member-badges">
                                                            @if (member.IsAdmin)
                                                            {
                                                                <span class="badge admin">Admin</span>
                                                            }
                                                            @if (member.IsCurrentUser)
                                                            {
                                                                <span class="badge you">You</span>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                        </div>
                                        @if (sisterhood.CanManage && !member.IsCurrentUser)
                                        {
                                            <div class="member-actions">
                                                <form method="post" action="@Url.Action("UpdateSisterhoodAdmin", "WineSurfer")" class="inline-form">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                    <input type="hidden" name="UserId" value="@member.Id" />
                                                    <input type="hidden" name="MakeAdmin" value="@(member.IsAdmin ? "false" : "true")" />
                                                    <button type="submit" class="secondary-button">@(member.IsAdmin ? "Remove Admin" : "Make Admin")</button>
                                                </form>
                                                @if (!member.IsAdmin)
                                                {
                                                    <form method="post" action="@Url.Action("RemoveSisterhoodMember", "WineSurfer")" class="inline-form" onsubmit="return confirm('Remove @member.DisplayName.Replace("'", "\\'") from this sisterhood?');">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                        <input type="hidden" name="UserId" value="@member.Id" />
                                                        <button type="submit" class="danger-button">Remove</button>
                                                    </form>
                                                }
                                            </div>
                                        }
                                    </li>
                                }
                            </ul>
                        }

                        @if (Model.CurrentUserId.HasValue && sisterhood.Members.Any(member => member.IsCurrentUser))
                        {
                            var leaveConfirmName = string.IsNullOrWhiteSpace(sisterhood.Name)
                                ? "this sisterhood"
                                : sisterhood.Name.Replace("'", "\\'");

                            <footer>
                                <form method="post" action="@Url.Action("RemoveSisterhoodMember", "WineSurfer")"
                                      class="inline-form"
                                      onsubmit="return confirm('Leave @leaveConfirmName?');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                    <input type="hidden" name="UserId" value="@Model.CurrentUserId" />
                                    <button type="submit" class="ghost-danger-button">Leave sisterhood</button>
                                </form>
                            </footer>
                        }


                        <section class="sip-session-section">
                            <div class="sip-session-header">
                                <span class="sip-session-title">Sip sessions</span>
                                @if (sisterhood.CanManage)
                                {
                                    <button type="button"
                                            class="secondary-button"
                                            data-sip-session-create-toggle>
                                        Plan sip session
                                    </button>
                                }
                            </div>
                            @if (sisterhood.SipSessions.Count > 0)
                            {
                                <ul class="sip-session-list">
                                    @foreach (var session in sisterhood.SipSessions)
                                    {
                                        var editFormId = $"sip-session-edit-{session.Id}";
                                        var editContainerId = $"sip-session-edit-container-{session.Id}";
                                        var scheduleLabel = FormatSipSessionSchedule(session);
                                        var locationLabel = string.IsNullOrWhiteSpace(session.Location) ? "Location TBD" : session.Location;
                                        var scheduledValue = FormatSipSessionInputValue(session);
                                        var updatedLabel = FormatTimestamp(session.UpdatedAtUtc);
                                        var bottleSummaries = session.Bottles;
                                        var contributedBottleIds = string.Join(",", bottleSummaries.Select(bottle => bottle.Id));
                                        <li class="sip-session-item" data-sip-session-item id="sip-session-@session.Id">
                                            <div class="sip-session-item-header">
                                                <div class="sip-session-info">
                                                    <h3 class="sip-session-name">@session.Name</h3>
                                                    <div class="sip-session-meta">
                                                        <span>ð @scheduleLabel</span>
                                                        <span>ð @locationLabel</span>
                                                        <span>Last updated @updatedLabel</span>
                                                    </div>
                                                </div>
                                                @if (sisterhood.CanManage)
                                                {
                                                    <div class="sip-session-actions">
                                                        <button type="button"
                                                                class="secondary-button"
                                                                data-sip-session-edit-toggle
                                                                aria-expanded="false"
                                                                aria-controls="@editContainerId">Edit</button>
                                                        <form method="post"
                                                              action="@Url.Action("DeleteSipSession", "WineSurfer")"
                                                              class="inline-form"
                                                              onsubmit="return confirm('Delete this sip session?');">
                                                            @Html.AntiForgeryToken()
                                                            <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                            <input type="hidden" name="SipSessionId" value="@session.Id" />
                                                            <button type="submit" class="ghost-danger-button">Delete</button>
                                                        </form>
                                                    </div>
                                                }
                                            </div>
                                            @{
                                                var isCurrentUserMember = Model.CurrentUserId.HasValue && sisterhood.Members.Any(member => member.IsCurrentUser);
                                            }
                                            @if (isCurrentUserMember)
                                            {
                                                <div class="sip-session-contribute">
                                                    <button type="button"
                                                            class="secondary-button"
                                                            data-contribute-trigger
                                                            data-sisterhood-id="@sisterhood.Id"
                                                            data-sip-session-id="@session.Id"
                                                            data-session-bottle-ids="@contributedBottleIds">
                                                        Contribute bottle
                                                    </button>
                                                </div>
                                            }
                                            @if (!string.IsNullOrWhiteSpace(session.Description))
                                            {
                                                <p class="sip-session-description">@session.Description</p>
                                            }
                                            @if (bottleSummaries.Count > 0)
                                            {
                                                <div class="sip-session-bottles" aria-label="Bottles planned for this sip session">
                                                    <span class="sip-session-bottle-title">Pour list</span>
                                                    <ul class="sip-session-bottle-list">
                                                        @foreach (var bottle in bottleSummaries)
                                                        {
                                                            <li>@bottle.Label</li>
                                                        }
                                                    </ul>
                                                </div>
                                            }
                                            @if (sisterhood.CanManage)
                                            {
                                                <div id="@editContainerId"
                                                     class="sip-session-edit-region"
                                                     data-sip-session-edit-region
                                                     hidden>
                                                    <template data-sip-session-edit-template>
                                                        <form id="@editFormId"
                                                              method="post"
                                                              action="@Url.Action("UpdateSipSession", "WineSurfer")"
                                                              class="sip-session-form"
                                                              data-sip-session-edit-form>
                                                            @Html.AntiForgeryToken()
                                                            <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                                            <input type="hidden" name="SipSessionId" value="@session.Id" />
                                                            <label for="sip-session-name-@session.Id">Session name</label>
                                                            <input id="sip-session-name-@session.Id"
                                                                   name="Name"
                                                                   type="text"
                                                                   value="@session.Name"
                                                                   maxlength="256"
                                                                   required />
                                                            <label for="sip-session-schedule-@session.Id">Scheduled for</label>
                                                            <input id="sip-session-schedule-@session.Id"
                                                                   name="ScheduledAt"
                                                                   type="datetime-local"
                                                                   value="@scheduledValue" />
                                                            <label for="sip-session-location-@session.Id">Location</label>
                                                            <input id="sip-session-location-@session.Id"
                                                                   name="Location"
                                                                   type="text"
                                                                   value="@(session.Location ?? string.Empty)"
                                                                   maxlength="256" />
                                                            <label for="sip-session-description-@session.Id">Description</label>
                                                            <textarea id="sip-session-description-@session.Id"
                                                                      name="Description"
                                                                      maxlength="2048">@session.Description</textarea>
                                                            <div class="sip-session-form-actions">
                                                                <button type="submit" class="secondary-button">Save changes</button>
                                                                <button type="button"
                                                                        class="ghost-button"
                                                                        data-sip-session-edit-cancel>Cancel</button>
                                                            </div>
                                                        </form>
                                                    </template>
                                                </div>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="sip-session-empty">No sip sessions planned yet.</p>
                            }

                            @if (sisterhood.CanManage)
                            {
                                <form method="post"
                                      action="@Url.Action("CreateSipSession", "WineSurfer")"
                                      class="sip-session-form"
                                      data-sip-session-create-form
                                      hidden>
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                    <label for="sip-session-create-name-@sisterhood.Id">Session name</label>
                                    <input id="sip-session-create-name-@sisterhood.Id"
                                           name="Name"
                                           type="text"
                                           maxlength="256"
                                           required />
                                    <label for="sip-session-create-schedule-@sisterhood.Id">Scheduled for</label>
                                    <input id="sip-session-create-schedule-@sisterhood.Id"
                                           name="ScheduledAt"
                                           type="datetime-local" />
                                    <label for="sip-session-create-location-@sisterhood.Id">Location</label>
                                    <input id="sip-session-create-location-@sisterhood.Id"
                                           name="Location"
                                           type="text"
                                           maxlength="256" />
                                    <label for="sip-session-create-description-@sisterhood.Id">Description</label>
                                    <textarea id="sip-session-create-description-@sisterhood.Id"
                                              name="Description"
                                              maxlength="2048"></textarea>
                                    <div class="sip-session-form-actions">
                                        <button type="submit" class="secondary-button">Save session</button>
                                        <button type="button"
                                                class="ghost-button"
                                                data-sip-session-create-cancel>Cancel</button>
                                    </div>
                                </form>
                            }
                        </section>

                        @if (sisterhood.CanManage && sisterhood.PendingInvitations.Count > 0)
                        {
                            <div class="pending-invitations" role="group" aria-label="Pending invitations">
                                <div class="pending-invitations-header">
                                    <span class="pending-invitations-title">Pending invitations</span>
                                    <span class="pending-invitations-count">@sisterhood.PendingInvitations.Count @((sisterhood.PendingInvitations.Count == 1) ? "invite" : "invites")</span>
                                </div>
                                <ul class="pending-invitations-list">
                                    @{ var resendEndpoint = Url.Action("InviteSisterhoodMember", "WineSurfer"); }
                                    @foreach (var invitation in sisterhood.PendingInvitations)
                                    {
                                        var invitationLabel = string.IsNullOrWhiteSpace(invitation.InviteeName)
                                            ? invitation.Email
                                            : $"{invitation.InviteeName} Â· {invitation.Email}";
                                        <li class="pending-invitations-item" data-pending-invitation>
                                            <div class="pending-invite-row">
                                                <span class="pending-invite-email">@invitationLabel</span>
                                                <span class="pending-invite-status">@invitation.Status</span>
                                            </div>
                                            <span class="pending-invite-updated" data-pending-invite-updated>Updated @invitation.UpdatedAtUtc.ToLocalTime().ToString("g")</span>
                                            <div class="pending-invite-actions">
                                                <button type="button"
                                                        class="secondary-button"
                                                        data-resend-invite-button
                                                        data-endpoint="@(resendEndpoint ?? string.Empty)"
                                                        data-sisterhood-id="@sisterhood.Id"
                                                        data-invitation-email="@invitation.Email"
                                                        data-invitation-user-id="@(invitation.InviteeUserId?.ToString() ?? string.Empty)"
                                                        data-invitation-name="@(invitation.InviteeName ?? string.Empty)">Resend invitation mail</button>
                                                <p class="invite-feedback pending-invite-feedback" data-resend-invite-feedback aria-live="polite" hidden></p>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }

                        @if (sisterhood.CanManage)
                        {
                            <form method="post" action="@Url.Action("InviteSisterhoodMember", "WineSurfer")" class="invite-form" data-sisterhood-invite-form>
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SisterhoodId" value="@sisterhood.Id" />
                                <input type="hidden" name="UserId" value="" data-sisterhood-invite-user-id />
                                <input type="hidden" name="MemberEmail" value="" data-sisterhood-invite-email />
                                <input type="hidden" name="IsEmail" value="false" data-sisterhood-invite-is-email />
                                <label for="invite-member-@sisterhood.Id">Invite a Wine Surfer</label>
                                <input id="invite-member-@sisterhood.Id" name="MemberName" type="text" list="sisterhood-user-options" placeholder="Start typing a name or email" autocomplete="off" />
                            <div class="invite-actions">
                                <button type="submit" class="secondary-button">Invite</button>
                            </div>
                            <p class="invite-feedback" data-sisterhood-invite-feedback aria-live="polite" hidden></p>
                        </form>
                    }
                </article>
            }
            }
            else
            {
                <div class="empty-state" role="status">
                    <h2>@(Model.IsAuthenticated ? "No sisterhoods yet" : "Sign in to see your sisterhoods")</h2>
                    <p>
                        @(Model.IsAuthenticated
                            ? "When you join a sisterhood, it will appear here with quick insight into the community."
                            : "Authenticate to discover the sisterhoods you're connected to and explore tailored communities.")
                    </p>
                </div>
            }
        </section>
        <datalist id="sisterhood-user-options"></datalist>
    </main>
    <div class="contribute-modal-backdrop" data-contribute-modal hidden aria-hidden="true">
        <div class="contribute-modal" role="dialog" aria-modal="true" aria-labelledby="contribute-modal-title">
            <header class="contribute-modal__header">
                <h2 class="contribute-modal__title" id="contribute-modal-title">Contribute bottles</h2>
                <button type="button" class="ghost-button" data-contribute-close aria-label="Close contribute bottles dialog">Close</button>
            </header>
            <form method="post"
                  action="@Url.Action("ContributeSipSessionBottles", "WineSurfer")"
                  class="contribute-modal__form"
                  data-contribute-form>
                @Html.AntiForgeryToken()
                <input type="hidden" name="SisterhoodId" data-contribute-sisterhood />
                <input type="hidden" name="SipSessionId" data-contribute-session />
                <p class="contribute-modal__hint">Select the bottles you'd like to add to this sip session.</p>
                <div class="contribute-modal__list" role="group" aria-labelledby="contribute-modal-title">
                    <p class="contribute-modal__empty" data-contribute-empty @(Model.AvailableBottles.Count > 0 ? "hidden" : null)>No bottles available to contribute right now.</p>
                    @if (Model.AvailableBottles.Count > 0)
                    {
                        <ul>
                            @foreach (var bottle in Model.AvailableBottles)
                            {
                                var inputId = $"contribute-bottle-{bottle.Id:N}";
                                <li class="contribute-modal__option" data-bottle-option>
                                    <label for="@inputId">
                                        <input id="@inputId" type="checkbox" name="BottleIds" value="@bottle.Id" />
                                        <span>@bottle.Label</span>
                                    </label>
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="contribute-modal__actions">
                    <button type="submit" class="secondary-button" data-contribute-submit @(Model.AvailableBottles.Count == 0 ? "disabled" : null)>Add to sip session</button>
                    <button type="button" class="ghost-button" data-contribute-close>Cancel</button>
                </div>
            </form>
        </div>
    </div>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const contributeModal = document.querySelector('[data-contribute-modal]');
        if (contributeModal) {
            const form = contributeModal.querySelector('[data-contribute-form]');
            const sisterhoodField = form?.querySelector('[data-contribute-sisterhood]');
            const sessionField = form?.querySelector('[data-contribute-session]');
            const submitButton = form?.querySelector('[data-contribute-submit]');
            const emptyState = contributeModal.querySelector('[data-contribute-empty]');
            const closeButtons = contributeModal.querySelectorAll('[data-contribute-close]');
            const openButtons = document.querySelectorAll('[data-contribute-trigger]');
            const checkboxNodes = form?.querySelectorAll('input[type="checkbox"][name="BottleIds"]') ?? [];
            const optionNodes = form?.querySelectorAll('[data-bottle-option]') ?? [];

            const checkboxes = Array.from(checkboxNodes);
            const options = Array.from(optionNodes);
            let lastEnabledCount = checkboxes.filter(box => !box.disabled).length;
            let lastTriggerButton = null;

            const updateSubmitState = () => {
                if (!submitButton) {
                    return;
                }

                if (lastEnabledCount === 0) {
                    submitButton.disabled = true;
                    return;
                }

                const anyChecked = checkboxes.some(box => !box.disabled && box.checked);
                submitButton.disabled = !anyChecked;
            };

            const isModalOpen = () => !contributeModal.hasAttribute('hidden');

            const toggleScrollLock = (disable) => {
                if (disable) {
                    document.body.classList.add('no-scroll');
                } else {
                    document.body.classList.remove('no-scroll');
                }
            };

            const resetOptionState = () => {
                checkboxes.forEach(box => {
                    box.checked = false;
                    box.disabled = false;
                });
                options.forEach(option => option.removeAttribute('data-disabled'));
                lastEnabledCount = checkboxes.length;
                updateSubmitState();
            };

            const applySessionBottleState = (sessionBottleIds) => {
                let enabledCount = 0;
                checkboxes.forEach(box => {
                    const valueKey = box.value?.trim().toLowerCase() ?? '';
                    const shouldDisable = valueKey && sessionBottleIds.has(valueKey);
                    box.checked = false;
                    box.disabled = shouldDisable;

                    const option = box.closest('[data-bottle-option]');
                    if (option) {
                        if (shouldDisable) {
                            option.setAttribute('data-disabled', 'true');
                        } else {
                            option.removeAttribute('data-disabled');
                            enabledCount += 1;
                        }
                    }
                });

                if (emptyState) {
                    if (enabledCount === 0) {
                        emptyState.removeAttribute('hidden');
                    } else {
                        emptyState.setAttribute('hidden', '');
                    }
                }

                lastEnabledCount = enabledCount;
                updateSubmitState();
                return enabledCount;
            };

            const focusInitialControl = (enabledCount) => {
                if (enabledCount > 0) {
                    const firstEnabled = checkboxes.find(box => !box.disabled);
                    if (firstEnabled) {
                        window.requestAnimationFrame(() => firstEnabled.focus());
                        return;
                    }
                }

                const fallback = submitButton && !submitButton.disabled
                    ? submitButton
                    : closeButtons[0];

                if (fallback) {
                    window.requestAnimationFrame(() => fallback.focus());
                }
            };

            const openModal = (context) => {
                if (!form || !sisterhoodField || !sessionField) {
                    return;
                }

                const { sisterhoodId, sessionId, bottleIds } = context;
                sisterhoodField.value = sisterhoodId ?? '';
                sessionField.value = sessionId ?? '';

                const normalized = bottleIds.map(id => id.trim().toLowerCase()).filter(Boolean);
                const sessionBottleIds = new Set(normalized);
                const enabledCount = applySessionBottleState(sessionBottleIds);

                contributeModal.removeAttribute('hidden');
                contributeModal.setAttribute('aria-hidden', 'false');
                toggleScrollLock(true);
                focusInitialControl(enabledCount);
            };

            const closeModal = () => {
                if (!form) {
                    return;
                }

                contributeModal.setAttribute('hidden', '');
                contributeModal.setAttribute('aria-hidden', 'true');
                toggleScrollLock(false);
                form.reset();
                resetOptionState();

                if (emptyState && !emptyState.hasAttribute('hidden') && checkboxes.length > 0) {
                    emptyState.setAttribute('hidden', '');
                }

                if (lastTriggerButton) {
                    const trigger = lastTriggerButton;
                    lastTriggerButton = null;
                    window.requestAnimationFrame(() => trigger.focus());
                }
            };

            openButtons.forEach(button => {
                button.addEventListener('click', () => {
                    lastTriggerButton = button;
                    const sisterhoodId = button.getAttribute('data-sisterhood-id') ?? '';
                    const sessionId = button.getAttribute('data-sip-session-id') ?? '';
                    const rawBottleIds = button.getAttribute('data-session-bottle-ids') ?? '';
                    const bottleIds = rawBottleIds.split(',').map(id => id.trim()).filter(id => id.length > 0);

                    openModal({ sisterhoodId, sessionId, bottleIds });
                });
            });

            closeButtons.forEach(button => {
                button.addEventListener('click', closeModal);
            });

            checkboxes.forEach(box => {
                box.addEventListener('change', () => {
                    updateSubmitState();
                });
            });

            contributeModal.addEventListener('click', event => {
                if (event.target === contributeModal) {
                    closeModal();
                }
            });

            document.addEventListener('keydown', event => {
                if (event.key === 'Escape' && isModalOpen()) {
                    closeModal();
                }
            });

            updateSubmitState();
        }

        const toggleButton = document.querySelector('[data-sisterhood-create-toggle]');
        const createForm = document.querySelector('[data-sisterhood-create-form]');

        if (toggleButton && createForm) {
            toggleButton.addEventListener('click', () => {
                createForm.classList.toggle('open');
            });
        }

        const editForms = new Map();
        const editToggles = new Map();

        document.querySelectorAll('[data-sisterhood-edit-form]').forEach(form => {
            const sisterhoodId = form.getAttribute('data-sisterhood-id');
            if (!sisterhoodId) {
                return;
            }

            editForms.set(sisterhoodId, form);
        });

        document.querySelectorAll('[data-sisterhood-edit-toggle]').forEach(button => {
            const sisterhoodId = button.getAttribute('data-sisterhood-edit-toggle');
            if (!sisterhoodId) {
                return;
            }

            editToggles.set(sisterhoodId, button);

            button.addEventListener('click', () => {
                const form = editForms.get(sisterhoodId);
                if (!form) {
                    return;
                }

                const isOpen = form.classList.toggle('open');
                button.setAttribute('aria-expanded', isOpen ? 'true' : 'false');

                if (isOpen) {
                    const nameField = form.querySelector('input[name="Name"]');
                    window.requestAnimationFrame(() => nameField?.focus());
                }
            });
        });

        document.querySelectorAll('[data-sisterhood-edit-cancel]').forEach(cancelButton => {
            const sisterhoodId = cancelButton.getAttribute('data-sisterhood-id');
            if (!sisterhoodId) {
                return;
            }

            cancelButton.addEventListener('click', () => {
                const form = editForms.get(sisterhoodId);
                if (!form) {
                    return;
                }

                form.reset();
                form.classList.remove('open');

                const toggle = editToggles.get(sisterhoodId);
                toggle?.setAttribute('aria-expanded', 'false');
            });
        });

        const inviteForms = document.querySelectorAll('form[data-sisterhood-invite-form]');
        const userMap = new Map();
        const syncByForm = new WeakMap();
        const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

        const setUpInviteForm = (form) => {
            const input = form.querySelector('input[name="MemberName"]');
            const userIdField = form.querySelector('input[name="UserId"][data-sisterhood-invite-user-id]');
            const emailField = form.querySelector('input[name="MemberEmail"][data-sisterhood-invite-email]');
            const isEmailField = form.querySelector('input[name="IsEmail"][data-sisterhood-invite-is-email]');
            const feedback = form.querySelector('[data-sisterhood-invite-feedback]');
            const submitButton = form.querySelector('button[type="submit"]');

            if (!input || !userIdField || !emailField || !isEmailField) {
                return;
            }

            const clearFeedback = () => {
                if (!feedback) {
                    return;
                }

                feedback.textContent = '';
                feedback.hidden = true;
                feedback.classList.remove('is-success', 'is-error', 'is-mailto', 'is-pending');
            };

            const setFeedback = (message, variant) => {
                if (!feedback) {
                    return;
                }

                feedback.textContent = message;
                feedback.hidden = false;
                feedback.classList.remove('is-success', 'is-error', 'is-mailto', 'is-pending');
                if (variant) {
                    feedback.classList.add(`is-${variant}`);
                }
            };

            const syncDerivedValues = () => {
                const raw = input.value ?? '';
                const trimmed = raw.trim();
                const lookupKey = trimmed.toLowerCase();

                if (lookupKey && userMap.has(lookupKey)) {
                    userIdField.value = userMap.get(lookupKey);
                } else {
                    userIdField.value = '';
                }

                if (trimmed && emailPattern.test(trimmed)) {
                    emailField.value = trimmed.toLowerCase();
                    isEmailField.value = 'true';
                } else {
                    emailField.value = '';
                    isEmailField.value = 'false';
                }
            };

            syncByForm.set(form, syncDerivedValues);

            input.addEventListener('input', () => {
                syncDerivedValues();
                clearFeedback();
            });
            input.addEventListener('change', syncDerivedValues);
            input.addEventListener('blur', syncDerivedValues);
            syncDerivedValues();

            form.addEventListener('submit', async event => {
                event.preventDefault();

                if (!form.checkValidity()) {
                    form.reportValidity?.();
                    return;
                }

                const action = form.getAttribute('action');
                if (!action) {
                    form.submit();
                    return;
                }

                const formData = new FormData(form);

                try {
                    if (submitButton) {
                        if (!submitButton.dataset.originalLabel) {
                            submitButton.dataset.originalLabel = submitButton.textContent?.trim() ?? '';
                        }
                        submitButton.disabled = true;
                        submitButton.textContent = 'Invitingâ¦';
                    }

                    setFeedback('Sending invitationâ¦', 'pending');

                    const response = await fetch(action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin'
                    });

                    const contentType = response.headers.get('content-type') ?? '';
                    const expectsJson = contentType.includes('application/json');
                    if (!expectsJson) {
                        window.location.assign(action);
                        return;
                    }

                    const payload = await response.json();

                    if (!response.ok || !payload?.success) {
                        const errorMessage = payload?.message ?? 'We could not send that invitation. Please try again.';
                        setFeedback(errorMessage, 'error');
                        return;
                    }

                    const baseMessage = typeof payload.message === 'string'
                        ? payload.message
                        : 'Invitation sent.';

                    let finalMessage = baseMessage;
                    let variant = 'success';
                    let shouldOpenMailClient = false;

                    if (payload.shouldLaunchMailClient && payload.mailtoLink) {
                        const fallbackTarget = payload.mailtoLink.replace(/^mailto:/i, '').split('?')[0];
                        const emailTarget = payload.inviteeEmail ?? fallbackTarget;
                        finalMessage = `${baseMessage} We opened your email client so you can reach ${emailTarget} directly.`;
                        variant = 'mailto';
                        shouldOpenMailClient = true;
                    }

                    setFeedback(finalMessage, variant);

                    if (shouldOpenMailClient) {
                        window.setTimeout(() => {
                            window.location.href = payload.mailtoLink;
                        }, 100);
                    }

                    input.value = '';
                    userIdField.value = '';
                    emailField.value = '';
                    isEmailField.value = 'false';
                } catch (error) {
                    setFeedback('We could not send that invitation. Please try again.', 'error');
                } finally {
                    if (submitButton) {
                        submitButton.disabled = false;
                        const originalLabel = submitButton.dataset.originalLabel ?? 'Invite';
                        submitButton.textContent = originalLabel || 'Invite';
                    }
                }
            });
        };

        if (inviteForms.length > 0) {
            inviteForms.forEach(setUpInviteForm);

            fetch('/wine-surfer/users')
                .then(response => response.ok ? response.json() : [])
                .then(users => {
                    const dataList = document.getElementById('sisterhood-user-options');
                    if (!dataList) {
                        return;
                    }

                    dataList.innerHTML = '';
                    userMap.clear();

                    users.forEach(user => {
                        if (!user?.name || !user?.id) {
                            return;
                        }

                        const option = document.createElement('option');
                        option.value = user.name;
                        if (user.tasteProfile) {
                            option.label = `${user.name} Â· ${user.tasteProfile}`;
                        }
                        option.dataset.userId = user.id;
                        dataList.appendChild(option);
                        userMap.set(user.name.toLowerCase(), user.id);
                    });

                    inviteForms.forEach(form => {
                        const sync = syncByForm.get(form);
                        if (typeof sync === 'function') {
                            sync();
                        }
                    });
                })
                .catch(() => { /* Non-blocking hint failure */ });
        }

        const resendButtons = document.querySelectorAll('[data-resend-invite-button]');

        const setResendFeedback = (element, message, variant) => {
            if (!element) {
                return;
            }

            element.textContent = message ?? '';
            element.hidden = !message;
            element.classList.remove('is-success', 'is-error', 'is-mailto', 'is-pending');
            if (message && variant) {
                element.classList.add(`is-${variant}`);
            }
        };

        const findVerificationToken = (element) => {
            if (!element) {
                return null;
            }

            const card = element.closest('[data-sisterhood-card]');
            if (!card) {
                return null;
            }

            const tokenInput = card.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput?.value ?? null;
        };

        const formatUpdatedTimestamp = () => {
            try {
                return new Intl.DateTimeFormat(undefined, { dateStyle: 'short', timeStyle: 'short' }).format(new Date());
            } catch (error) {
                return new Date().toLocaleString();
            }
        };

        resendButtons.forEach(button => {
            button.addEventListener('click', async () => {
                const endpoint = (button.dataset.endpoint ?? '').trim();
                const sisterhoodId = (button.dataset.sisterhoodId ?? '').trim();
                const invitationItem = button.closest('[data-pending-invitation]');
                const feedback = invitationItem?.querySelector('[data-resend-invite-feedback]');
                const updatedLabel = invitationItem?.querySelector('[data-pending-invite-updated]');

                if (!endpoint) {
                    setResendFeedback(feedback, 'We could not determine where to send that request.', 'error');
                    return;
                }

                if (!sisterhoodId) {
                    setResendFeedback(feedback, 'We could not determine which sisterhood to update.', 'error');
                    return;
                }

                const token = findVerificationToken(button);
                if (!token) {
                    setResendFeedback(feedback, 'We could not verify this request. Refresh and try again.', 'error');
                    return;
                }

                const userId = (button.dataset.invitationUserId ?? '').trim();
                const email = (button.dataset.invitationEmail ?? '').trim();
                const inviteeName = (button.dataset.invitationName ?? '').trim();

                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                formData.append('SisterhoodId', sisterhoodId);

                if (userId) {
                    formData.append('UserId', userId);
                } else if (email) {
                    formData.append('MemberEmail', email);
                    formData.append('IsEmail', 'true');
                    formData.append('MemberName', inviteeName || email);
                } else {
                    setResendFeedback(feedback, 'We could not determine who should receive that invitation.', 'error');
                    return;
                }

                if (!button.dataset.originalLabel) {
                    button.dataset.originalLabel = button.textContent?.trim() ?? '';
                }

                button.disabled = true;
                button.textContent = 'Resendingâ¦';
                setResendFeedback(feedback, 'Resending invitationâ¦', 'pending');

                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin'
                    });

                    const contentType = response.headers.get('content-type') ?? '';
                    if (!contentType.includes('application/json')) {
                        window.location.assign(endpoint);
                        return;
                    }

                    const payload = await response.json();
                    if (!response.ok || !payload?.success) {
                        const errorMessage = payload?.message ?? 'We could not resend that invitation. Please try again.';
                        setResendFeedback(feedback, errorMessage, 'error');
                        return;
                    }

                    const baseMessage = typeof payload.message === 'string'
                        ? payload.message
                        : 'Invitation sent.';

                    let finalMessage = baseMessage;
                    let variant = 'success';
                    let shouldOpenMailClient = false;

                    if (payload.shouldLaunchMailClient && payload.mailtoLink) {
                        const fallbackTarget = payload.mailtoLink.replace(/^mailto:/i, '').split('?')[0];
                        const emailTarget = payload.inviteeEmail ?? fallbackTarget;
                        finalMessage = `${baseMessage} We opened your email client so you can reach ${emailTarget} directly.`;
                        variant = 'mailto';
                        shouldOpenMailClient = true;
                    }

                    setResendFeedback(feedback, finalMessage, variant);

                    if (updatedLabel) {
                        updatedLabel.textContent = `Updated ${formatUpdatedTimestamp()}`;
                    }

                    if (shouldOpenMailClient) {
                        window.setTimeout(() => {
                            window.location.href = payload.mailtoLink;
                        }, 100);
                    }
                } catch (error) {
                    setResendFeedback(feedback, 'We could not resend that invitation. Please try again.', 'error');
                } finally {
                    button.disabled = false;
                    const originalLabel = button.dataset.originalLabel ?? 'Resend invitation mail';
                    button.textContent = originalLabel || 'Resend invitation mail';
                }
            });
        });

        const createSessionButtons = document.querySelectorAll('[data-sip-session-create-toggle]');

        createSessionButtons.forEach(button => {
            button.addEventListener('click', () => {
                const card = button.closest('[data-sisterhood-card]');
                if (!card) {
                    return;
                }

                const form = card.querySelector('[data-sip-session-create-form]');
                if (!form) {
                    return;
                }

                const isHidden = form.hasAttribute('hidden');
                if (!button.dataset.originalLabel) {
                    button.dataset.originalLabel = button.textContent?.trim() ?? '';
                }

                if (isHidden) {
                    form.removeAttribute('hidden');
                    button.textContent = 'Cancel';
                    const nameField = form.querySelector('input[name="Name"]');
                    nameField?.focus();
                } else {
                    form.setAttribute('hidden', '');
                    form.reset();
                    const original = button.dataset.originalLabel ?? 'Plan sip session';
                    button.textContent = original || 'Plan sip session';
                }
            });
        });

        document.querySelectorAll('[data-sip-session-create-cancel]').forEach(button => {
            button.addEventListener('click', () => {
                const form = button.closest('[data-sip-session-create-form]');
                if (!form) {
                    return;
                }

                const card = form.closest('[data-sisterhood-card]');
                form.setAttribute('hidden', '');
                form.reset();

                const toggle = card?.querySelector('[data-sip-session-create-toggle]');
                if (toggle) {
                    const original = toggle.dataset.originalLabel ?? 'Plan sip session';
                    toggle.textContent = original || 'Plan sip session';
                }
            });
        });

        const editSessionButtons = document.querySelectorAll('[data-sip-session-edit-toggle]');

        const initializeSipSessionEditRegion = (region, toggleButton) => {
            if (!region) {
                return null;
            }

            if (region.dataset.initialized === 'true') {
                return region.querySelector('[data-sip-session-edit-form]');
            }

            const template = region.querySelector('template[data-sip-session-edit-template]');
            if (!template) {
                region.dataset.initialized = 'false';
                return null;
            }

            const fragment = template.content.cloneNode(true);
            region.appendChild(fragment);

            const form = region.querySelector('[data-sip-session-edit-form]');
            if (!form) {
                region.dataset.initialized = 'false';
                return null;
            }

            const cancelButton = form.querySelector('[data-sip-session-edit-cancel]');
            if (cancelButton) {
                cancelButton.addEventListener('click', () => {
                    form.reset();
                    region.setAttribute('hidden', '');
                    toggleButton.setAttribute('aria-expanded', 'false');
                    const original = toggleButton.dataset.originalLabel ?? 'Edit';
                    toggleButton.textContent = original || 'Edit';
                });
            }

            region.dataset.initialized = 'true';
            return form;
        };

        editSessionButtons.forEach(button => {
            button.addEventListener('click', () => {
                const item = button.closest('[data-sip-session-item]');
                if (!item) {
                    return;
                }

                const region = item.querySelector('[data-sip-session-edit-region]');
                if (!region) {
                    return;
                }

                let form = region.querySelector('[data-sip-session-edit-form]');
                if (!form) {
                    form = initializeSipSessionEditRegion(region, button);
                    if (!form) {
                        return;
                    }
                }

                const isHidden = region.hasAttribute('hidden');
                if (!button.dataset.originalLabel) {
                    button.dataset.originalLabel = button.textContent?.trim() ?? '';
                }

                if (isHidden) {
                    region.removeAttribute('hidden');
                    button.setAttribute('aria-expanded', 'true');
                    button.textContent = 'Close edit';
                    const nameField = form.querySelector('input[name="Name"]');
                    nameField?.focus();
                } else {
                    region.setAttribute('hidden', '');
                    button.setAttribute('aria-expanded', 'false');
                    form.reset();
                    const original = button.dataset.originalLabel ?? 'Edit';
                    button.textContent = original || 'Edit';
                }
            });
        });
    });
</script>
</body>
</html>
