@using System.Collections.Generic
@using System.Linq
@using System.Security.Claims
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.Rendering
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@model WineSurferTopBarModel?

@{ 
    var isAdmin = Model?.IsAdmin ?? false;
    var isAuthenticatedUser = User?.Identity?.IsAuthenticated == true;

    var navItems = new List<(string Href, string Label)>
    {
        ("/wine-surfer", "Home"),
        ("/wine-surfer/terroir", "Terroir"),
        ("/wine-surfer/sisterhoods", "Sisterhoods")
    };

    if (isAuthenticatedUser)
    {
        navItems.Add(("/wine-surfer/surf-eye", "Surf Eye"));
        navItems.Add(("/wine-surfer/taste-profile", "Taste Profile"));
    }

    navItems.Add(("/wine-manager", "Wine Inventory"));

    if (!isAdmin)
    {
        navItems = navItems
            .Where(item => !string.Equals(item.Href, "/wine-surfer/terroir", StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    var rawPath = Model?.CurrentPath;
    var currentPath = string.IsNullOrWhiteSpace(rawPath)
        ? string.Empty
        : rawPath!.TrimEnd('/');

    if (string.IsNullOrEmpty(currentPath) && !string.IsNullOrEmpty(rawPath))
    {
        currentPath = "/";
    }

    var visibleNavItems = navItems
        .Where(item => !string.Equals(item.Href, currentPath, StringComparison.OrdinalIgnoreCase))
        .ToList();

    string? userDisplayName = Model?.DisplayName;

    if (string.IsNullOrWhiteSpace(userDisplayName))
    {
        userDisplayName = User?.Identity?.IsAuthenticated == true
            ? User.Identity?.Name ?? string.Empty
            : string.Empty;
    }

    if (User?.Identity?.IsAuthenticated == true && string.IsNullOrWhiteSpace(userDisplayName))
    {
        userDisplayName = User.FindFirst(ClaimTypes.Email)?.Value
            ?? User.FindFirst("email")?.Value
            ?? string.Empty;
    }

    var sections = (Model?.Sections ?? Array.Empty<WineSurferTopBarNotificationSection>())
        .Where(section => section is not null)
        .ToList();

    var dismissedMap = Model?.DismissedNotificationStamps ?? WineSurferTopBarModel.EmptyDismissedNotificationSet;
    var dismissedStampSet = new HashSet<string>(StringComparer.Ordinal);
    foreach (var entry in dismissedMap)
    {
        if (entry.Value is null)
        {
            continue;
        }

        foreach (var stamp in entry.Value)
        {
            if (!string.IsNullOrWhiteSpace(stamp))
            {
                dismissedStampSet.Add(stamp);
            }
        }
    }

    var allNotifications = sections
        .SelectMany(section => section.Notifications ?? Array.Empty<WineSurferTopBarNotification>())
        .Where(notification => notification is not null)
        .ToList();

    var totalNotificationCount = allNotifications
        .Count(notification => !dismissedStampSet.Contains(notification.Stamp));

    var panelHeading = string.IsNullOrWhiteSpace(Model?.PanelHeading)
        ? WineSurferTopBarModel.DefaultPanelHeading
        : Model!.PanelHeading;
    var panelAriaLabel = string.IsNullOrWhiteSpace(Model?.PanelAriaLabel)
        ? panelHeading
        : Model!.PanelAriaLabel;
    var footerLinkItems = (Model?.FooterLinks ?? Array.Empty<WineSurferTopBarLink>())
        .Where(link => link is not null && !string.IsNullOrWhiteSpace(link.Href) && !string.IsNullOrWhiteSpace(link.Label))
        .ToList();
    var notificationHeadingId = "notificationPanelHeading";

    var trimmedDisplayName = string.IsNullOrWhiteSpace(userDisplayName)
        ? string.Empty
        : userDisplayName.Trim();

    var menuUserName = string.IsNullOrWhiteSpace(trimmedDisplayName)
        ? "Account"
        : trimmedDisplayName;

    var avatarLetter = "?";

    if (!string.IsNullOrEmpty(trimmedDisplayName))
    {
        avatarLetter = trimmedDisplayName[..1].ToUpperInvariant();
    }

    var avatarAccountLabel = string.IsNullOrEmpty(trimmedDisplayName)
        ? "Guest account"
        : $"{trimmedDisplayName}'s account";

    var notificationSummary = totalNotificationCount switch
    {
        0 => "No notifications",
        1 => "1 notification",
        _ => $"{totalNotificationCount} notifications"
    };

    var avatarButtonLabel = string.IsNullOrWhiteSpace(avatarAccountLabel)
        ? $"{notificationSummary}."
        : $"{avatarAccountLabel}. {notificationSummary}.";

    var userIdClaim = User?.FindFirstValue(ClaimTypes.NameIdentifier);
    var notificationStorageUserKey = string.IsNullOrWhiteSpace(userIdClaim) ? "guest" : userIdClaim!;

    var returnUrl = string.IsNullOrWhiteSpace(rawPath) ? "/wine-surfer" : rawPath!;
    if (!string.IsNullOrEmpty(returnUrl) && !returnUrl.StartsWith('/'))
    {
        returnUrl = "/wine-surfer";
    }

    var loginUrl = Url.Action("Login", "Account", new { returnUrl });
    var registerUrl = Url.Action("Register", "Account", new { returnUrl });
    var changePasswordUrl = Url.Action("ChangePassword", "Account");
    var updateDisplayNameUrl = Url.Action("UpdateDisplayName", "Account");

    var dismissalEndpoint = Url.Action("Dismiss", "WineSurferNotifications") ?? "/wine-surfer/notifications/dismiss";
    var dismissedStampJson = JsonSerializer.Serialize(dismissedStampSet.ToArray());
    var dismissedStampMapJson = JsonSerializer.Serialize(dismissedMap);
    var dismissalEndpointJson = JsonSerializer.Serialize(dismissalEndpoint);
    var isAuthenticated = isAuthenticatedUser;
    var isAuthenticatedJson = JsonSerializer.Serialize(isAuthenticated);

    var rawPageTitle = ViewData["WineSurferPageTitle"] as string;
    var pageTitle = string.IsNullOrWhiteSpace(rawPageTitle) ? null : rawPageTitle!.Trim();
    var showPageTitle = !string.IsNullOrEmpty(pageTitle);
}

<header class="top-bar">
    <div class="top-bar-antiforgery" data-antiforgery-token-cache hidden>
        @Html.AntiForgeryToken()
    </div>
    <a class="brand" href="@Url.Content("~/wine-surfer")" aria-label="Wine Surfer home">
        <img src="@Url.Content("~/assets/logo.png")" alt="Wine Surfer" style="height:32px;width:auto;display:block;" />
    </a>
    @if (showPageTitle)
    {
        <h1 class="top-bar-page-title">@pageTitle</h1>
    }
    else
    {
        <span class="top-bar-page-title top-bar-page-title--hidden" aria-hidden="true"></span>
    }
    <div class="top-bar-actions">
        <div class="notification-shell">
            <button
                id="notificationToggle"
                class="top-bar-avatar"
                type="button"
                aria-haspopup="true"
                aria-expanded="false"
                aria-controls="notificationPanel"
                aria-label="@avatarButtonLabel"
                data-account-label="@avatarAccountLabel"
                data-user-id="@notificationStorageUserKey"
                data-is-authenticated="@(isAuthenticated ? "true" : "false")">
                <span aria-hidden="true">@avatarLetter</span>
            </button>
            @if (totalNotificationCount > 0)
            {
                <span class="notification-badge" aria-hidden="true">@totalNotificationCount</span>
            }
            <div
                id="notificationPanel"
                class="notification-panel"
                role="region"
                aria-hidden="true"
                aria-labelledby="@notificationHeadingId"
                aria-label="@panelAriaLabel">
                <p id="@notificationHeadingId" class="notification-heading">@panelHeading</p>
                @if (sections.Count > 0)
                    {
                        foreach (var sec in sections)
                        {
                            var notifications = (sec.Notifications ?? Array.Empty<WineSurferTopBarNotification>())
                                .Where(notification => notification is not null)
                                .ToList();

                            var sectionHasVisible = notifications.Any(notification => !dismissedStampSet.Contains(notification.Stamp));

                            <div
                                class="notification-section"
                                data-section-key="@sec.Key"
                                aria-label="@(sec.AriaLabel ?? sec.Heading)"
                                @(sectionHasVisible ? string.Empty : " hidden")>
                                
                                <p class="notification-subheading">@sec.Heading</p>
                                
                                <ul class="notification-list">
                                    @foreach (var notification in notifications)
                                    {
                                        var isDismissed = dismissedStampSet.Contains(notification.Stamp);
                                        var url = string.IsNullOrWhiteSpace(notification.Url) ? "#" : notification.Url!;
                                        var disableLink = string.IsNullOrWhiteSpace(notification.Url);
                                        var bodySegments = (notification.Body ?? Array.Empty<WineSurferTopBarTextSegment>())
                                            .Where(segment => segment is not null)
                                            .ToList();
                                        var metaSegments = (notification.Meta ?? Array.Empty<WineSurferTopBarTextSegment>())
                                            .Where(segment => segment is not null)
                                            .ToList();
                                        var occurredLocal = notification.OccurredAtUtc?.ToLocalTime();
                                        var occurredLabel = occurredLocal?.ToString("g");
                                        var dismissLabel = string.IsNullOrWhiteSpace(notification.DismissLabel)
                                            ? $"Dismiss notification for {notification.Title}"
                                            : notification.DismissLabel!;

                                        <li
                                            class="notification-item"
                                            data-notification-stamp="@notification.Stamp"
                                            data-notification-category="@notification.Category"
                                            data-section-key="@sec.Key"
                                            @(isDismissed ? " hidden aria-hidden=\"true\"" : string.Empty)>
                                            
                                            <a
                                                class="notification-link"
                                                href="@url"
                                                @(disableLink ? " aria-disabled=\"true\" tabindex=\"-1\"" : string.Empty)>
                                                
                                                <span class="notification-title">@notification.Title</span>

                                                @if (bodySegments.Count > 0)
                                                {
                                                    <span class="notification-meta">
                                                        @foreach (var segment in bodySegments)
                                                        {
                                                            if (segment.Emphasize)
                                                            {
                                                                <strong>@segment.Text</strong>
                                                            }
                                                            else
                                                            {
                                                                @segment.Text
                                                            }
                                                        }
                                                    </span>
                                                }

                                                @if (metaSegments.Count > 0 || occurredLabel is not null)
                                                {
                                                    <span class="notification-meta notification-meta-secondary">
                                                        @{
                                                            var hasMetaText = false;
                                                            foreach (var segment in metaSegments)
                                                            {
                                                                hasMetaText = true;
                                                                if (segment.Emphasize)
                                                                {
                                                                    <strong>@segment.Text</strong>
                                                                }
                                                                else
                                                                {
                                                                    @segment.Text
                                                                }
                                                            }

                                                            if (occurredLabel is not null)
                                                            {
                                                                if (hasMetaText)
                                                                {
                                                                    @: · 
                                                                }

                                                                @occurredLabel
                                                            }
                                                        }
                                                    </span>
                                                }

                                                @if (!string.IsNullOrWhiteSpace(notification.Tag))
                                                {
                                                    <span class="notification-tag">@notification.Tag</span>
                                                }
                                            </a>

                                            <button
                                                type="button"
                                                class="notification-dismiss"
                                                data-notification-stamp="@notification.Stamp"
                                                data-notification-category="@notification.Category"
                                                aria-label="@dismissLabel">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    }

                <p class="notification-empty"@(totalNotificationCount > 0 ? " hidden" : string.Empty)>You're all caught up. No notifications right now.</p>
                @if (footerLinkItems.Count > 0)
                {
                    <div class="notification-footer">
                        @foreach (var link in footerLinkItems)
                        {
                            <a href="@link.Href">@link.Label</a>
                        }
                    </div>
                }
            </div>
        </div>
        <button id="menuToggle" class="burger" type="button" aria-expanded="false" aria-controls="menuPanel">
            <span></span>
        </button>
    </div>
    <nav id="menuPanel" class="menu-panel" aria-hidden="true">
        @if (visibleNavItems.Count > 0)
        {
            <div class="menu-links">
                @foreach (var item in visibleNavItems)
                {
                    <a href="@item.Href">@item.Label</a>
                }
            </div>
            <div class="menu-divider" aria-hidden="true"></div>
        }
        <div class="menu-user">
            @if (User?.Identity?.IsAuthenticated == true)
            {
                <span class="menu-user-label">Signed in as</span>
                <span class="menu-user-name" data-account-display-name="@trimmedDisplayName" data-account-display-fallback="@menuUserName">@menuUserName</span>
                <div class="menu-auth-options">
                    @if (!string.IsNullOrEmpty(updateDisplayNameUrl))
                    {
                        <button type="button" class="auth-toggle" data-edit-account-trigger>Edit account</button>
                    }
                    @if (!string.IsNullOrEmpty(changePasswordUrl))
                    {
                        <a class="auth-toggle" href="@changePasswordUrl">Change password</a>
                    }
                    @using (Html.BeginForm("Logout", "Account", FormMethod.Post, new { @class = "auth-form" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                        <button class="auth-toggle" type="submit" data-auth-state="logout">Sign out</button>
                    }
                </div>
            }
            else
            {
                <span class="menu-user-label">Account</span>
                <div class="menu-auth-options">
                    @if (!string.IsNullOrEmpty(loginUrl))
                    {
                        <a class="auth-toggle" href="@loginUrl">Sign in with email</a>
                    }
                    @if (!string.IsNullOrEmpty(registerUrl))
                    {
                        <a class="auth-toggle" href="@registerUrl">Create an account</a>
                    }
                </div>
            }
        </div>
</nav>
    <script src="~/js/request-verification.js"></script>
</header>
@if (isAuthenticated && !string.IsNullOrEmpty(updateDisplayNameUrl))
{
    <div class="account-edit-layer" data-account-edit-layer data-account-display-name="@trimmedDisplayName" hidden>
        <div class="account-edit-backdrop" data-edit-account-dismiss aria-hidden="true"></div>
        <div class="account-edit-dialog" role="dialog" aria-modal="true" aria-labelledby="accountEditTitle">
            <form id="accountEditForm" class="account-edit-form" method="post" action="@updateDisplayNameUrl" novalidate>
                @Html.AntiForgeryToken()
                <div class="account-edit-header">
                    <h2 id="accountEditTitle" class="account-edit-title">Edit account</h2>
                    <button type="button" class="account-edit-close" data-edit-account-cancel aria-label="Close edit account dialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <p class="account-edit-description">Update the name that appears across Wine Surfer experiences.</p>
                <div class="account-edit-field">
                    <label class="account-edit-label" for="accountEditDisplayName">Display name</label>
                    <input
                        id="accountEditDisplayName"
                        name="DisplayName"
                        class="account-edit-input"
                        type="text"
                        maxlength="128"
                        autocomplete="name"
                        value="@trimmedDisplayName"
                        required />
                </div>
                <p class="account-edit-error" data-account-edit-error hidden></p>
                <div class="account-edit-actions">
                    <button type="submit" class="auth-toggle account-edit-submit">Save changes</button>
                    <button type="button" class="account-edit-cancel" data-edit-account-cancel>Cancel</button>
                </div>
            </form>
        </div>
    </div>
}
<script>
    (() => {
        const dismissalEndpoint = @Html.Raw(dismissalEndpointJson);
        const isAuthenticatedUser = @Html.Raw(isAuthenticatedJson);
        const initialServerDismissedMap = @Html.Raw(dismissedStampMapJson);
        const dismissedByCategory = new Map();
        const dismissedStamps = new Set();

        const toggle = document.getElementById('menuToggle');
        const panel = document.getElementById('menuPanel');
        const notificationToggle = document.getElementById('notificationToggle');
        const notificationPanel = document.getElementById('notificationPanel');
        const notificationBadge = document.querySelector('.notification-badge');
        const editAccountTrigger = panel?.querySelector('[data-edit-account-trigger]') ?? null;
        const accountEditLayer = document.querySelector('[data-account-edit-layer]');
        const accountEditForm = document.getElementById('accountEditForm');
        const accountEditInput = document.getElementById('accountEditDisplayName');
        const accountEditError = accountEditLayer?.querySelector('[data-account-edit-error]') ?? null;
        const accountEditBackdrop = accountEditLayer?.querySelector('[data-edit-account-dismiss]') ?? null;
        const accountEditCancelButtons = accountEditLayer ? Array.from(accountEditLayer.querySelectorAll('[data-edit-account-cancel]')) : [];
        const accountDisplayTargets = document.querySelectorAll('[data-account-display-name]');
        const accountEditSubmit = accountEditForm?.querySelector('.account-edit-submit') ?? null;

        const normalizeCategoryKey = (value) => {
            if (typeof value !== 'string') {
                return '';
            }

            const trimmed = value.trim();
            return trimmed.length === 0 ? '' : trimmed.toLowerCase();
        };

        const normalizeStampValue = (value) => {
            if (typeof value !== 'string') {
                return '';
            }

            const trimmed = value.trim();
            return trimmed.length === 0 ? '' : trimmed;
        };

        const trackDismissedStamp = (normalizedCategory, normalizedStamp) => {
            if (!normalizedStamp) {
                return;
            }

            dismissedStamps.add(normalizedStamp);

            if (!normalizedCategory) {
                return;
            }

            const categorySet = dismissedByCategory.get(normalizedCategory) ?? new Set();
            categorySet.add(normalizedStamp);
            dismissedByCategory.set(normalizedCategory, categorySet);
        };

        const replaceCategoryDismissals = (normalizedCategory, stampValues) => {
            if (!normalizedCategory) {
                return;
            }

            const existing = dismissedByCategory.get(normalizedCategory);
            if (existing) {
                existing.forEach(stamp => {
                    dismissedStamps.delete(stamp);
                });
            }

            dismissedByCategory.delete(normalizedCategory);

            if (!Array.isArray(stampValues) || stampValues.length === 0) {
                return;
            }

            const nextSet = new Set();
            stampValues.forEach(value => {
                const normalizedStamp = normalizeStampValue(value);
                if (!normalizedStamp) {
                    return;
                }

                nextSet.add(normalizedStamp);
                dismissedStamps.add(normalizedStamp);
            });

            if (nextSet.size > 0) {
                dismissedByCategory.set(normalizedCategory, nextSet);
            }
        };

        const removeTrackedDismissedStamp = (normalizedCategory, normalizedStamp) => {
            if (!normalizedStamp) {
                return;
            }

            dismissedStamps.delete(normalizedStamp);

            if (!normalizedCategory) {
                return;
            }

            const categorySet = dismissedByCategory.get(normalizedCategory);
            if (!categorySet) {
                return;
            }

            categorySet.delete(normalizedStamp);
            if (categorySet.size === 0) {
                dismissedByCategory.delete(normalizedCategory);
            }
        };

        const closeMenu = () => {
            if (!toggle || !panel) {
                return;
            }

            toggle.classList.remove('active');
            toggle.setAttribute('aria-expanded', 'false');
            panel.classList.remove('open');
            panel.setAttribute('aria-hidden', 'true');
        };

        const closeNotifications = () => {
            if (!notificationToggle || !notificationPanel) {
                return;
            }

            notificationToggle.classList.remove('active');
            notificationToggle.setAttribute('aria-expanded', 'false');
            notificationPanel.classList.remove('open');
            notificationPanel.setAttribute('aria-hidden', 'true');
        };

        const storageKeyBase = notificationToggle?.dataset.userId ?? 'guest';
        const dismissedStorageKey = `wineSurfer.notifications.dismissed.${storageKeyBase}`;

        const loadDismissedStamps = () => {
            if (typeof window === 'undefined' || !window.localStorage) {
                return [];
            }

            try {
                const raw = window.localStorage.getItem(dismissedStorageKey);
                if (!raw) {
                    return [];
                }

                const parsed = JSON.parse(raw);
                if (!Array.isArray(parsed)) {
                    return [];
                }

                return parsed
                    .map(item => normalizeStampValue(item))
                    .filter(item => item.length > 0);
            } catch {
                return [];
            }
        };

        if (initialServerDismissedMap && typeof initialServerDismissedMap === 'object') {
            Object.entries(initialServerDismissedMap).forEach(([categoryKey, stampValues]) => {
                const normalizedCategory = normalizeCategoryKey(categoryKey);
                if (!normalizedCategory) {
                    return;
                }

                replaceCategoryDismissals(normalizedCategory, stampValues);
            });
        }

        const initialLocalDismissed = loadDismissedStamps();
        if (Array.isArray(initialLocalDismissed)) {
            initialLocalDismissed.forEach(stampValue => {
                const normalizedStamp = normalizeStampValue(stampValue);
                if (normalizedStamp) {
                    dismissedStamps.add(normalizedStamp);
                }
            });
        }

        const persistDismissedStamps = (shouldPersist) => {
            if (typeof window === 'undefined' || !window.localStorage) {
                return;
            }

            try {
                if (!shouldPersist || dismissedStamps.size === 0) {
                    window.localStorage.removeItem(dismissedStorageKey);
                    return;
                }

                window.localStorage.setItem(dismissedStorageKey, JSON.stringify(Array.from(dismissedStamps)));
            } catch {
                // Ignore storage errors
            }
        };

        const getVisibleNotificationCount = () => {
            if (notificationPanel) {
                const items = Array.from(notificationPanel.querySelectorAll('.notification-item'));
                return items.filter(item => !item.hasAttribute('hidden') && item.getAttribute('aria-hidden') !== 'true').length;
            }

            if (!notificationBadge) {
                return 0;
            }

            const raw = (notificationBadge.textContent ?? '').trim();
            const parsed = Number.parseInt(raw, 10);
            return Number.isFinite(parsed) ? parsed : 0;
        };

        const setAccountDisplayName = (displayName, fallbackName) => {
            const sanitized = typeof displayName === 'string' ? displayName.trim() : '';
            const fallback = typeof fallbackName === 'string' && fallbackName.trim().length > 0
                ? fallbackName.trim()
                : (sanitized || 'Account');

            accountDisplayTargets.forEach(target => {
                target.textContent = sanitized || fallback;
                target.setAttribute('data-account-display-name', sanitized);
                target.setAttribute('data-account-display-fallback', fallback);
            });

            if (accountEditLayer) {
                accountEditLayer.setAttribute('data-account-display-name', sanitized);
            }
        };

        const setEditError = (message) => {
            if (!accountEditError) {
                return;
            }

            const content = (message ?? '').trim();
            if (content.length === 0) {
                accountEditError.textContent = '';
                accountEditError.hidden = true;
                accountEditError.removeAttribute('role');
            } else {
                accountEditError.textContent = content;
                accountEditError.hidden = false;
                accountEditError.setAttribute('role', 'alert');
            }
        };

        const setEditLoading = (isLoading) => {
            if (!accountEditForm) {
                return;
            }

            accountEditForm.classList.toggle('is-loading', isLoading);

            if (accountEditSubmit) {
                accountEditSubmit.disabled = isLoading;
                accountEditSubmit.setAttribute('aria-busy', isLoading ? 'true' : 'false');
            }

            if (accountEditInput) {
                accountEditInput.readOnly = isLoading;
            }
        };

        const isEditModalOpen = () => Boolean(accountEditLayer) && !accountEditLayer.hasAttribute('hidden');

        let lastFocusedBeforeEdit = null;

        const openEditModal = () => {
            if (!accountEditLayer || !accountEditForm || !accountEditInput) {
                return;
            }

            lastFocusedBeforeEdit = document.activeElement instanceof HTMLElement ? document.activeElement : null;

            const currentName = accountEditLayer.getAttribute('data-account-display-name') ?? '';
            accountEditInput.value = currentName;
            accountEditInput.readOnly = false;

            setEditError('');
            setEditLoading(false);

            accountEditLayer.hidden = false;
            accountEditLayer.classList.add('open');
            document.body.classList.add('account-edit-open');

            window.setTimeout(() => {
                accountEditInput.focus();
                accountEditInput.select();
            }, 0);
        };

        const closeEditModal = () => {
            if (!accountEditLayer) {
                return;
            }

            accountEditLayer.classList.remove('open');
            accountEditLayer.hidden = true;
            document.body.classList.remove('account-edit-open');
            setEditError('');
            setEditLoading(false);

            if (accountEditInput) {
                accountEditInput.readOnly = false;
            }

            const target = lastFocusedBeforeEdit;
            lastFocusedBeforeEdit = null;
            if (target && typeof target.focus === 'function') {
                target.focus();
            }
        };

        const updateAvatarLabel = (visibleCount) => {
            if (!notificationToggle) {
                return;
            }

            const accountLabel = notificationToggle.dataset.accountLabel ?? '';
            let summary;
            if (visibleCount === 0) {
                summary = 'No notifications';
            } else if (visibleCount === 1) {
                summary = '1 notification';
            } else {
                summary = `${visibleCount} notifications`;
            }

            const finalLabel = accountLabel ? `${accountLabel}. ${summary}.` : `${summary}.`;
            notificationToggle.setAttribute('aria-label', finalLabel);
        };

        const applyDismissedNotifications = () => {
            if (!notificationPanel) {
                updateAvatarLabel(0);
                return;
            }

            let visibleCount = 0;

            const sections = Array.from(notificationPanel.querySelectorAll('.notification-section'));
            sections.forEach(section => {
                let sectionVisible = 0;
                const items = Array.from(section.querySelectorAll('.notification-item'));
                items.forEach(item => {
                    const rawStamp = item.dataset.notificationStamp;
                    const normalizedStamp = normalizeStampValue(rawStamp);
                    if (!normalizedStamp) {
                        item.hidden = false;
                        item.setAttribute('aria-hidden', 'false');
                        sectionVisible += 1;
                        visibleCount += 1;
                        return;
                    }

                    const isDismissed = dismissedStamps.has(normalizedStamp);
                    item.hidden = isDismissed;
                    item.setAttribute('aria-hidden', String(isDismissed));

                    if (!isDismissed) {
                        sectionVisible += 1;
                        visibleCount += 1;
                    }
                });

                section.toggleAttribute('hidden', sectionVisible === 0);
            });

            const notificationEmpty = notificationPanel.querySelector('.notification-empty');
            if (notificationEmpty) {
                notificationEmpty.toggleAttribute('hidden', visibleCount > 0);
            }

            if (notificationBadge) {
                if (visibleCount > 0) {
                    notificationBadge.textContent = String(visibleCount);
                    notificationBadge.removeAttribute('hidden');
                    notificationBadge.setAttribute('aria-hidden', 'false');
                    notificationBadge.style.removeProperty('display');
                } else {
                    notificationBadge.textContent = '';
                    notificationBadge.setAttribute('hidden', '');
                    notificationBadge.setAttribute('aria-hidden', 'true');
                    notificationBadge.style.display = 'none';
                }
            }

            updateAvatarLabel(visibleCount);
        };

        const dismissNotification = async (button) => {
            const item = button.closest('.notification-item');
            if (!item) {
                return;
            }

            const rawStamp = item.dataset.notificationStamp;
            const rawCategory = item.dataset.notificationCategory;

            if (!rawStamp || !rawCategory) {
                return;
            }

            const normalizedStamp = normalizeStampValue(rawStamp);
            if (!normalizedStamp) {
                return;
            }

            const requestCategory = typeof rawCategory === 'string' ? rawCategory.trim() : '';
            if (!requestCategory) {
                return;
            }

            const normalizedCategory = normalizeCategoryKey(requestCategory);

            trackDismissedStamp(normalizedCategory, normalizedStamp);
            applyDismissedNotifications();

            if (!isAuthenticatedUser || !dismissalEndpoint) {
                persistDismissedStamps(true);
                return;
            }

            try {
                const response = await fetch(dismissalEndpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify({ category: requestCategory, stamp: normalizedStamp })
                });

                if (response.ok) {
                    const payload = await response.json();
                    const dismissed = payload?.dismissedStamps;
                    if (dismissed && typeof dismissed === 'object') {
                        let hasCategoryUpdates = false;
                        Object.entries(dismissed).forEach(([key, value]) => {
                            if (!Array.isArray(value)) {
                                return;
                            }

                            const responseCategory = normalizeCategoryKey(key);
                            if (!responseCategory) {
                                return;
                            }

                            replaceCategoryDismissals(responseCategory, value);
                            hasCategoryUpdates = true;
                        });

                        if (!hasCategoryUpdates && normalizedCategory) {
                            replaceCategoryDismissals(normalizedCategory, []);
                        }

                        persistDismissedStamps(false);
                    } else {
                        persistDismissedStamps(true);
                    }
                } else if (response.status === 401 || response.status === 403) {
                    removeTrackedDismissedStamp(normalizedCategory, normalizedStamp);
                    persistDismissedStamps(true);
                } else {
                    persistDismissedStamps(true);
                }
            } catch {
                persistDismissedStamps(true);
            } finally {
                applyDismissedNotifications();
            }
        };

        if (toggle && panel) {
            toggle.addEventListener('click', () => {
                const isOpen = toggle.classList.toggle('active');
                toggle.setAttribute('aria-expanded', String(isOpen));
                panel.classList.toggle('open', isOpen);
                panel.setAttribute('aria-hidden', String(!isOpen));

                if (isOpen) {
                    closeNotifications();
                }
            });

            panel.querySelectorAll('a, button').forEach(element => {
                element.addEventListener('click', () => {
                    closeMenu();
                });
            });
        }

        if (notificationToggle && notificationPanel) {
            notificationToggle.addEventListener('click', () => {
                const isOpen = notificationToggle.classList.toggle('active');
                notificationToggle.setAttribute('aria-expanded', String(isOpen));
                notificationPanel.classList.toggle('open', isOpen);
                notificationPanel.setAttribute('aria-hidden', String(!isOpen));

                if (isOpen) {
                    closeMenu();
                }
            });

            notificationPanel.querySelectorAll('a, button:not(.notification-dismiss)').forEach(element => {
                element.addEventListener('click', () => {
                    closeNotifications();
                });
            });

            notificationPanel.querySelectorAll('.notification-dismiss').forEach(button => {
                button.addEventListener('click', (event) => {
                    event.stopPropagation();
                    event.preventDefault();
                    (async () => {
                        await dismissNotification(button);
                    })();
                });
            });

            applyDismissedNotifications();
        } else {
            updateAvatarLabel(0);
        }

        if (editAccountTrigger && accountEditLayer && accountEditForm && accountEditInput) {
            editAccountTrigger.addEventListener('click', (event) => {
                event.preventDefault();
                closeMenu();
                openEditModal();
            });

            if (accountEditBackdrop) {
                accountEditBackdrop.addEventListener('click', () => {
                    closeEditModal();
                });
            }

            accountEditCancelButtons.forEach(button => {
                button.addEventListener('click', (event) => {
                    event.preventDefault();
                    closeEditModal();
                });
            });

            accountEditInput.addEventListener('input', () => {
                setEditError('');
            });

            accountEditForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                const candidate = accountEditInput.value.trim();
                if (candidate.length === 0) {
                    setEditError('Display name cannot be empty.');
                    accountEditInput.focus();
                    return;
                }

                const formData = new FormData(accountEditForm);
                formData.set('DisplayName', candidate);

                setEditError('');
                setEditLoading(true);

                try {
                    const response = await fetch(accountEditForm.action, {
                        method: accountEditForm.method || 'POST',
                        body: formData,
                        credentials: 'same-origin',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (response.ok) {
                        let payload = null;
                        try {
                            payload = await response.json();
                        } catch {
                            payload = null;
                        }

                        const displayName = typeof payload?.displayName === 'string' ? payload.displayName : candidate;
                        const menuName = typeof payload?.menuName === 'string' ? payload.menuName : (displayName || 'Account');
                        const avatarLetter = typeof payload?.avatarLetter === 'string' && payload.avatarLetter.length > 0
                            ? payload.avatarLetter
                            : (displayName ? displayName[0].toUpperCase() : '?');
                        const accountLabel = typeof payload?.accountLabel === 'string'
                            ? payload.accountLabel
                            : (displayName ? `${displayName}'s account` : 'Guest account');

                        setAccountDisplayName(displayName, menuName);

                        if (notificationToggle) {
                            notificationToggle.dataset.accountLabel = accountLabel;
                            const avatarSpan = notificationToggle.querySelector('span');
                            if (avatarSpan) {
                                avatarSpan.textContent = avatarLetter;
                            }

                            updateAvatarLabel(getVisibleNotificationCount());
                        }

                        closeEditModal();
                    } else {
                        let message = "We couldn't update your display name. Please try again.";
                        const contentType = response.headers.get('content-type') ?? '';
                        if (contentType.includes('application/json')) {
                            let data = null;
                            try {
                                data = await response.json();
                            } catch {
                                data = null;
                            }

                            if (data) {
                                if (typeof data.error === 'string') {
                                    message = data.error;
                                } else if (typeof data.detail === 'string') {
                                    message = data.detail;
                                } else if (typeof data.title === 'string') {
                                    message = data.title;
                                } else if (data.errors && typeof data.errors === 'object') {
                                    const flattened = [];
                                    Object.values(data.errors).forEach(entry => {
                                        if (Array.isArray(entry)) {
                                            entry.forEach(item => flattened.push(item));
                                        } else if (typeof entry === 'string') {
                                            flattened.push(entry);
                                        }
                                    });

                                    const firstError = flattened.find(value => typeof value === 'string');
                                    if (firstError) {
                                        message = firstError;
                                    }
                                }
                            }
                        }

                        setEditError(message);
                    }
                } catch {
                    setEditError("We couldn't update your display name. Please try again.");
                } finally {
                    setEditLoading(false);
                }
            });
        }

        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!(target instanceof Node)) {
                return;
            }

            if (panel && toggle && !panel.contains(target) && !toggle.contains(target)) {
                closeMenu();
            }

            if (notificationPanel && notificationToggle && !notificationPanel.contains(target) && !notificationToggle.contains(target)) {
                closeNotifications();
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                const editOpen = isEditModalOpen();
                const menuOpen = panel?.classList.contains('open');
                const notificationsOpen = notificationPanel?.classList.contains('open');

                if (editOpen || menuOpen || notificationsOpen) {
                    event.preventDefault();
                }

                if (editOpen) {
                    closeEditModal();
                }

                closeMenu();
                closeNotifications();
            }
        });
    })();
</script>
