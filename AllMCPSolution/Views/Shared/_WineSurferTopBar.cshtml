@using System.Linq
@using Microsoft.AspNetCore.Mvc.Rendering
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@model WineSurferTopBarModel?

@{ 
    var navItems = new (string Href, string Label)[]
    {
        ("/wine-surfer", "Home"),
        ("/wine-surfer/sisterhoods", "Sisterhoods"),
        ("/wine-manager", "Wine Inventory")
    };

    var rawPath = Model?.CurrentPath;
    var currentPath = string.IsNullOrWhiteSpace(rawPath)
        ? string.Empty
        : rawPath!.TrimEnd('/');

    if (string.IsNullOrEmpty(currentPath) && !string.IsNullOrEmpty(rawPath))
    {
        currentPath = "/";
    }

    var visibleNavItems = navItems
        .Where(item => !string.Equals(item.Href, currentPath, System.StringComparison.OrdinalIgnoreCase))
        .ToList();

    var userDisplayName = User?.Identity?.IsAuthenticated == true
        ? User.Identity?.Name ?? string.Empty
        : string.Empty;

    if (User?.Identity?.IsAuthenticated == true && string.IsNullOrWhiteSpace(userDisplayName))
    {
        userDisplayName = User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value
            ?? User.FindFirst("email")?.Value
            ?? string.Empty;
    }

    var incomingInvitations = Model?.IncomingInvitations ?? Array.Empty<WineSurferIncomingSisterhoodInvitation>();
    var openInvitations = incomingInvitations
        .Where(invitation => invitation.Status == SisterhoodInvitationStatus.Pending)
        .OrderBy(invitation => invitation.SisterhoodName, StringComparer.OrdinalIgnoreCase)
        .ThenBy(invitation => invitation.CreatedAtUtc)
        .ToList();

    var openInvitationCount = openInvitations.Count;
    var sisterhoodUrl = Url.Action("Sisterhoods", "WineSurfer") ?? "/wine-surfer/sisterhoods";
    var notificationHeadingId = "notificationPanelHeading";

    var avatarLetter = "?";

    if (!string.IsNullOrWhiteSpace(userDisplayName))
    {
        var trimmedUserName = userDisplayName.Trim();
        if (!string.IsNullOrEmpty(trimmedUserName))
        {
            avatarLetter = trimmedUserName.Substring(0, 1).ToUpperInvariant();
        }
    }

    var avatarAccountLabel = string.IsNullOrWhiteSpace(userDisplayName)
        ? "Guest account"
        : $"{userDisplayName}'s account";

    var invitationStatusLabel = openInvitationCount switch
    {
        0 => "No open invitations",
        1 => "1 open invitation",
        _ => $"{openInvitationCount} open invitations"
    };

    var avatarButtonLabel = $"{avatarAccountLabel}. {invitationStatusLabel}.";

    var returnUrl = string.IsNullOrWhiteSpace(rawPath) ? "/wine-surfer" : rawPath!;
    if (!string.IsNullOrEmpty(returnUrl) && !returnUrl.StartsWith('/'))
    {
        returnUrl = "/wine-surfer";
    }

    var loginUrl = Url.Action("Login", "Account", new { returnUrl });
    var registerUrl = Url.Action("Register", "Account", new { returnUrl });
    var changePasswordUrl = Url.Action("ChangePassword", "Account");
}

<header class="top-bar">
    <a class="brand" href="/wine-surfer">Wine Surfer</a>
    <div class="top-bar-actions">
        <div class="notification-shell">
            <button
                id="notificationToggle"
                class="top-bar-avatar"
                type="button"
                aria-haspopup="true"
                aria-expanded="false"
                aria-controls="notificationPanel"
                aria-label="@avatarButtonLabel">
                <span aria-hidden="true">@avatarLetter</span>
            </button>
            @if (openInvitationCount > 0)
            {
                <span class="notification-badge" aria-hidden="true">@openInvitationCount</span>
            }
            <div id="notificationPanel" class="notification-panel" role="region" aria-hidden="true" aria-labelledby="@notificationHeadingId">
                <p id="@notificationHeadingId" class="notification-heading">Sisterhood invitations</p>
                @if (openInvitationCount > 0)
                {
                    <ul class="notification-list">
                        @foreach (var invitation in openInvitations)
                        {
                            @{ var tagLabel = invitation.MatchesUserId
                                    ? "Linked to your account"
                                    : invitation.MatchesEmail
                                        ? "Matches your email"
                                        : null; }
                            <li class="notification-item">
                                <a class="notification-link" href="@sisterhoodUrl">
                                    <span class="notification-title">@invitation.SisterhoodName</span>
                                    <span class="notification-meta">Invited as <strong>@invitation.InviteeEmail</strong></span>
                                    @if (!string.IsNullOrWhiteSpace(tagLabel))
                                    {
                                        <span class="notification-tag">@tagLabel</span>
                                    }
                                </a>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="notification-empty">You're all caught up. No open invitations.</p>
                }
                <div class="notification-footer">
                    <a href="@sisterhoodUrl">View Sisterhoods</a>
                </div>
            </div>
        </div>
        <button id="menuToggle" class="burger" type="button" aria-expanded="false" aria-controls="menuPanel">
            <span></span>
        </button>
    </div>
    <nav id="menuPanel" class="menu-panel" aria-hidden="true">
        @if (visibleNavItems.Count > 0)
        {
            <div class="menu-links">
                @foreach (var item in visibleNavItems)
                {
                    <a href="@item.Href">@item.Label</a>
                }
            </div>
            <div class="menu-divider" aria-hidden="true"></div>
        }
        <div class="menu-user">
            @if (User?.Identity?.IsAuthenticated == true)
            {
                <span class="menu-user-label">Signed in as</span>
                <span class="menu-user-name">@(string.IsNullOrWhiteSpace(userDisplayName) ? "Account" : userDisplayName)</span>
                <div class="menu-auth-options">
                    @if (!string.IsNullOrEmpty(changePasswordUrl))
                    {
                        <a class="auth-toggle" href="@changePasswordUrl">Change password</a>
                    }
                    @using (Html.BeginForm("Logout", "Account", FormMethod.Post, new { @class = "auth-form" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                        <button class="auth-toggle" type="submit" data-auth-state="logout">Sign out</button>
                    }
                </div>
            }
            else
            {
                <span class="menu-user-label">Account</span>
                <div class="menu-auth-options">
                    @if (!string.IsNullOrEmpty(loginUrl))
                    {
                        <a class="auth-toggle" href="@loginUrl">Sign in with email</a>
                    }
                    @if (!string.IsNullOrEmpty(registerUrl))
                    {
                        <a class="auth-toggle" href="@registerUrl">Create an account</a>
                    }
                </div>
            }
        </div>
    </nav>
</header>
<script>
    (() => {
        const toggle = document.getElementById('menuToggle');
        const panel = document.getElementById('menuPanel');
        const notificationToggle = document.getElementById('notificationToggle');
        const notificationPanel = document.getElementById('notificationPanel');

        const closeMenu = () => {
            if (!toggle || !panel) {
                return;
            }

            toggle.classList.remove('active');
            toggle.setAttribute('aria-expanded', 'false');
            panel.classList.remove('open');
            panel.setAttribute('aria-hidden', 'true');
        };

        const closeNotifications = () => {
            if (!notificationToggle || !notificationPanel) {
                return;
            }

            notificationToggle.classList.remove('active');
            notificationToggle.setAttribute('aria-expanded', 'false');
            notificationPanel.classList.remove('open');
            notificationPanel.setAttribute('aria-hidden', 'true');
        };

        if (toggle && panel) {
            toggle.addEventListener('click', () => {
                const isOpen = toggle.classList.toggle('active');
                toggle.setAttribute('aria-expanded', String(isOpen));
                panel.classList.toggle('open', isOpen);
                panel.setAttribute('aria-hidden', String(!isOpen));

                if (isOpen) {
                    closeNotifications();
                }
            });

            panel.querySelectorAll('a, button').forEach(element => {
                element.addEventListener('click', () => {
                    closeMenu();
                });
            });
        }

        if (notificationToggle && notificationPanel) {
            notificationToggle.addEventListener('click', () => {
                const isOpen = notificationToggle.classList.toggle('active');
                notificationToggle.setAttribute('aria-expanded', String(isOpen));
                notificationPanel.classList.toggle('open', isOpen);
                notificationPanel.setAttribute('aria-hidden', String(!isOpen));

                if (isOpen) {
                    closeMenu();
                }
            });

            notificationPanel.querySelectorAll('a, button').forEach(element => {
                element.addEventListener('click', () => {
                    closeNotifications();
                });
            });
        }

        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!(target instanceof Node)) {
                return;
            }

            if (panel && toggle && !panel.contains(target) && !toggle.contains(target)) {
                closeMenu();
            }

            if (notificationPanel && notificationToggle && !notificationPanel.contains(target) && !notificationToggle.contains(target)) {
                closeNotifications();
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                const menuOpen = panel?.classList.contains('open');
                const notificationsOpen = notificationPanel?.classList.contains('open');

                if (menuOpen || notificationsOpen) {
                    event.preventDefault();
                }

                closeMenu();
                closeNotifications();
            }
        });
    })();
</script>
