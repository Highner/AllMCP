@using System.Collections.Generic
@using System.Linq
@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.Rendering
@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@model WineSurferTopBarModel?

@{ 
    var navItems = new (string Href, string Label)[]
    {
        ("/wine-surfer", "Home"),
        ("/wine-surfer/sisterhoods", "Sisterhoods"),
        ("/wine-manager", "Wine Inventory")
    };

    var rawPath = Model?.CurrentPath;
    var currentPath = string.IsNullOrWhiteSpace(rawPath)
        ? string.Empty
        : rawPath!.TrimEnd('/');

    if (string.IsNullOrEmpty(currentPath) && !string.IsNullOrEmpty(rawPath))
    {
        currentPath = "/";
    }

    var visibleNavItems = navItems
        .Where(item => !string.Equals(item.Href, currentPath, System.StringComparison.OrdinalIgnoreCase))
        .ToList();

    var userDisplayName = User?.Identity?.IsAuthenticated == true
        ? User.Identity?.Name ?? string.Empty
        : string.Empty;

    if (User?.Identity?.IsAuthenticated == true && string.IsNullOrWhiteSpace(userDisplayName))
    {
        userDisplayName = User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value
            ?? User.FindFirst("email")?.Value
            ?? string.Empty;
    }

    var incomingInvitations = Model?.IncomingInvitations ?? Array.Empty<WineSurferIncomingSisterhoodInvitation>();
    var openInvitations = incomingInvitations
        .Where(invitation => invitation.Status == SisterhoodInvitationStatus.Pending)
        .OrderBy(invitation => invitation.SisterhoodName, StringComparer.OrdinalIgnoreCase)
        .ThenBy(invitation => invitation.CreatedAtUtc)
        .ToList();

    var sentInvitationNotifications = Model?.SentInvitationNotifications ?? Array.Empty<WineSurferSentInvitationNotification>();
    var acceptedInvitations = sentInvitationNotifications
        .Where(notification => notification is not null)
        .ToList();

    var openInvitationCount = openInvitations.Count;
    var acceptedInvitationCount = acceptedInvitations.Count;
    var totalNotificationCount = openInvitationCount + acceptedInvitationCount;
    var sisterhoodUrl = Url.Action("Sisterhoods", "WineSurfer") ?? "/wine-surfer/sisterhoods";
    var notificationHeadingId = "notificationPanelHeading";

    var avatarLetter = "?";

    if (!string.IsNullOrWhiteSpace(userDisplayName))
    {
        var trimmedUserName = userDisplayName.Trim();
        if (!string.IsNullOrEmpty(trimmedUserName))
        {
            avatarLetter = trimmedUserName.Substring(0, 1).ToUpperInvariant();
        }
    }

    var avatarAccountLabel = string.IsNullOrWhiteSpace(userDisplayName)
        ? "Guest account"
        : $"{userDisplayName}'s account";

    var statusParts = new List<string>
    {
        openInvitationCount switch
        {
            0 => "No open invitations",
            1 => "1 open invitation",
            _ => $"{openInvitationCount} open invitations"
        }
    };

    if (acceptedInvitationCount > 0)
    {
        statusParts.Add(acceptedInvitationCount == 1
            ? "1 sent invitation was accepted"
            : $"{acceptedInvitationCount} sent invitations were accepted");
    }

    var avatarButtonLabel = $"{avatarAccountLabel}. {string.Join(". ", statusParts)}.";

    var userIdClaim = User?.FindFirstValue(ClaimTypes.NameIdentifier);
    var notificationStorageUserKey = string.IsNullOrWhiteSpace(userIdClaim) ? "guest" : userIdClaim!;

    var returnUrl = string.IsNullOrWhiteSpace(rawPath) ? "/wine-surfer" : rawPath!;
    if (!string.IsNullOrEmpty(returnUrl) && !returnUrl.StartsWith('/'))
    {
        returnUrl = "/wine-surfer";
    }

    var loginUrl = Url.Action("Login", "Account", new { returnUrl });
    var registerUrl = Url.Action("Register", "Account", new { returnUrl });
    var changePasswordUrl = Url.Action("ChangePassword", "Account");
}

<header class="top-bar">
    <a class="brand" href="/wine-surfer">Wine Surfer</a>
    <div class="top-bar-actions">
        <div class="notification-shell">
            <button
                id="notificationToggle"
                class="top-bar-avatar"
                type="button"
                aria-haspopup="true"
                aria-expanded="false"
                aria-controls="notificationPanel"
                aria-label="@avatarButtonLabel"
                data-account-label="@avatarAccountLabel"
                data-user-id="@notificationStorageUserKey">
                <span aria-hidden="true">@avatarLetter</span>
            </button>
            @if (totalNotificationCount > 0)
            {
                <span class="notification-badge" aria-hidden="true">@totalNotificationCount</span>
            }
            <div id="notificationPanel" class="notification-panel" role="region" aria-hidden="true" aria-labelledby="@notificationHeadingId">
                <p id="@notificationHeadingId" class="notification-heading">Sisterhood notifications</p>
                @{
                    var hasOpenInvitations = openInvitationCount > 0;
                    var hasAcceptedInvitations = acceptedInvitationCount > 0;
                    var hasAnyNotifications = hasOpenInvitations || hasAcceptedInvitations;
                }
                @if (hasAnyNotifications)
                {
                    if (hasAcceptedInvitations)
                    {
                        <div class="notification-section" aria-label="Accepted invitations you sent">
                            <p class="notification-subheading">Accepted invitations</p>
                            <ul class="notification-list">
                                @foreach (var notification in acceptedInvitations)
                                {
                                    var inviteeName = string.IsNullOrWhiteSpace(notification.InviteeName)
                                        ? notification.InviteeEmail
                                        : notification.InviteeName!;
                                    var inviteeEmailSuffix = string.IsNullOrWhiteSpace(notification.InviteeName)
                                        ? string.Empty
                                        : $" ({notification.InviteeEmail})";
                                    var acceptedLocal = notification.UpdatedAtUtc.ToLocalTime();
                                    var acceptedLabel = acceptedLocal.ToString("g");
                                    var notificationStamp = $"{notification.InvitationId:D}|{notification.UpdatedAtUtc:O}";
                                    <li class="notification-item">
                                        <a class="notification-link" href="@sisterhoodUrl">
                                            <span class="notification-title">@inviteeName</span>
                                            <span class="notification-meta">
                                                Accepted your invitation to <strong>@notification.SisterhoodName</strong>@inviteeEmailSuffix Â· @acceptedLabel
                                            </span>
                                        </a>
                                        <button
                                            type="button"
                                            class="notification-dismiss"
                                            data-notification-stamp="@notificationStamp"
                                            data-notification-category="accepted"
                                            aria-label="Dismiss notification for @inviteeName">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    if (hasOpenInvitations)
                    {
                        <div class="notification-section" aria-label="Pending invitations for you">
                            <p class="notification-subheading">Pending invitations</p>
                            <ul class="notification-list">
                                @foreach (var invitation in openInvitations)
                                {
                                    var tagLabel = invitation.MatchesUserId
                                        ? "Linked to your account"
                                        : invitation.MatchesEmail
                                            ? "Matches your email"
                                            : null;
                                    var notificationStamp = $"{invitation.Id:D}|{invitation.UpdatedAtUtc:O}";

                                    <li class="notification-item">
                                        <a class="notification-link" href="@sisterhoodUrl">
                                            <span class="notification-title">@invitation.SisterhoodName</span>
                                            <span class="notification-meta">Invited as <strong>@invitation.InviteeEmail</strong></span>
                                            @if (!string.IsNullOrWhiteSpace(tagLabel))
                                            {
                                                <span class="notification-tag">@tagLabel</span>
                                            }
                                        </a>
                                        <button
                                            type="button"
                                            class="notification-dismiss"
                                            data-notification-stamp="@notificationStamp"
                                            data-notification-category="pending"
                                            aria-label="Dismiss invitation for @invitation.SisterhoodName">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                }
                <p class="notification-empty"@(hasAnyNotifications ? " hidden" : string.Empty)>You're all caught up. No sisterhood notifications.</p>
                <div class="notification-footer">
                    <a href="@sisterhoodUrl">View Sisterhoods</a>
                </div>
            </div>
        </div>
        <button id="menuToggle" class="burger" type="button" aria-expanded="false" aria-controls="menuPanel">
            <span></span>
        </button>
    </div>
    <nav id="menuPanel" class="menu-panel" aria-hidden="true">
        @if (visibleNavItems.Count > 0)
        {
            <div class="menu-links">
                @foreach (var item in visibleNavItems)
                {
                    <a href="@item.Href">@item.Label</a>
                }
            </div>
            <div class="menu-divider" aria-hidden="true"></div>
        }
        <div class="menu-user">
            @if (User?.Identity?.IsAuthenticated == true)
            {
                <span class="menu-user-label">Signed in as</span>
                <span class="menu-user-name">@(string.IsNullOrWhiteSpace(userDisplayName) ? "Account" : userDisplayName)</span>
                <div class="menu-auth-options">
                    @if (!string.IsNullOrEmpty(changePasswordUrl))
                    {
                        <a class="auth-toggle" href="@changePasswordUrl">Change password</a>
                    }
                    @using (Html.BeginForm("Logout", "Account", FormMethod.Post, new { @class = "auth-form" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="returnUrl" value="@returnUrl" />
                        <button class="auth-toggle" type="submit" data-auth-state="logout">Sign out</button>
                    }
                </div>
            }
            else
            {
                <span class="menu-user-label">Account</span>
                <div class="menu-auth-options">
                    @if (!string.IsNullOrEmpty(loginUrl))
                    {
                        <a class="auth-toggle" href="@loginUrl">Sign in with email</a>
                    }
                    @if (!string.IsNullOrEmpty(registerUrl))
                    {
                        <a class="auth-toggle" href="@registerUrl">Create an account</a>
                    }
                </div>
            }
        </div>
    </nav>
</header>
<script>
    (() => {
        const toggle = document.getElementById('menuToggle');
        const panel = document.getElementById('menuPanel');
        const notificationToggle = document.getElementById('notificationToggle');
        const notificationPanel = document.getElementById('notificationPanel');
        const notificationBadge = document.querySelector('.notification-badge');

        const closeMenu = () => {
            if (!toggle || !panel) {
                return;
            }

            toggle.classList.remove('active');
            toggle.setAttribute('aria-expanded', 'false');
            panel.classList.remove('open');
            panel.setAttribute('aria-hidden', 'true');
        };

        const closeNotifications = () => {
            if (!notificationToggle || !notificationPanel) {
                return;
            }

            notificationToggle.classList.remove('active');
            notificationToggle.setAttribute('aria-expanded', 'false');
            notificationPanel.classList.remove('open');
            notificationPanel.setAttribute('aria-hidden', 'true');
        };

        const storageKeyBase = notificationToggle?.dataset.userId ?? 'guest';
        const dismissedStorageKey = `wineSurfer.notifications.dismissed.${storageKeyBase}`;

        const loadDismissedStamps = () => {
            if (typeof window === 'undefined' || !window.localStorage) {
                return [];
            }

            try {
                const raw = window.localStorage.getItem(dismissedStorageKey);
                if (!raw) {
                    return [];
                }

                const parsed = JSON.parse(raw);
                if (!Array.isArray(parsed)) {
                    return [];
                }

                return parsed.filter(item => typeof item === 'string');
            } catch {
                return [];
            }
        };

        const dismissedStamps = new Set(loadDismissedStamps());

        const persistDismissedStamps = () => {
            if (typeof window === 'undefined' || !window.localStorage) {
                return;
            }

            try {
                window.localStorage.setItem(dismissedStorageKey, JSON.stringify(Array.from(dismissedStamps)));
            } catch {
                // Ignore write errors (e.g., storage full or disabled)
            }
        };

        const formatStatusParts = (openCount, acceptedCount) => {
            const parts = [];

            if (openCount === 0) {
                parts.push('No open invitations');
            } else if (openCount === 1) {
                parts.push('1 open invitation');
            } else {
                parts.push(`${openCount} open invitations`);
            }

            if (acceptedCount === 1) {
                parts.push('1 sent invitation was accepted');
            } else if (acceptedCount > 1) {
                parts.push(`${acceptedCount} sent invitations were accepted`);
            }

            return parts.join('. ');
        };

        const updateAvatarLabel = (openCount, acceptedCount) => {
            if (!notificationToggle) {
                return;
            }

            const accountLabel = notificationToggle.dataset.accountLabel ?? '';
            const status = formatStatusParts(openCount, acceptedCount);
            const finalLabel = status ? `${accountLabel}. ${status}.` : `${accountLabel}.`;
            notificationToggle.setAttribute('aria-label', finalLabel);
        };

        const applyDismissedNotifications = () => {
            if (!notificationPanel) {
                return;
            }

            const items = Array.from(notificationPanel.querySelectorAll('.notification-item'));
            let openCount = 0;
            let acceptedCount = 0;

            items.forEach(item => {
                const stamp = item.querySelector('.notification-dismiss')?.dataset.notificationStamp;
                const category = item.querySelector('.notification-dismiss')?.dataset.notificationCategory;

                if (!stamp) {
                    item.hidden = false;
                    return;
                }

                const isDismissed = dismissedStamps.has(stamp);
                item.hidden = isDismissed;
                item.setAttribute('aria-hidden', String(isDismissed));

                if (!isDismissed) {
                    if (category === 'pending') {
                        openCount += 1;
                    } else if (category === 'accepted') {
                        acceptedCount += 1;
                    }
                }
            });

            const sections = Array.from(notificationPanel.querySelectorAll('.notification-section'));
            sections.forEach(section => {
                const hasVisibleItem = section.querySelector('.notification-item:not([hidden])') !== null;
                section.toggleAttribute('hidden', !hasVisibleItem);
                section.setAttribute('aria-hidden', String(!hasVisibleItem));
            });

            const notificationEmpty = notificationPanel.querySelector('.notification-empty');
            const hasVisibleNotifications = openCount + acceptedCount > 0;
            if (notificationEmpty) {
                notificationEmpty.toggleAttribute('hidden', hasVisibleNotifications);
            }

            if (notificationBadge) {
                if (hasVisibleNotifications) {
                    notificationBadge.textContent = String(openCount + acceptedCount);
                    notificationBadge.removeAttribute('hidden');
                    notificationBadge.setAttribute('aria-hidden', 'false');
                    notificationBadge.style.removeProperty('display');
                } else {
                    notificationBadge.textContent = '';
                    notificationBadge.setAttribute('hidden', '');
                    notificationBadge.setAttribute('aria-hidden', 'true');
                    notificationBadge.style.display = 'none';
                }
            }

            updateAvatarLabel(openCount, acceptedCount);
        };

        const dismissNotification = (button) => {
            const stamp = button.dataset.notificationStamp;
            if (!stamp) {
                return;
            }

            dismissedStamps.add(stamp);
            persistDismissedStamps();
            applyDismissedNotifications();
        };

        if (toggle && panel) {
            toggle.addEventListener('click', () => {
                const isOpen = toggle.classList.toggle('active');
                toggle.setAttribute('aria-expanded', String(isOpen));
                panel.classList.toggle('open', isOpen);
                panel.setAttribute('aria-hidden', String(!isOpen));

                if (isOpen) {
                    closeNotifications();
                }
            });

            panel.querySelectorAll('a, button').forEach(element => {
                element.addEventListener('click', () => {
                    closeMenu();
                });
            });
        }

        if (notificationToggle && notificationPanel) {
            notificationToggle.addEventListener('click', () => {
                const isOpen = notificationToggle.classList.toggle('active');
                notificationToggle.setAttribute('aria-expanded', String(isOpen));
                notificationPanel.classList.toggle('open', isOpen);
                notificationPanel.setAttribute('aria-hidden', String(!isOpen));

                if (isOpen) {
                    closeMenu();
                }
            });

            notificationPanel.querySelectorAll('a, button:not(.notification-dismiss)').forEach(element => {
                element.addEventListener('click', () => {
                    closeNotifications();
                });
            });

            notificationPanel.querySelectorAll('.notification-dismiss').forEach(button => {
                button.addEventListener('click', (event) => {
                    event.stopPropagation();
                    dismissNotification(button);
                });
            });

            applyDismissedNotifications();
        }

        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!(target instanceof Node)) {
                return;
            }

            if (panel && toggle && !panel.contains(target) && !toggle.contains(target)) {
                closeMenu();
            }

            if (notificationPanel && notificationToggle && !notificationPanel.contains(target) && !notificationToggle.contains(target)) {
                closeNotifications();
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                const menuOpen = panel?.classList.contains('open');
                const notificationsOpen = notificationPanel?.classList.contains('open');

                if (menuOpen || notificationsOpen) {
                    event.preventDefault();
                }

                closeMenu();
                closeNotifications();
            }
        });
    })();
</script>
