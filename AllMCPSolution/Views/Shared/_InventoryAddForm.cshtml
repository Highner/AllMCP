@model AllMCPSolution.Models.InventoryAddFormPartialModel
@using System
@using System.Collections.Generic
@using AllMCPSolution.Models
@{
    var locationOptions = Model?.Locations ?? Array.Empty<BottleLocationOption>();
    var formClass = string.IsNullOrWhiteSpace(Model?.FormClass) ? "inventory-add-form" : Model!.FormClass;
    var introClass = string.IsNullOrWhiteSpace(Model?.IntroClass) ? "inventory-add-intro" : Model!.IntroClass;
    var useNoValidate = Model?.UseNoValidate ?? false;
    var introText = string.IsNullOrWhiteSpace(Model?.IntroText)
        ? "Choose an existing wine and vintage to add a bottle to your cellar."
        : Model!.IntroText;
    var wineFieldClass = string.IsNullOrWhiteSpace(Model?.WineFieldClass) ? "inventory-add-field" : Model!.WineFieldClass;
    var wineLabelClass = string.IsNullOrWhiteSpace(Model?.WineLabelClass) ? "inventory-add-label" : Model!.WineLabelClass;
    var wineLabelText = string.IsNullOrWhiteSpace(Model?.WineLabelText) ? "Wine" : Model!.WineLabelText;
    var comboboxClass = string.IsNullOrWhiteSpace(Model?.ComboboxClass) ? "inventory-add-combobox" : Model!.ComboboxClass;
    var searchInputClass = string.IsNullOrWhiteSpace(Model?.SearchInputClass)
        ? "inventory-add-wine-search"
        : Model!.SearchInputClass;
    var comboboxAttributeString = string.Empty;
    if (Model?.ComboboxAttributes is { Count: > 0 })
    {
        var builder = new System.Text.StringBuilder();
        foreach (var attribute in Model.ComboboxAttributes)
        {
            if (string.IsNullOrWhiteSpace(attribute.Key))
            {
                continue;
            }

            builder.Append(' ');
            builder.Append(System.Text.Encodings.Web.HtmlEncoder.Default.Encode(attribute.Key));
            if (!string.IsNullOrEmpty(attribute.Value))
            {
                builder.Append("=");
                builder.Append('"');
                builder.Append(System.Text.Encodings.Web.HtmlEncoder.Default.Encode(attribute.Value));
                builder.Append('"');
            }
        }

        comboboxAttributeString = builder.ToString();
    }
    var searchPlaceholder = string.IsNullOrWhiteSpace(Model?.SearchInputPlaceholder)
        ? "Search for a wine"
        : Model!.SearchInputPlaceholder;
    var searchAriaLabel = string.IsNullOrWhiteSpace(Model?.SearchInputAriaLabel)
        ? "Wine"
        : Model!.SearchInputAriaLabel;
    var searchHiddenClass = string.IsNullOrWhiteSpace(Model?.SearchHiddenInputClass)
        ? "inventory-add-wine-id"
        : Model!.SearchHiddenInputClass;
    var resultsClass = string.IsNullOrWhiteSpace(Model?.ResultsContainerClass)
        ? "inventory-add-wine-results"
        : Model!.ResultsContainerClass;
    var resultsId = string.IsNullOrWhiteSpace(Model?.ResultsContainerId)
        ? "inventory-add-wine-results"
        : Model!.ResultsContainerId;
    var resultsAriaLabel = string.IsNullOrWhiteSpace(Model?.ResultsAriaLabel)
        ? "Matching wines"
        : Model!.ResultsAriaLabel;
    var summaryClass = string.IsNullOrWhiteSpace(Model?.SummaryClass) ? "inventory-add-summary" : Model!.SummaryClass;
    var summaryText = string.IsNullOrWhiteSpace(Model?.SummaryText)
        ? "Search for a wine to see its appellation and color."
        : Model!.SummaryText;
    var summaryAriaLive = string.IsNullOrWhiteSpace(Model?.SummaryAriaLive) ? "polite" : Model!.SummaryAriaLive;
    var vintageFieldClass = string.IsNullOrWhiteSpace(Model?.VintageFieldClass)
        ? "inventory-add-field"
        : Model!.VintageFieldClass;
    var vintageLabelClass = string.IsNullOrWhiteSpace(Model?.VintageLabelClass)
        ? "inventory-add-label"
        : Model!.VintageLabelClass;
    var vintageLabelText = string.IsNullOrWhiteSpace(Model?.VintageLabelText) ? "Vintage" : Model!.VintageLabelText;
    var vintageInputClass = string.IsNullOrWhiteSpace(Model?.VintageInputClass)
        ? "inventory-add-vintage"
        : Model!.VintageInputClass;
    var vintageHintClass = string.IsNullOrWhiteSpace(Model?.VintageHintClass)
        ? "inventory-add-vintage-hint"
        : Model!.VintageHintClass;
    var vintageHintText = Model?.VintageHintText;
    var vintageHintAriaLive = string.IsNullOrWhiteSpace(Model?.VintageHintAriaLive)
        ? "polite"
        : Model!.VintageHintAriaLive;
    var locationFieldClass = string.IsNullOrWhiteSpace(Model?.LocationFieldClass)
        ? "inventory-add-field"
        : Model!.LocationFieldClass;
    var locationLabelClass = string.IsNullOrWhiteSpace(Model?.LocationLabelClass)
        ? "inventory-add-label"
        : Model!.LocationLabelClass;
    var locationLabelText = string.IsNullOrWhiteSpace(Model?.LocationLabelText)
        ? "Location"
        : Model!.LocationLabelText;
    var locationSelectClass = string.IsNullOrWhiteSpace(Model?.LocationSelectClass)
        ? "inventory-add-location"
        : Model!.LocationSelectClass;
    var quantityFieldClass = string.IsNullOrWhiteSpace(Model?.QuantityFieldClass)
        ? "inventory-add-field"
        : Model!.QuantityFieldClass;
    var quantityLabelClass = string.IsNullOrWhiteSpace(Model?.QuantityLabelClass)
        ? "inventory-add-label"
        : Model!.QuantityLabelClass;
    var quantityLabelText = string.IsNullOrWhiteSpace(Model?.QuantityLabelText)
        ? "Number of Bottles"
        : Model!.QuantityLabelText;
    var quantitySelectClass = string.IsNullOrWhiteSpace(Model?.QuantitySelectClass)
        ? "inventory-add-quantity"
        : Model!.QuantitySelectClass;
    var showLocation = Model?.ShowLocation ?? true;
    var showQuantity = Model?.ShowQuantity ?? true;
    var errorClass = string.IsNullOrWhiteSpace(Model?.ErrorClass) ? "inventory-add-error" : Model!.ErrorClass;
    var errorRole = string.IsNullOrWhiteSpace(Model?.ErrorRole) ? "alert" : Model!.ErrorRole;
    var errorAriaHidden = string.IsNullOrWhiteSpace(Model?.ErrorAriaHidden) ? "true" : Model!.ErrorAriaHidden;
    var actionsClass = string.IsNullOrWhiteSpace(Model?.ActionsClass) ? "inventory-add-actions" : Model!.ActionsClass;
    var cancelClass = string.IsNullOrWhiteSpace(Model?.CancelButtonClass)
        ? "crud-table__action-button secondary inventory-add-cancel"
        : Model!.CancelButtonClass;
    var cancelText = string.IsNullOrWhiteSpace(Model?.CancelButtonText) ? "Cancel" : Model!.CancelButtonText;
    var submitClass = string.IsNullOrWhiteSpace(Model?.SubmitButtonClass)
        ? "crud-table__action-button inventory-add-submit"
        : Model!.SubmitButtonClass;
    var submitText = string.IsNullOrWhiteSpace(Model?.SubmitButtonText) ? "Add Wine" : Model!.SubmitButtonText;
}
<form class="@formClass"@(useNoValidate ? " novalidate" : string.Empty)>
    <p class="@introClass">@introText</p>
    <label class="@wineFieldClass">
        <span class="@wineLabelClass">@wineLabelText</span>
        <div class="@comboboxClass"@Html.Raw(comboboxAttributeString)>
            <input type="search"
                   class="@searchInputClass"
                   placeholder="@searchPlaceholder"
                   aria-label="@searchAriaLabel"
                   role="combobox"
                   aria-autocomplete="list"
                   aria-expanded="false"
                   aria-controls="@resultsId"
                   autocomplete="off"
                   spellcheck="false" />
            <input type="hidden" class="@searchHiddenClass" />
            <div class="@resultsClass" id="@resultsId" role="listbox" aria-label="@resultsAriaLabel"></div>
        </div>
    </label>
    <p class="@summaryClass" aria-live="@summaryAriaLive">@summaryText</p>
    <label class="@vintageFieldClass">
        <span class="@vintageLabelClass">@vintageLabelText</span>
        <input type="number"
               class="@vintageInputClass"
               min="1900"
               max="2100"
               placeholder="Year"
               aria-label="@vintageLabelText" />
    </label>
    @if (!string.IsNullOrWhiteSpace(vintageHintText))
    {
        <p class="@vintageHintClass" aria-live="@vintageHintAriaLive">@vintageHintText</p>
    }
    <label class="@locationFieldClass"@(!showLocation ? " hidden" : string.Empty)>
        <span class="@locationLabelClass">@locationLabelText</span>
        <select class="@locationSelectClass" aria-label="@locationLabelText">
            <option value="">No location</option>
            @foreach (var option in locationOptions)
            {
                var optionLabel = string.IsNullOrWhiteSpace(option.Name)
                    ? option.Id.ToString()
                    : option.Name;
                if (option.Capacity.HasValue)
                {
                    optionLabel = $"{optionLabel} ({option.Capacity.Value} capacity)";
                }
                <option value="@option.Id">@optionLabel</option>
            }
        </select>
    </label>
    <label class="@quantityFieldClass"@(!showQuantity ? " hidden" : string.Empty)>
        <span class="@quantityLabelClass">@quantityLabelText</span>
        <select class="@quantitySelectClass" aria-label="@quantityLabelText">
            @for (var i = 1; i <= 12; i++)
            {
                if (i == 1)
                {
                    <option value="@i" selected>@i</option>
                }
                else
                {
                    <option value="@i">@i</option>
                }
            }
        </select>
    </label>
    @if (!string.IsNullOrWhiteSpace(Model?.AdditionalFieldsPartial))
    {
        @await Html.PartialAsync(Model.AdditionalFieldsPartial!, Model.AdditionalFieldsModel)
    }
    <p class="@errorClass" role="@errorRole" aria-hidden="@errorAriaHidden"></p>
    <div class="@actionsClass">
        <button type="button" class="@cancelClass">@cancelText</button>
        <button type="submit" class="@submitClass">@submitText</button>
    </div>
</form>
