@model AllMCPSolution.Controllers.WineSurferSipSessionBottle
@using System.Globalization

@functions {
    private static string FormatScore(decimal? value)
    {
        return value.HasValue
            ? value.Value.ToString("0.0", CultureInfo.InvariantCulture)
            : "â€”";
    }
}

@{
    var isInteractive = ViewData["IsAuthenticated"] as bool? ?? false;
    Guid? sisterhoodId = ViewData["SisterhoodId"] switch
    {
        Guid guid => guid,
        string guidValue when Guid.TryParse(guidValue, out var parsed) => parsed,
        _ => null
    };
    Guid? sipSessionId = ViewData["SipSessionId"] switch
    {
        Guid guid => guid,
        string guidValue when Guid.TryParse(guidValue, out var parsed) => parsed,
        _ => null
    };
    string? returnUrl = ViewData["ReturnUrl"] as string;
    var isOwnedByCurrentUser = Model.IsOwnedByCurrentUser;
    var isRevealed = Model.IsRevealed;
    var label = string.IsNullOrWhiteSpace(Model.Label) ? Model.WineName : Model.Label;
    var trimmedLabel = string.IsNullOrWhiteSpace(label) ? "Bottle" : label.Trim();
    var removeConfirmMessage = $"Remove {trimmedLabel} from this sip session?";
    var removeConfirmAttribute = removeConfirmMessage
        .Replace("\\", "\\\\")
        .Replace("'", "\\'");
    var normalizedNote = string.IsNullOrWhiteSpace(Model.CurrentUserNote) ? string.Empty : Model.CurrentUserNote!.Trim();
    var noteDisplay = string.IsNullOrEmpty(normalizedNote)
        ? (isInteractive ? string.Empty : "Sign in to add your tasting note.")
        : normalizedNote;
    var noteCssClass = string.IsNullOrEmpty(normalizedNote) ? "bottle-note bottle-note--empty" : "bottle-note";

    string? hiddenNotice = null;
    if (!isRevealed)
    {
        hiddenNotice = isOwnedByCurrentUser
            ? "Only you can see this bottle until you reveal it."
            : "This bottle will be revealed soon.";

        if (!isOwnedByCurrentUser)
        {
            isInteractive = false;
            noteDisplay = "Bottle details will be revealed soon.";
            noteCssClass = "bottle-note bottle-note--hidden";
        }
    }

    var ariaLabel = (!isRevealed && !isOwnedByCurrentUser)
        ? "Hidden bottle awaiting reveal"
        : (isInteractive ? $"Open tasting note modal for {trimmedLabel}" : $"Bottle details for {trimmedLabel}");
    var bottleScoreAttribute = Model.CurrentUserScore.HasValue
        ? Model.CurrentUserScore.Value.ToString("0.0", CultureInfo.InvariantCulture)
        : string.Empty;
    var noteIdAttribute = Model.CurrentUserNoteId.HasValue ? Model.CurrentUserNoteId.Value.ToString() : string.Empty;
    var canManageBottle = isOwnedByCurrentUser && sisterhoodId.HasValue && sipSessionId.HasValue;
    var canRevealBottle = canManageBottle && !isRevealed;
}
<article class="bottle-card wine-card wine-surface wine-surface-border wine-card-hover wine-surfer-card"
         data-sip-session-bottle-card
         data-bottle-id="@Model.Id"
         data-bottle-label="@trimmedLabel"
         data-bottle-note="@normalizedNote"
         data-bottle-score="@bottleScoreAttribute"
         data-bottle-note-id="@noteIdAttribute"
         data-bottle-average="@FormatScore(Model.AverageScore)"
         data-bottle-sisterhood-average="@FormatScore(Model.SisterhoodAverageScore)"
         data-bottle-owned-by-current-user="@(isOwnedByCurrentUser ? "true" : "false")"
         data-bottle-interactive="@(isInteractive ? "true" : "false")"
         data-bottle-revealed="@(Model.IsRevealed ? "true" : "false")"
         aria-label="@ariaLabel"
         @(isInteractive ? "role=\"button\"" : null)
         @(isInteractive ? "tabindex=\"0\"" : null)>
    <header class="bottle-card-header wine-card__header">
        <h3 class="bottle-name wine-card__title">@Model.WineName</h3>
        @if (Model.Vintage.HasValue && Model.Vintage.Value > 0)
        {
            <span class="bottle-vintage wine-card__subtitle">@Model.Vintage.Value</span>
        }
    </header>
    @if (!string.IsNullOrEmpty(hiddenNotice))
    {
        <p class="bottle-hidden-notice">@hiddenNotice</p>
    }
    <dl class="bottle-meta wine-card__stats" aria-label="Bottle tasting stats">
        <div class="bottle-meta-item wine-card__stat">
            <dt>Average session score</dt>
            <dd data-bottle-average-display>@FormatScore(Model.AverageScore)</dd>
        </div>
        <div class="bottle-meta-item wine-card__stat">
            <dt>Sisterhood avg</dt>
            <dd data-bottle-sisterhood-average-display>@FormatScore(Model.SisterhoodAverageScore)</dd>
        </div>
        <div class="bottle-meta-item wine-card__stat">
            <dt>Your score</dt>
            <dd data-bottle-score-display>@FormatScore(Model.CurrentUserScore)</dd>
        </div>
    </dl>
    @if (!string.IsNullOrEmpty(noteDisplay))
    {
        <p class="@noteCssClass" data-bottle-note-display>@noteDisplay</p>
    }
    @if (canManageBottle)
    {
        <footer class="wine-card__actions bottle-card-actions">
            @if (canRevealBottle)
            {
                <form method="post"
                      action="@Url.Action("RevealSipSessionBottle", "WineSurfer")"
                      class="bottle-card-reveal-form"
                      data-sip-session-reveal-form>
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="SisterhoodId" value="@sisterhoodId.Value" />
                    <input type="hidden" name="SipSessionId" value="@sipSessionId.Value" />
                    <input type="hidden" name="BottleId" value="@Model.Id" />
                    <button type="submit"
                            class="sisterhood-button bottle-reveal-button"
                            data-sip-session-reveal-button>
                        Reveal bottle
                    </button>
                </form>
            }
            <form method="post"
                  action="@Url.Action("RemoveSipSessionBottle", "WineSurfer")"
                  data-sip-session-remove-form
                  onsubmit="return confirm('@removeConfirmAttribute');">
                @Html.AntiForgeryToken()
                <input type="hidden" name="SisterhoodId" value="@sisterhoodId.Value" />
                <input type="hidden" name="SipSessionId" value="@sipSessionId.Value" />
                <input type="hidden" name="BottleId" value="@Model.Id" />
                @if (!string.IsNullOrWhiteSpace(returnUrl))
                {
                    <input type="hidden" name="ReturnUrl" value="@returnUrl" />
                }
                <button type="submit"
                        class="sisterhood-button sisterhood-button--danger"
                        data-sip-session-remove-button>
                    Remove bottle
                </button>
            </form>
        </footer>
    }
</article>
