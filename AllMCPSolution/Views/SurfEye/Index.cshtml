@using AllMCPSolution.Controllers
@using AllMCPSolution.Models
@model AllMCPSolution.Controllers.WineSurferSurfEyeViewModel
@{
    Layout = null;
    var requestPath = Context.Request.Path.HasValue ? Context.Request.Path.Value : string.Empty;
    var requestQuery = Context.Request.QueryString.HasValue ? Context.Request.QueryString.Value : string.Empty;
    var currentLocation = string.Concat(requestPath, requestQuery);
    var topBarModel = ViewData["WineSurferTopBarModel"] as WineSurferTopBarModel
        ?? WineSurferTopBarModel.Empty(currentLocation);
    var analyzeUrl = Url.Action("AnalyzeSurfEye", "SurfEye");
    var hasTasteProfile = Model.HasTasteProfile;
    var displayName = string.IsNullOrWhiteSpace(Model.DisplayName) ? "Surfer" : Model.DisplayName;
    var maxUploadBytes = ViewData["SurfEyeMaxUploadBytes"] is long bytes ? bytes : 8L * 1024L * 1024L;
    ViewData["WineSurferPageTitle"] = "Surf Eye";
    var inventoryAddModalModel = ViewData["InventoryAddModal"] as InventoryAddModalViewModel
        ?? new InventoryAddModalViewModel();
    string FormatBytes(long bytes)
    {
        const double OneKb = 1024d;
        const double OneMb = OneKb * 1024d;
        return bytes >= OneMb
            ? string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0.#} MB", bytes / OneMb)
            : string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:0.#} KB", bytes / OneKb);
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Surf Eye â€¢ Wine Surfer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#050505" />
    <link rel="stylesheet" href="/css/wine-surfer-theme.css" />
    <link rel="stylesheet" href="/css/wine-surfer-shadcn.css" />
    <script defer src="/js/pwa.js"></script>
    <style>
        :root {
            color-scheme: dark;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: var(--wine-app-background);
            color: #f4f1ea;
            font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, BlinkMacSystemFont, 'Helvetica Neue', sans-serif;
        }

        .page-content {
            min-height: 100vh;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        main {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 48px 20px 80px;
            gap: 24px;
        }

        .surf-eye-content {
            width: min(100%, 960px);
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 24px;
        }

        .surf-eye-intro {
            max-width: 720px;
            margin: 0;
            text-align: center;
            font-size: 0.95rem;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.74);
        }

        .surf-eye-card {
            background: rgba(17, 17, 20, 0.82);
            border: 1px solid rgba(244, 241, 234, 0.08);
            border-radius: 24px;
            padding: 28px;
            display: flex;
            flex-direction: column;
            gap: 20px;
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.35);
        }

        .surf-eye-section-title {
            margin: 0;
            font-size: 0.9rem;
            letter-spacing: 3px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .surf-eye-camera {
            background: rgba(12, 12, 15, 0.78);
            border: 1px dashed rgba(244, 241, 234, 0.18);
            border-radius: 20px;
            overflow: hidden;
            position: relative;
            padding: 12px;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 260px;
        }

        .surf-eye-preview {
            max-width: 100%;
            max-height: 420px;
            border-radius: 16px;
            display: none;
            object-fit: cover;
        }

        .surf-eye-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
            color: rgba(244, 241, 234, 0.45);
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .surf-eye-placeholder svg {
            width: 56px;
            height: 56px;
        }

        .surf-eye-input {
            display: none;
        }

        .surf-eye-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .surf-eye-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 20px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.22);
            background: linear-gradient(135deg, rgba(131, 56, 236, 0.9), rgba(69, 28, 151, 0.92));
            color: #f4f1ea;
            text-transform: uppercase;
            letter-spacing: 3px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
            min-width: 160px;
        }

        .surf-eye-button:hover,
        .surf-eye-button:focus-visible {
            transform: translateY(-1px);
            border-color: rgba(244, 241, 234, 0.45);
            box-shadow: 0 14px 40px rgba(131, 56, 236, 0.35);
        }

        .surf-eye-button:focus-visible {
            outline: 2px solid rgba(244, 241, 234, 0.6);
            outline-offset: 3px;
        }

        .surf-eye-button.secondary {
            background: rgba(244, 241, 234, 0.08);
            border: 1px solid rgba(244, 241, 234, 0.18);
            color: rgba(244, 241, 234, 0.9);
        }

        .surf-eye-button.secondary:hover,
        .surf-eye-button.secondary:focus-visible {
            background: rgba(244, 241, 234, 0.14);
            border-color: rgba(244, 241, 234, 0.32);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
        }

        .surf-eye-button[disabled] {
            opacity: 0.45;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .surf-eye-status {
            min-height: 28px;
            font-size: 0.95rem;
            letter-spacing: 1px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.72);
        }

        .surf-eye-status[data-tone="error"] {
            color: #ff9ca3;
        }

        .surf-eye-status[data-tone="success"] {
            color: #9cf2c6;
        }

        .surf-eye-results {
            display: none;
            flex-direction: column;
            gap: 16px;
        }

        .surf-eye-results.is-visible {
            display: flex;
        }

        .surf-eye-summary {
            margin: 0;
            font-size: 1rem;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.85);
        }

        .surf-eye-wines {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 16px;
            padding: 0;
            margin: 0;
        }

        .surf-eye-wine {
            padding: 20px;
            border-radius: 18px;
            border: 1px solid rgba(244, 241, 234, 0.1);
            background: rgba(21, 21, 24, 0.85);
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .surf-eye-wine__header {
            display: flex;
            align-items: flex-start;
            gap: 16px;
        }

        .surf-eye-wine__rank {
            font-size: 0.85rem;
            letter-spacing: 2px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
            padding-top: 4px;
        }

        .surf-eye-wine__title {
            flex: 1 1 auto;
        }

        .surf-eye-wine__title h3 {
            margin: 0;
            font-size: 1.25rem;
            letter-spacing: 1px;
        }

        .surf-eye-wine__meta {
            margin: 6px 0 0;
            font-size: 0.9rem;
            color: rgba(244, 241, 234, 0.65);
            letter-spacing: 1px;
        }

        .surf-eye-wine__score {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 4px;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .surf-eye-wine__score-value {
            font-size: 1.4rem;
            font-weight: 600;
            color: #ffb347;
        }

        .surf-eye-wine__body {
            display: flex;
            flex-direction: column;
            gap: 8px;
            font-size: 0.95rem;
            line-height: 1.6;
            color: rgba(244, 241, 234, 0.82);
        }

        .surf-eye-wine__foot {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
        }

        .surf-eye-wine__foot-meta {
            flex: 1 1 auto;
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            font-size: 0.85rem;
            letter-spacing: 1px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .surf-eye-wine__foot-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .surf-eye-add-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 10px 16px;
            border-radius: 999px;
            border: 1px solid rgba(244, 241, 234, 0.28);
            background: rgba(244, 241, 234, 0.12);
            color: #f4f1ea;
            letter-spacing: 2px;
            text-transform: uppercase;
            font-size: 0.75rem;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease, background 0.2s ease;
        }

        .surf-eye-add-button.secondary {
            background: rgba(244, 241, 234, 0.08);
            border-color: rgba(244, 241, 234, 0.2);
            color: rgba(244, 241, 234, 0.92);
        }

        .surf-eye-add-button:hover,
        .surf-eye-add-button:focus-visible {
            background: rgba(244, 241, 234, 0.2);
            border-color: rgba(244, 241, 234, 0.45);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
            transform: translateY(-1px);
        }

        .surf-eye-add-button.secondary:hover,
        .surf-eye-add-button.secondary:focus-visible {
            background: rgba(244, 241, 234, 0.14);
            border-color: rgba(244, 241, 234, 0.32);
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.28);
        }

        .surf-eye-add-button:focus-visible {
            outline: 2px solid rgba(244, 241, 234, 0.6);
            outline-offset: 3px;
        }

        .surf-eye-add-button[disabled] {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .surf-eye-cellar-message {
            margin: 0;
            font-size: 0.85rem;
            letter-spacing: 1px;
            text-transform: uppercase;
            color: rgba(244, 241, 234, 0.6);
        }

        .surf-eye-cellar-message[data-state="success"] {
            color: #9cf2c6;
        }

        .surf-eye-cellar-message[data-state="error"] {
            color: #ff9ca3;
        }

        .surf-eye-empty {
            text-transform: uppercase;
            letter-spacing: 2px;
            font-size: 0.85rem;
            color: rgba(244, 241, 234, 0.45);
        }

        @@media (max-width: 720px) {
            .surf-eye-content {
                grid-template-columns: 1fr;
            }

            .surf-eye-card {
                padding: 22px;
            }
        }
    </style>
</head>
<body class="wine-app wine-app--with-bottom-nav">
    <div class="page-content">
        @await Html.PartialAsync("_WineSurferTopBar", topBarModel)
        <main>
            <p class="surf-eye-intro">Capture a bottle shot and let Surf Eye spot the labels, then rank them by how well they vibe with @displayName's palate.</p>
            <section class="surf-eye-content">
                <form id="surf-eye-form" class="surf-eye-card" method="post" enctype="multipart/form-data" data-analyze-url="@analyzeUrl" data-has-taste-profile="@hasTasteProfile.ToString().ToLowerInvariant()" data-max-bytes="@maxUploadBytes">
                    @Html.AntiForgeryToken()
                    <div>
                        <p class="surf-eye-section-title">Capture</p>
                        <div class="surf-eye-camera">
                            <img id="surf-eye-preview" class="surf-eye-preview" alt="Preview of the captured wine photo" />
                            <div id="surf-eye-placeholder" class="surf-eye-placeholder">
                                <svg viewBox="0 0 48 48" fill="none" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                                    <path d="M16 12l3-4h10l3 4h6a4 4 0 0 1 4 4v18a4 4 0 0 1-4 4H10a4 4 0 0 1-4-4V16a4 4 0 0 1 4-4z" />
                                    <circle cx="24" cy="25" r="8" />
                                </svg>
                                <span>Open the camera and snap a label</span>
                                <span style="font-size: 0.7rem; letter-spacing: 2px;">Max size @FormatBytes(maxUploadBytes)</span>
                            </div>
                        </div>
                    </div>
                    <input type="file" id="surf-eye-photo" class="surf-eye-input" accept="image/*" capture="environment" name="Photo" />
                    <div class="surf-eye-actions">
                        <label for="surf-eye-photo" class="surf-eye-button secondary">Open Camera</label>
                        <button type="button" class="surf-eye-button" id="surf-eye-analyze">Analyze Photo</button>
                    </div>
                    <div id="surf-eye-status" class="surf-eye-status">@(hasTasteProfile ? "Snap a photo to begin." : "Snap a photo to identify wines. Add a taste profile to see alignment scores.")</div>
                    <div id="surf-eye-results" class="surf-eye-results">
                        <p id="surf-eye-summary" class="surf-eye-summary"></p>
                        <p class="surf-eye-cellar-message" data-favorite-message hidden role="status"></p>
                        <ul id="surf-eye-wines" class="surf-eye-wines"></ul>
                        <div id="surf-eye-empty" class="surf-eye-empty">Surf Eye is waiting for a photo.</div>
                    </div>
                </form>
            </section>
            @await Html.PartialAsync("_InventoryAddModal", inventoryAddModalModel)
            @await Html.PartialAsync("_WishlistPopover")
        </main>
    </div>
    @await Html.PartialAsync("_WineSurferBottomNav", Context?.Request?.Path.Value)
    <script src="/js/create-wine-popover.js"></script>
    <script src="/js/inventory-add-modal.js"></script>
    <script src="/js/wine-surfer-favorites.js"></script>
    <script src="/js/wishlist-popover.js"></script>
<script>
(() => {
    const form = document.getElementById('surf-eye-form');
    if (!form) {
        return;
    }

    const photoInput = document.getElementById('surf-eye-photo');
    const previewImage = document.getElementById('surf-eye-preview');
    const placeholder = document.getElementById('surf-eye-placeholder');
    const analyzeButton = document.getElementById('surf-eye-analyze');
    const statusEl = document.getElementById('surf-eye-status');
    const resultsSection = document.getElementById('surf-eye-results');
    const summaryEl = document.getElementById('surf-eye-summary');
    const winesList = document.getElementById('surf-eye-wines');
    const emptyState = document.getElementById('surf-eye-empty');
    const cellarMessage = document.querySelector('[data-favorite-message]');
    const showCellarMessage = (message, state = 'info') => {
        if (!cellarMessage) {
            return;
        }

        const text = typeof message === 'string' ? message : '';
        cellarMessage.textContent = text;
        cellarMessage.hidden = text.trim().length === 0;
        cellarMessage.dataset.state = state;
    };
    document.addEventListener('wishlist:added', (event) => {
        const detail = event?.detail ?? {};
        const wishlistName = typeof detail?.wishlistName === 'string' && detail.wishlistName.trim().length > 0
            ? detail.wishlistName.trim()
            : 'wishlist';
        const wineName = typeof detail?.wineName === 'string' && detail.wineName.trim().length > 0
            ? detail.wineName.trim()
            : 'Wine';
        const vintageText = detail?.vintage ? String(detail.vintage).trim() : '';
        const wineLabel = vintageText ? `${wineName} (${vintageText})` : wineName;
        showCellarMessage(`${wineLabel} was saved to ${wishlistName}.`, 'success');
    });
    const analyzeUrl = form.dataset.analyzeUrl ?? '';
    const hasTasteProfile = form.dataset.hasTasteProfile === 'true';
    const maxBytes = Number(form.dataset.maxBytes ?? '0');
    const readyStatusMessage = hasTasteProfile
        ? 'Snap a photo to begin.'
        : 'Snap a photo to identify wines. Add a taste profile to see alignment scores.';
    const photoReadyMessage = hasTasteProfile
        ? 'Photo ready. Tap analyze to see what Surf Eye spots.'
        : 'Photo ready. Surf Eye will identify wines, but it needs your taste profile to show alignment scores.';
    const analysisInProgressMessage = hasTasteProfile
        ? 'Surf Eye is analyzing your photoâ€¦'
        : 'Surf Eye is identifying the wines in your photo. Alignment scores need a taste profile.';
    const analysisCompleteMessage = hasTasteProfile
        ? 'Surf Eye finished analyzing your photo.'
        : 'Surf Eye spotted wines from your photo. Add a taste profile to unlock alignment scores.';

    let previewUrl = null;

    const setStatus = (message, tone = 'info') => {
        if (!statusEl) {
            return;
        }
        statusEl.textContent = message;
        statusEl.dataset.tone = tone;
    };

    const clearPreview = () => {
        if (previewUrl) {
            URL.revokeObjectURL(previewUrl);
            previewUrl = null;
        }
        previewImage.style.display = 'none';
        previewImage.removeAttribute('src');
        placeholder.style.display = 'flex';
    };

    const clearResults = () => {
        if (summaryEl) {
            summaryEl.textContent = '';
        }
        if (winesList) {
            winesList.innerHTML = '';
        }
        if (emptyState) {
            emptyState.textContent = 'Surf Eye is waiting for a photo.';
            emptyState.style.display = 'block';
        }
        showCellarMessage('', 'info');
        resultsSection?.classList.remove('is-visible');
    };

    const formatConfidence = (value) => {
        if (Number.isNaN(value)) {
            return '0% confidence';
        }
        const percent = Math.round(Math.min(Math.max(value, 0), 1) * 100);
        return `${percent}% confidence`;
    };

    const setAnalyzeBusy = (isBusy) => {
        if (!analyzeButton) {
            return;
        }

        const busy = Boolean(isBusy);
        analyzeButton.disabled = busy;
        analyzeButton.dataset.state = busy ? 'loading' : 'ready';

        if (busy) {
            analyzeButton.setAttribute('aria-busy', 'true');
        } else {
            analyzeButton.removeAttribute('aria-busy');
        }
    };

    const renderWines = (wines) => {
        if (!winesList) {
            return;
        }

        winesList.innerHTML = '';
        if (emptyState) {
            emptyState.style.display = 'none';
        }
        wines.forEach((wine, index) => {
            const item = document.createElement('li');
            item.className = 'surf-eye-wine';

            const header = document.createElement('div');
            header.className = 'surf-eye-wine__header';

            if (hasTasteProfile) {
                const rank = document.createElement('span');
                rank.className = 'surf-eye-wine__rank';
                rank.textContent = `#${index + 1}`;
                header.appendChild(rank);
            }

            const titleBlock = document.createElement('div');
            titleBlock.className = 'surf-eye-wine__title';

            const title = document.createElement('h3');
            title.textContent = wine.name ?? 'Unknown wine';
            titleBlock.appendChild(title);

            const metaParts = [];
            if (wine.producer) metaParts.push(wine.producer);
            const locationParts = [];
            if (wine.subAppellation) locationParts.push(wine.subAppellation);
            if (wine.appellation && !locationParts.includes(wine.appellation)) {
                locationParts.push(wine.appellation);
            }
            if (wine.region && !locationParts.includes(wine.region)) {
                locationParts.push(wine.region);
            }
            if (wine.country && !locationParts.includes(wine.country)) {
                locationParts.push(wine.country);
            }
            if (locationParts.length > 0) {
                metaParts.push(locationParts.join(' â€¢ '));
            }
            if (wine.color) metaParts.push(`Color: ${wine.color}`);
            if (metaParts.length > 0) {
                const meta = document.createElement('p');
                meta.className = 'surf-eye-wine__meta';
                meta.textContent = metaParts.join(' â€¢ ');
                titleBlock.appendChild(meta);
            }

            header.appendChild(titleBlock);

            if (hasTasteProfile) {
                const scoreBlock = document.createElement('div');
                scoreBlock.className = 'surf-eye-wine__score';

                const scoreValue = document.createElement('span');
                scoreValue.className = 'surf-eye-wine__score-value';
                const alignmentScore = typeof wine.alignmentScore === 'number' ? Math.round(wine.alignmentScore) : 0;
                scoreValue.textContent = `${alignmentScore}`;
                scoreBlock.appendChild(scoreValue);

                const scoreLabel = document.createElement('span');
                scoreLabel.textContent = 'Alignment';
                scoreBlock.appendChild(scoreLabel);

                header.appendChild(scoreBlock);
            }
            item.appendChild(header);

            const body = document.createElement('div');
            body.className = 'surf-eye-wine__body';

            if (hasTasteProfile && wine.alignmentSummary) {
                const alignment = document.createElement('p');
                alignment.textContent = wine.alignmentSummary;
                body.appendChild(alignment);
            }

            if (wine.notes) {
                const notes = document.createElement('p');
                notes.textContent = wine.notes;
                body.appendChild(notes);
            }

            const foot = document.createElement('div');
            foot.className = 'surf-eye-wine__foot';

            const footMeta = document.createElement('div');
            footMeta.className = 'surf-eye-wine__foot-meta';

            if (hasTasteProfile) {
                const confidence = document.createElement('span');
                confidence.textContent = formatConfidence(Number(wine.confidence));
                footMeta.appendChild(confidence);
            }
            const detailParts = [];
            if (wine.variety) {
                detailParts.push(wine.variety);
            }
            if (wine.vintage) {
                detailParts.push(wine.vintage);
            }
            if (locationParts.length === 0) {
                const fallbackLocation = [];
                if (wine.appellation) fallbackLocation.push(wine.appellation);
                if (wine.region) fallbackLocation.push(wine.region);
                if (wine.country) fallbackLocation.push(wine.country);
                if (fallbackLocation.length > 0) {
                    detailParts.push(fallbackLocation.join(' â€¢ '));
                }
            }
            if (detailParts.length > 0) {
                const details = document.createElement('span');
                details.textContent = detailParts.join(' â€¢ ');
                footMeta.appendChild(details);
            }

            if (footMeta.childElementCount > 0) {
                foot.appendChild(footMeta);
            }

            const footActions = document.createElement('div');
            footActions.className = 'surf-eye-wine__foot-actions';

            const addButton = document.createElement('button');
            addButton.type = 'button';
            addButton.className = 'surf-eye-add-button';
            addButton.setAttribute('data-add-wine-trigger', 'surf-eye');
            addButton.textContent = 'Add to my cellar';

            const assignData = (element, key, value) => {
                if (!element || !key) {
                    return;
                }

                if (value === null || value === undefined) {
                    return;
                }

                const text = typeof value === 'string' ? value.trim() : String(value).trim();
                if (text.length === 0) {
                    return;
                }

                element.dataset[key] = text;
            };

            const applyWineDataset = (element) => {
                assignData(element, 'wineName', wine.name);
                assignData(element, 'wineProducer', wine.producer);
                assignData(element, 'wineCountry', wine.country);
                assignData(element, 'wineRegion', wine.region);
                assignData(element, 'wineAppellation', wine.appellation);
                assignData(element, 'wineSubAppellation', wine.subAppellation);
                assignData(element, 'wineVariety', wine.variety);
                assignData(element, 'wineVintage', wine.vintage);
                assignData(element, 'wineColor', wine.color);
                assignData(element, 'wineId', wine.wineId);
            };

            const buildContextFromDataset = (dataset) => ({
                source: 'surf-eye',
                id: dataset?.wineId ?? '',
                name: dataset?.wineName ?? '',
                producer: dataset?.wineProducer ?? '',
                country: dataset?.wineCountry ?? '',
                region: dataset?.wineRegion ?? '',
                appellation: dataset?.wineAppellation ?? '',
                subAppellation: dataset?.wineSubAppellation ?? '',
                color: dataset?.wineColor ?? '',
                variety: dataset?.wineVariety ?? '',
                vintage: dataset?.wineVintage ?? ''
            });

            applyWineDataset(addButton);

            addButton.addEventListener('click', (event) => {
                const openAddWineModal = window.wineSurferFavorites?.openAddWineModal;
                if (typeof openAddWineModal !== 'function') {
                    return;
                }

                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                showCellarMessage('', 'info');

                const context = buildContextFromDataset(addButton.dataset);

                openAddWineModal(context).catch(error => {
                    const message = typeof error?.message === 'string'
                        ? error.message
                        : 'Unable to open add wine modal.';
                    showCellarMessage(message, 'error');
                });
            });

            footActions.appendChild(addButton);

            const wishlistButton = document.createElement('button');
            wishlistButton.type = 'button';
            wishlistButton.className = 'surf-eye-add-button secondary';
            wishlistButton.setAttribute('data-wishlist-trigger', 'surf-eye');
            wishlistButton.textContent = 'Add to wishlist';
            applyWineDataset(wishlistButton);

            wishlistButton.addEventListener('click', (event) => {
                const openWishlist = window.wishlistPopover?.open;
                if (typeof openWishlist !== 'function') {
                    return;
                }

                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();

                showCellarMessage('', 'info');

                const context = buildContextFromDataset(wishlistButton.dataset);

                openWishlist(context).catch(error => {
                    const message = typeof error?.message === 'string'
                        ? error.message
                        : 'Unable to open wishlist popover.';
                    showCellarMessage(message, 'error');
                });
            });

            footActions.appendChild(wishlistButton);

            foot.appendChild(footActions);

            body.appendChild(foot);
            item.appendChild(body);
            winesList.appendChild(item);
        });
    };

    setAnalyzeBusy(false);

    photoInput?.addEventListener('change', () => {
        const [file] = photoInput.files ?? [];
        clearResults();

        if (!file) {
            clearPreview();
            setAnalyzeBusy(false);
            setStatus(readyStatusMessage);
            return;
        }

        if (maxBytes > 0 && file.size > maxBytes) {
            clearPreview();
            photoInput.value = '';
            setStatus(`That file is too large. Keep it under ${(maxBytes / (1024 * 1024)).toFixed(1)} MB.`, 'error');
            setAnalyzeBusy(false);
            return;
        }

        if (previewUrl) {
            URL.revokeObjectURL(previewUrl);
        }

        previewUrl = URL.createObjectURL(file);
        previewImage.src = previewUrl;
        previewImage.style.display = 'block';
        placeholder.style.display = 'none';
        setStatus(photoReadyMessage);
        setAnalyzeBusy(false);
    });

    const submitAnalysis = async () => {
        const [file] = photoInput.files ?? [];
        if (!file) {
            setStatus('Snap a photo before analyzing.', 'error');
            setAnalyzeBusy(false);
            return;
        }

        setAnalyzeBusy(true);
        setStatus(analysisInProgressMessage, 'progress');

        const formData = new FormData(form);
        try {
            const response = await fetch(analyzeUrl, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                let message = 'Surf Eye hit a snag. Try again in a moment.';
                try {
                    const errorPayload = await response.json();
                    if (errorPayload && typeof errorPayload.error === 'string') {
                        message = errorPayload.error;
                    }
                } catch (_) {
                    // ignore parsing issues
                }
                setStatus(message, 'error');
                resultsSection?.classList.remove('is-visible');
                setAnalyzeBusy(false);
                return;
            }

            const payload = await response.json();
            if (payload) {
                summaryEl.textContent = payload.summary ?? '';
                if (Array.isArray(payload.wines) && payload.wines.length > 0) {
                    renderWines(payload.wines);
                    if (emptyState) {
                        emptyState.style.display = 'none';
                    }
                } else {
                    winesList.innerHTML = '';
                    if (emptyState) {
                        emptyState.textContent = 'Surf Eye did not recognize any wines.';
                        emptyState.style.display = 'block';
                    }
                }
                resultsSection.classList.add('is-visible');
                setStatus(analysisCompleteMessage, hasTasteProfile ? 'success' : 'info');
            }
        }
        catch (error) {
            console.error('Surf Eye analysis failed', error);
            setStatus('We lost the connection. Try again in a moment.', 'error');
            resultsSection?.classList.remove('is-visible');
        }
        finally {
            setAnalyzeBusy(false);
        }
    };

    analyzeButton?.addEventListener('click', (event) => {
        event.preventDefault();
        submitAnalysis();
    });

    form.addEventListener('submit', (event) => {
        event.preventDefault();
    });

    window.addEventListener('beforeunload', () => {
        if (previewUrl) {
            URL.revokeObjectURL(previewUrl);
        }
    });
})();
</script>
</body>
</html>
