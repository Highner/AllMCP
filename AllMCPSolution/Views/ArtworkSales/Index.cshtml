@{
    ViewData["Title"] = "Artwork Sales";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"]</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f4f6fb; margin: 0; }
        .container { max-width: 1200px; margin: 30px auto; background: white; padding: 24px; border-radius: 10px; box-shadow: 0 10px 30px rgba(0,0,0,0.08); }
        h1 { margin: 0 0 16px; color: #333; }
        .toolbar { display: flex; gap: 12px; align-items: center; margin-bottom: 14px; flex-wrap: wrap; }
        .toolbar input[type="text"]{ padding: 10px 12px; border: 2px solid #667eea; border-radius: 6px; min-width: 260px; }
        .btn{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 10px 14px; border-radius: 6px; cursor: pointer; }
        .btn.secondary{ background: linear-gradient(135deg, #6c757d 0%, #495057 100%); }
        .preview-table{ width: 100%; min-width: 1100px; border-collapse: collapse; font-size: 14px; background: white; border-radius: 6px; overflow: hidden; }
        .preview-table th, .preview-table td{ padding: 8px 10px; border-bottom: 1px solid #eee; text-align: left; white-space: nowrap; }
        .preview-table thead th{ background: #eef1ff; color: #333; position: sticky; top: 0; z-index: 1; cursor: pointer; }
        .preview-scroller{ max-height: 500px; overflow: auto; border: 1px solid #eef1ff; border-radius: 6px; }
        .muted{ color: #777; font-size: 13px; }
        .actions button{ margin-right: 6px; }
        .form-grid{ display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; margin-top: 10px; }
        .form-grid input, .form-grid select{ padding: 8px; border: 1px solid #ccd; border-radius: 6px; }
        .section { background: #f8f9ff; border-radius: 8px; padding: 12px; margin-top: 14px; }
        .label { font-weight: 600; color: #333; margin-bottom: 6px; }
                .mode-badge { padding: 4px 10px; border-radius: 999px; font-weight: 700; font-size: 12px; border: 1px solid transparent; }
                .mode-badge.create { background: #e6f7ec; color: #1a7f37; border-color: #b5e6c6; }
                .mode-badge.edit { background: #fff4e5; color: #9a6700; border-color: #f1c26b; }
    </style>
</head>
<body>
<div class="container">
    <h1>Artwork Trades</h1>
    <div class="toolbar">
        <button class="btn secondary" onclick="window.location.href='/'">‚Üê Main Menu</button>
        <input id="search" type="text" placeholder="Filter... (artist, name, category, etc.)" />
        <button class="btn" id="refreshBtn">Refresh</button>
        <span id="count" class="muted"></span>
    </div>

    <div class="section">
        <div style="display:flex; align-items:center; justify-content: space-between;">
            <div class="label"><span id="modeTitle">Create New Trade</span></div>
            <span id="modeBadge" class="mode-badge create">Create mode</span>
        </div>
        <div id="editHint" class="muted" style="margin-top:4px; display:none;">Editing trade <code id="editId"></code></div>
        <div class="form-grid">
            <input id="fId" type="hidden" />
            <div>
                <label for="fName" class="label">Name</label>
                <input id="fName" />
            </div>
            <div>
                <label for="fArtistSelect" class="label">Artist</label>
                <select id="fArtistSelect">
                    <option value="">-- Select artist --</option>
                </select>
            </div>
            <div>
                <label for="fYearCreated" class="label">Year Created</label>
                <input id="fYearCreated" type="number" />
            </div>
            <div>
                <label for="fSaleDate" class="label">Sale Date</label>
                <input id="fSaleDate" type="date" />
            </div>
            <div>
                <label for="fTechnique" class="label">Technique</label>
                <input id="fTechnique" />
            </div>
            <div>
                <label for="fCategorySelect" class="label">Category</label>
                <select id="fCategorySelect">
                    <option value="">-- Select category --</option>
                </select>
                <div style="display:flex; gap:6px; margin-top:6px;">
                    <input id="fNewCategory" placeholder="Add new category" />
                    <button class="btn secondary" type="button" id="addCategoryBtn">Add</button>
                </div>
            </div>
            <div>
                <label for="fCurrency" class="label">Currency</label>
                <select id="fCurrency">
                    <option value="">Currency</option>
                    <option>USD</option>
                    <option>EUR</option>
                    <option>GBP</option>
                </select>
            </div>
            <div>
                <label for="fHeight" class="label">Height</label>
                <input id="fHeight" type="number" step="0.0001" />
            </div>
            <div>
                <label for="fWidth" class="label">Width</label>
                <input id="fWidth" type="number" step="0.0001" />
            </div>
            <div>
                <label for="fLowEstimate" class="label">Low Estimate</label>
                <input id="fLowEstimate" type="number" step="0.01" />
            </div>
            <div>
                <label for="fHighEstimate" class="label">High Estimate</label>
                <input id="fHighEstimate" type="number" step="0.01" />
            </div>
            <div>
                <label for="fHammerPrice" class="label">Hammer Price</label>
                <input id="fHammerPrice" type="number" step="0.01" />
            </div>
            <div>
                <label for="fSold" class="label">Sold</label>
                <select id="fSold">
                    <option value="false">Not Sold</option>
                    <option value="true">Sold</option>
                </select>
            </div>
        </div>
        <div style="margin-top:10px; display:flex; gap:8px;">
            <button class="btn" id="saveBtn">Create Trade</button>
            <button class="btn secondary" id="clearBtn" title="Clear the form to create a new trade">Clear</button>
        </div>
        <div id="formMsg" class="muted" style="margin-top:8px;"></div>
    </div>

    <div style="margin-top:14px;" class="muted">Click a column header to sort. Click a row to load it into the form for editing.</div>

    <div class="preview-scroller" style="margin-top:10px;">
        <table class="preview-table" id="salesTable">
            <thead>
                <tr>
                    <th data-sort="artist">Artist</th>
                    <th data-sort="name">Name</th>
                    <th data-sort="category">Category</th>
                    <th>Technique</th>
                    <th data-sort="saledate">Sale Date</th>
                    <th>Currency</th>
                    <th data-sort="hammerprice">Hammer</th>
                    <th>Est Low</th>
                    <th>Est High</th>
                    <th>H</th>
                    <th>W</th>
                    <th>Year</th>
                    <th>Sold</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="salesBody"></tbody>
        </table>
    </div>
</div>
<script>
    const api = {
        list: (p={}) => fetch(`/api/artworksales?${new URLSearchParams(p)}`).then(r=>r.json()),
        get: id => fetch(`/api/artworksales/${id}`).then(r=>r.json()),
        create: data => fetch('/api/artworksales', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(data)}),
        update: (id, data) => fetch(`/api/artworksales/${id}`, {method:'PUT', headers:{'Content-Type':'application/json'}, body: JSON.stringify(data)}),
        remove: id => fetch(`/api/artworksales/${id}`, {method:'DELETE'}),
        listArtists: () => fetch('/api/artists').then(r=>r.json()),
        listCategories: () => fetch('/api/artworksales/categories').then(r=>r.json())
    };

    let sortBy = 'saledate';
    let sortDir = 'asc';

    function formatDate(iso){ if(!iso) return ''; const d = new Date(iso); return d.toISOString().slice(0,10); }
    function money(v){ return (v ?? 0).toLocaleString(undefined,{minimumFractionDigits:2, maximumFractionDigits:2}); }

    async function loadArtists(){
        const sel = document.getElementById('fArtistSelect');
        sel.innerHTML = '<option value="">-- Select artist --</option>';
        try{
            const items = await api.listArtists();
            items.sort((a,b)=> (a.lastName||'').localeCompare(b.lastName||'') || (a.firstName||'').localeCompare(b.firstName||''));
            for(const a of items){
                const opt = document.createElement('option');
                opt.value = a.id;
                opt.textContent = `${a.firstName ?? ''} ${a.lastName ?? ''}`.trim();
                sel.appendChild(opt);
            }
        }catch(e){
            console.error('Failed to load artists', e);
        }
    }

    async function loadCategories(){
        const sel = document.getElementById('fCategorySelect');
        sel.innerHTML = '<option value="">-- Select category --</option>';
        try{
            const cats = await api.listCategories();
            for(const c of cats){
                if(!c) continue;
                const opt = document.createElement('option');
                opt.value = c; opt.textContent = c;
                sel.appendChild(opt);
            }
        }catch(e){ console.error('Failed to load categories', e); }
    }

    document.getElementById('addCategoryBtn').addEventListener('click', ()=>{
        const input = document.getElementById('fNewCategory');
        const val = (input.value||'').trim();
        if(!val) return;
        const sel = document.getElementById('fCategorySelect');
        if(![...sel.options].some(o=>o.value===val)){
            const opt = document.createElement('option'); opt.value = val; opt.textContent = val; sel.appendChild(opt);
        }
        sel.value = val;
        input.value = '';
    });

    async function load(){
        const search = document.getElementById('search').value;
        const rows = await api.list({ search, sortBy, sortDir });
        const tbody = document.getElementById('salesBody');
        tbody.innerHTML = '';
        document.getElementById('count').textContent = `${rows.length} trades`;
        for(const r of rows){
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${r.artistName || ''}</td>
                <td>${r.name || ''}</td>
                <td>${r.category || ''}</td>
                <td>${r.technique || ''}</td>
                <td>${formatDate(r.saleDate)}</td>
                <td>${r.currency || ''}</td>
                <td style="text-align:right;">${money(r.hammerPrice)}</td>
                <td style="text-align:right;">${money(r.lowEstimate)}</td>
                <td style="text-align:right;">${money(r.highEstimate)}</td>
                <td>${r.height ?? ''}</td>
                <td>${r.width ?? ''}</td>
                <td>${r.yearCreated ?? ''}</td>
                <td>${r.sold ? '‚úî' : ''}</td>
                <td class="actions">
                    <button class="btn secondary" data-act="edit">Edit</button>
                    <button class="btn" data-act="del">Delete</button>
                </td>`;
            tr.addEventListener('click', (e)=>{
                if(e.target instanceof HTMLElement){
                    const act = e.target.getAttribute('data-act');
                    if(act === 'edit'){ fillForm(r); e.stopPropagation(); return; }
                    if(act === 'del'){ if(confirm('Delete this trade?')) del(r.id); e.stopPropagation(); return; }
                }
                fillForm(r);
            });
            tbody.appendChild(tr);
        }
    }

    function fillForm(r){
        fId.value = r.id || '';
        fName.value = r.name || '';
        // ensure artist option exists then select it
        const sel = document.getElementById('fArtistSelect');
        if(r.artistId){
            if(![...sel.options].some(o=>o.value===r.artistId)){
                const opt = document.createElement('option');
                opt.value = r.artistId;
                opt.textContent = r.artistName || r.artistId;
                sel.appendChild(opt);
            }
            sel.value = r.artistId;
        } else {
            sel.value = '';
        }
        fYearCreated.value = r.yearCreated ?? '';
        fSaleDate.value = r.saleDate ? formatDate(r.saleDate) : '';
        fTechnique.value = r.technique || '';
        const csel = document.getElementById('fCategorySelect');
        const cat = r.category || '';
        if(cat){
            if(![...csel.options].some(o=>o.value===cat)){
                const opt = document.createElement('option');
                opt.value = cat; opt.textContent = cat; csel.appendChild(opt);
            }
            csel.value = cat;
        } else { csel.value = ''; }
        document.getElementById('fNewCategory').value = '';
        fCurrency.value = r.currency || '';
        fHeight.value = r.height ?? '';
        fWidth.value = r.width ?? '';
        fLowEstimate.value = r.lowEstimate ?? '';
        fHighEstimate.value = r.highEstimate ?? '';
        fHammerPrice.value = r.hammerPrice ?? '';
        fSold.value = r.sold ? 'true' : 'false';
        formMsg.textContent = 'Editing existing trade';
        const badge = document.getElementById('modeBadge');
        badge.textContent = 'Edit mode';
        badge.classList.remove('create');
        badge.classList.add('edit');
        document.getElementById('modeTitle').textContent = 'Edit Trade';
        document.getElementById('editHint').style.display = 'block';
        document.getElementById('editId').textContent = r.id || '';
        document.getElementById('saveBtn').textContent = 'Update Trade';
    }

    function readForm(){
        const newCat = document.getElementById('fNewCategory').value?.trim();
        return {
            id: fId.value || undefined,
            name: fName.value?.trim(),
            artistId: document.getElementById('fArtistSelect').value,
            yearCreated: parseInt(fYearCreated.value||'0')||0,
            saleDate: fSaleDate.value ? new Date(fSaleDate.value).toISOString() : null,
            technique: fTechnique.value?.trim(),
            category: newCat || document.getElementById('fCategorySelect').value?.trim(),
            currency: fCurrency.value || null,
            height: parseFloat(fHeight.value||'0'),
            width: parseFloat(fWidth.value||'0'),
            lowEstimate: parseFloat(fLowEstimate.value||'0'),
            highEstimate: parseFloat(fHighEstimate.value||'0'),
            hammerPrice: parseFloat(fHammerPrice.value||'0'),
            sold: fSold.value === 'true'
        };
    }

    async function save(){
        const data = readForm();
        try{
            let res;
            if(data.id){
                res = await api.update(data.id, data);
            }else{
                res = await api.create(data);
            }
            if(!res.ok){
                const t = await res.text();
                throw new Error(t);
            }
            formMsg.textContent = 'Saved successfully';
            clearForm();
            await load();
        }catch(err){
            formMsg.textContent = 'Error: ' + err.message;
        }
    }

    async function del(id){
        await api.remove(id);
        await load();
    }

    function clearForm(){
        fId.value=''; fName.value=''; document.getElementById('fArtistSelect').value=''; fYearCreated.value=''; fSaleDate.value=''; fTechnique.value=''; document.getElementById('fCategorySelect').value=''; document.getElementById('fNewCategory').value=''; fCurrency.value=''; fHeight.value=''; fWidth.value=''; fLowEstimate.value=''; fHighEstimate.value=''; fHammerPrice.value=''; fSold.value='false';
        formMsg.textContent = '';
        const badge = document.getElementById('modeBadge');
        badge.textContent = 'Create mode';
        badge.classList.remove('edit');
        badge.classList.add('create');
        document.getElementById('modeTitle').textContent = 'Create New Trade';
        document.getElementById('editHint').style.display = 'none';
        document.getElementById('editId').textContent = '';
        document.getElementById('saveBtn').textContent = 'Create Trade';
    }

    document.getElementById('refreshBtn').addEventListener('click', load);
    document.getElementById('search').addEventListener('input', ()=>{ load(); });
    document.getElementById('saveBtn').addEventListener('click', save);
    document.getElementById('clearBtn').addEventListener('click', clearForm);

    // Sorting
    document.querySelectorAll('#salesTable thead th[data-sort]').forEach(th=>{
        th.addEventListener('click', ()=>{
            const key = th.getAttribute('data-sort');
            if(sortBy === key){ sortDir = (sortDir === 'asc') ? 'desc' : 'asc'; }
            else { sortBy = key; sortDir = 'asc'; }
            load();
        });
    });

    // initial load
    (async () => { await loadArtists(); await loadCategories(); clearForm(); await load(); })();
</script>
</body>
</html>
