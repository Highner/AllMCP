// <auto-generated />
using System;
using AllMCPSolution.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllMCPSolution.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AllMCPSolution.Models.Appellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("Name", "RegionId")
                        .IsUnique();

                    b.ToTable("Appellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SuggestionBudget")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AllMCPSolution.Models.Bottle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BottleLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DrunkAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDrunk")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WineVintageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BottleLocationId");

                    b.HasIndex("UserId");

                    b.HasIndex("WineVintageId");

                    b.ToTable("Bottles");
                });

            modelBuilder.Entity("AllMCPSolution.Models.BottleLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("BottleLocations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SipSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("FoodSuggestion")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SisterhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SisterhoodId", "ScheduledAt");

                    b.ToTable("SipSessions");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SipSessionBottle", b =>
                {
                    b.Property<Guid>("BottleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SipSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRevealed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("BottleId", "SipSessionId");

                    b.HasIndex("SipSessionId");

                    b.ToTable("BottleSipSession", (string)null);
                });

            modelBuilder.Entity("AllMCPSolution.Models.Sisterhood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sisterhoods");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SisterhoodInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InviteeEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("InviteeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SisterhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InviteeUserId");

                    b.HasIndex("SisterhoodId", "InviteeEmail")
                        .IsUnique();

                    b.ToTable("SisterhoodInvitations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SisterhoodMembership", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SisterhoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "SisterhoodId");

                    b.HasIndex("SisterhoodId", "UserId")
                        .IsUnique();

                    b.ToTable("UserSisterhoods", (string)null);
                });

            modelBuilder.Entity("AllMCPSolution.Models.SubAppellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppellationId");

                    b.HasIndex("Name", "AppellationId")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SubAppellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SuggestedAppellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("SubAppellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasteProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubAppellationId");

                    b.HasIndex("TasteProfileId", "SubAppellationId")
                        .IsUnique();

                    b.ToTable("SuggestedAppellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SuggestedWine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuggestedAppellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vintage")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("WineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WineId");

                    b.HasIndex("SuggestedAppellationId", "WineId")
                        .IsUnique();

                    b.ToTable("SuggestedWines");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TasteProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<bool>("InUse")
                        .HasColumnType("bit");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "InUse")
                        .IsUnique()
                        .HasFilter("[InUse] = 1");

                    b.ToTable("TasteProfiles");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TastingNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BottleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BottleId");

                    b.HasIndex("UserId");

                    b.ToTable("TastingNotes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("GrapeVariety")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SubAppellationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubAppellationId");

                    b.HasIndex("Name", "SubAppellationId")
                        .IsUnique();

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineSurferNotificationDismissal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("DismissedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Stamp")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Category", "Stamp")
                        .IsUnique();

                    b.ToTable("WineSurferNotificationDismissals");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Vintage")
                        .HasColumnType("int");

                    b.Property<Guid>("WineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WineId", "Vintage")
                        .IsUnique();

                    b.ToTable("WineVintages");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintageEvolutionScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WineVintageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WineVintageId");

                    b.HasIndex("UserId", "WineVintageId", "Year")
                        .IsUnique();

                    b.ToTable("WineVintageEvolutionScores");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintageWish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WineVintageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WineVintageId");

                    b.HasIndex("WishlistId", "WineVintageId")
                        .IsUnique();

                    b.ToTable("WineVintageWishes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AllMCPSolution.Models.Appellation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Region", "Region")
                        .WithMany("Appellations")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Bottle", b =>
                {
                    b.HasOne("AllMCPSolution.Models.BottleLocation", "BottleLocation")
                        .WithMany("Bottles")
                        .HasForeignKey("BottleLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("Bottles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AllMCPSolution.Models.WineVintage", "WineVintage")
                        .WithMany("Bottles")
                        .HasForeignKey("WineVintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BottleLocation");

                    b.Navigation("User");

                    b.Navigation("WineVintage");
                });

            modelBuilder.Entity("AllMCPSolution.Models.BottleLocation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("BottleLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Region", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SipSession", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Sisterhood", "Sisterhood")
                        .WithMany("SipSessions")
                        .HasForeignKey("SisterhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sisterhood");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SipSessionBottle", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Bottle", "Bottle")
                        .WithMany("SipSessions")
                        .HasForeignKey("BottleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.SipSession", "SipSession")
                        .WithMany("Bottles")
                        .HasForeignKey("SipSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bottle");

                    b.Navigation("SipSession");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SisterhoodInvitation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "InviteeUser")
                        .WithMany("SisterhoodInvitations")
                        .HasForeignKey("InviteeUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AllMCPSolution.Models.Sisterhood", "Sisterhood")
                        .WithMany("Invitations")
                        .HasForeignKey("SisterhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InviteeUser");

                    b.Navigation("Sisterhood");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SisterhoodMembership", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Sisterhood", "Sisterhood")
                        .WithMany("Memberships")
                        .HasForeignKey("SisterhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("SisterhoodMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sisterhood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SubAppellation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Appellation", "Appellation")
                        .WithMany("SubAppellations")
                        .HasForeignKey("AppellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appellation");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SuggestedAppellation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.SubAppellation", "SubAppellation")
                        .WithMany("SuggestedAppellations")
                        .HasForeignKey("SubAppellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.TasteProfile", "TasteProfile")
                        .WithMany("SuggestedAppellations")
                        .HasForeignKey("TasteProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubAppellation");

                    b.Navigation("TasteProfile");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SuggestedWine", b =>
                {
                    b.HasOne("AllMCPSolution.Models.SuggestedAppellation", "SuggestedAppellation")
                        .WithMany("SuggestedWines")
                        .HasForeignKey("SuggestedAppellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.Wine", "Wine")
                        .WithMany("SuggestedWines")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuggestedAppellation");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TasteProfile", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("TasteProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TastingNote", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Bottle", "Bottle")
                        .WithMany("TastingNotes")
                        .HasForeignKey("BottleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("TastingNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bottle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wine", b =>
                {
                    b.HasOne("AllMCPSolution.Models.SubAppellation", "SubAppellation")
                        .WithMany("Wines")
                        .HasForeignKey("SubAppellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubAppellation");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineSurferNotificationDismissal", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("NotificationDismissals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintage", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Wine", "Wine")
                        .WithMany("WineVintages")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintageEvolutionScore", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("WineVintageEvolutionScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.WineVintage", "WineVintage")
                        .WithMany("EvolutionScores")
                        .HasForeignKey("WineVintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WineVintage");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintageWish", b =>
                {
                    b.HasOne("AllMCPSolution.Models.WineVintage", "WineVintage")
                        .WithMany("Wishes")
                        .HasForeignKey("WineVintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.Wishlist", "Wishlist")
                        .WithMany("Wishes")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineVintage");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wishlist", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AllMCPSolution.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AllMCPSolution.Models.Appellation", b =>
                {
                    b.Navigation("SubAppellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.ApplicationUser", b =>
                {
                    b.Navigation("BottleLocations");

                    b.Navigation("Bottles");

                    b.Navigation("NotificationDismissals");

                    b.Navigation("SisterhoodInvitations");

                    b.Navigation("SisterhoodMemberships");

                    b.Navigation("TasteProfiles");

                    b.Navigation("TastingNotes");

                    b.Navigation("WineVintageEvolutionScores");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Bottle", b =>
                {
                    b.Navigation("SipSessions");

                    b.Navigation("TastingNotes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.BottleLocation", b =>
                {
                    b.Navigation("Bottles");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Region", b =>
                {
                    b.Navigation("Appellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SipSession", b =>
                {
                    b.Navigation("Bottles");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Sisterhood", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Memberships");

                    b.Navigation("SipSessions");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SubAppellation", b =>
                {
                    b.Navigation("SuggestedAppellations");

                    b.Navigation("Wines");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SuggestedAppellation", b =>
                {
                    b.Navigation("SuggestedWines");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TasteProfile", b =>
                {
                    b.Navigation("SuggestedAppellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wine", b =>
                {
                    b.Navigation("SuggestedWines");

                    b.Navigation("WineVintages");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintage", b =>
                {
                    b.Navigation("Bottles");

                    b.Navigation("EvolutionScores");

                    b.Navigation("Wishes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wishlist", b =>
                {
                    b.Navigation("Wishes");
                });
#pragma warning restore 612, 618
        }
    }
}
