// <auto-generated />
using System;
using AllMCPSolution.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllMCPSolution.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020132403_bottleuser")]
    partial class bottleuser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AllMCPSolution.Models.Appellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("Name", "RegionId")
                        .IsUnique();

                    b.ToTable("Appellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Artwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("YearCreated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("AllMCPSolution.Models.ArtworkSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HammerPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("HighEstimate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LowEstimate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sold")
                        .HasColumnType("bit");

                    b.Property<string>("Technique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("YearCreated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("Name", "Height", "Width", "HammerPrice", "SaleDate", "ArtistId")
                        .IsUnique();

                    b.ToTable("ArtworkSales");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Bottle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BottleLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DrunkAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDrunk")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WineVintageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BottleLocationId");

                    b.HasIndex("UserId");

                    b.HasIndex("WineVintageId");

                    b.ToTable("Bottles");
                });

            modelBuilder.Entity("AllMCPSolution.Models.BottleLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("BottleLocations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AllMCPSolution.Models.InflationIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("IndexValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Year", "Month")
                        .IsUnique();

                    b.ToTable("InflationIndices");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SubAppellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppellationId");

                    b.HasIndex("Name", "AppellationId")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SubAppellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TastingNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BottleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BottleId");

                    b.HasIndex("UserId");

                    b.ToTable("TastingNotes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TasteProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("GrapeVariety")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SubAppellationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubAppellationId");

                    b.HasIndex("Name", "SubAppellationId")
                        .IsUnique();

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Vintage")
                        .HasColumnType("int");

                    b.Property<Guid>("WineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WineId", "Vintage")
                        .IsUnique();

                    b.ToTable("WineVintages");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintageEvolutionScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WineVintageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WineVintageId", "Year")
                        .IsUnique();

                    b.ToTable("WineVintageEvolutionScores");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Appellation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Region", "Region")
                        .WithMany("Appellations")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Artwork", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Artist", "Artist")
                        .WithMany("Artworks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("AllMCPSolution.Models.ArtworkSale", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Bottle", b =>
                {
                    b.HasOne("AllMCPSolution.Models.BottleLocation", "BottleLocation")
                        .WithMany("Bottles")
                        .HasForeignKey("BottleLocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AllMCPSolution.Models.User", "User")
                        .WithMany("Bottles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AllMCPSolution.Models.WineVintage", "WineVintage")
                        .WithMany("Bottles")
                        .HasForeignKey("WineVintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BottleLocation");

                    b.Navigation("User");

                    b.Navigation("WineVintage");
                });

            modelBuilder.Entity("AllMCPSolution.Models.BottleLocation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.User", "User")
                        .WithMany("BottleLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Region", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SubAppellation", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Appellation", "Appellation")
                        .WithMany("SubAppellations")
                        .HasForeignKey("AppellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appellation");
                });

            modelBuilder.Entity("AllMCPSolution.Models.TastingNote", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Bottle", "Bottle")
                        .WithMany("TastingNotes")
                        .HasForeignKey("BottleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllMCPSolution.Models.User", "User")
                        .WithMany("TastingNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bottle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wine", b =>
                {
                    b.HasOne("AllMCPSolution.Models.SubAppellation", "SubAppellation")
                        .WithMany("Wines")
                        .HasForeignKey("SubAppellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubAppellation");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintage", b =>
                {
                    b.HasOne("AllMCPSolution.Models.Wine", "Wine")
                        .WithMany("WineVintages")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintageEvolutionScore", b =>
                {
                    b.HasOne("AllMCPSolution.Models.WineVintage", "WineVintage")
                        .WithMany("EvolutionScores")
                        .HasForeignKey("WineVintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineVintage");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Appellation", b =>
                {
                    b.Navigation("SubAppellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Artist", b =>
                {
                    b.Navigation("Artworks");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Bottle", b =>
                {
                    b.Navigation("TastingNotes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.BottleLocation", b =>
                {
                    b.Navigation("Bottles");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Region", b =>
                {
                    b.Navigation("Appellations");
                });

            modelBuilder.Entity("AllMCPSolution.Models.SubAppellation", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("AllMCPSolution.Models.User", b =>
                {
                    b.Navigation("BottleLocations");

                    b.Navigation("Bottles");

                    b.Navigation("TastingNotes");
                });

            modelBuilder.Entity("AllMCPSolution.Models.Wine", b =>
                {
                    b.Navigation("WineVintages");
                });

            modelBuilder.Entity("AllMCPSolution.Models.WineVintage", b =>
                {
                    b.Navigation("Bottles");

                    b.Navigation("EvolutionScores");
                });
#pragma warning restore 612, 618
        }
    }
}
